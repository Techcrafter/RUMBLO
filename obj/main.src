; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_version:
	DB	49
	DB	46
	DB	48
	DB	0
_testMode:
	DW	0
	DB	0
	SEGMENT BSS
_selection:
	DS	3
_selecting:
	DS	3
_players:
	DS	3
_map:
	DS	3
_mapXBlock:
	DS	3
_mapYBlock:
	DS	3
_character0MoveSpeed:
	DS	3
_character0FallSpeed:
	DS	3
_character0JumpSpeed:
	DS	3
_character0JumpHeight:
	DS	3
_character0WeaponSpeed:
	DS	3
_character0WeaponKnockback:
	DS	3
_character0WeaponKnockbackStrength:
	DS	3
_character1MoveSpeed:
	DS	3
_character1FallSpeed:
	DS	3
_character1JumpSpeed:
	DS	3
_character1JumpHeight:
	DS	3
_character1WeaponSpeed:
	DS	3
_character1WeaponKnockback:
	DS	3
_character1WeaponKnockbackStrength:
	DS	3
_player:
	DS	3
_playerX:
	DS	3
_playerY:
	DS	3
_playerGrounded:
	DS	3
_playerDeath:
	DS	3
_player1SpawnX:
	DS	3
_player1SpawnY:
	DS	3
_player2SpawnX:
	DS	3
_player2SpawnY:
	DS	3
_player1CharacterSelection:
	DS	3
_player1X:
	DS	3
_player1Y:
	DS	3
_player1Flipped:
	DS	3
_player1MoveSpeed:
	DS	3
_player1FallSpeed:
	DS	3
_player1JumpSpeed:
	DS	3
_player1JumpHeight:
	DS	3
_player1MoveAnimation:
	DS	3
_player1MoveAnimationCount:
	DS	3
_player1Jumping:
	DS	3
_player1Grounded:
	DS	3
_player1ShieldActive:
	DS	3
_player1XKnockback:
	DS	3
_player1Lifes:
	DS	3
_player1WeaponSpeed:
	DS	3
_player1WeaponKnockback:
	DS	3
_player1WeaponKnockbackStrength:
	DS	3
_player1Weapon1:
	DS	3
_player1Weapon1X:
	DS	3
_player1Weapon1Y:
	DS	3
_player1Weapon1Flipped:
	DS	3
_player1Weapon2:
	DS	3
_player1Weapon2X:
	DS	3
_player1Weapon2Y:
	DS	3
_player1Weapon2Flipped:
	DS	3
_player1Weapon3:
	DS	3
_player1Weapon3X:
	DS	3
_player1Weapon3Y:
	DS	3
_player1Weapon3Flipped:
	DS	3
_player2IsAi:
	DS	3
_player2CharacterSelection:
	DS	3
_player2X:
	DS	3
_player2Y:
	DS	3
_player2Flipped:
	DS	3
_player2MoveSpeed:
	DS	3
_player2FallSpeed:
	DS	3
_player2JumpSpeed:
	DS	3
_player2JumpHeight:
	DS	3
_player2MoveAnimation:
	DS	3
_player2MoveAnimationCount:
	DS	3
_player2Jumping:
	DS	3
_player2Grounded:
	DS	3
_player2ShieldActive:
	DS	3
_player2XKnockback:
	DS	3
_player2Lifes:
	DS	3
_player2WeaponSpeed:
	DS	3
_player2WeaponKnockback:
	DS	3
_player2WeaponKnockbackStrength:
	DS	3
_player2Weapon1:
	DS	3
_player2Weapon1X:
	DS	3
_player2Weapon1Y:
	DS	3
_player2Weapon1Flipped:
	DS	3
_player2Weapon2:
	DS	3
_player2Weapon2X:
	DS	3
_player2Weapon2Y:
	DS	3
_player2Weapon2Flipped:
	DS	3
_player2Weapon3:
	DS	3
_player2Weapon3X:
	DS	3
_player2Weapon3Y:
	DS	3
_player2Weapon3Flipped:
	DS	3
_key:
	DS	1
_player1Character:
	DS	3
_player1CharacterMoving1:
	DS	3
_player1CharacterMoving2:
	DS	3
_player1CharacterJumping:
	DS	3
_player1CharacterFlipped:
	DS	3
_player1CharacterMoving1Flipped:
	DS	3
_player1CharacterMoving2Flipped:
	DS	3
_player1CharacterJumpingFlipped:
	DS	3
_player1Weapon:
	DS	3
_player1WeaponFlipped:
	DS	3
_player2Character:
	DS	3
_player2CharacterMoving1:
	DS	3
_player2CharacterMoving2:
	DS	3
_player2CharacterJumping:
	DS	3
_player2CharacterFlipped:
	DS	3
_player2CharacterMoving1Flipped:
	DS	3
_player2CharacterMoving2Flipped:
	DS	3
_player2CharacterJumpingFlipped:
	DS	3
_player2Weapon:
	DS	3
_player2WeaponFlipped:
	DS	3
_tilemap:
	DS	18
;    1	#include <fileioc.h>
;    2	#include <fontlibc.h>
;    3	#include "gfx/gfx.h"
;    4	#include <graphx.h>
;    5	#include <keypadc.h>
;    6	#include <stdbool.h>
;    7	#include <stddef.h>
;    8	#include <stdint.h>
;    9	#include <stdio.h>
;   10	#include <stdlib.h>
;   11	#include <string.h>
;   12	#include <tice.h>
;   13	
;   14	extern unsigned char tilemap_map[];
;   15	
;   16	#define TILE_WIDTH          16
;   17	#define TILE_HEIGHT         16
;   18	
;   19	#define TILEMAP_WIDTH       160
;   20	#define TILEMAP_HEIGHT      120
;   21	
;   22	#define TILEMAP_DRAW_WIDTH  20
;   23	#define TILEMAP_DRAW_HEIGHT 15
;   24	
;   25	#define Y_OFFSET            0
;   26	#define X_OFFSET            0
;   27	
;   28	#define BLACK				1
;   29	#define GRAY				3
;   30	#define RED					gfx_red
;   31	#define TRANSPARENT			0
;   32	#define WHITE				2
;   33	
;   34	char version[] = "1.0";
;   35	int testMode = 0;
;   36	
;   37	int selection;
;   38	int selecting;
;   39	
;   40	int players;
;   41	int map;
;   42	int mapXBlock;
;   43	int mapYBlock;
;   44	
;   45	int character0MoveSpeed;
;   46	int character0FallSpeed;
;   47	int character0JumpSpeed;
;   48	int character0JumpHeight;
;   49	
;   50	int character0WeaponSpeed;
;   51	int character0WeaponKnockback;
;   52	int character0WeaponKnockbackStrength;
;   53	
;   54	int character1MoveSpeed;
;   55	int character1FallSpeed;
;   56	int character1JumpSpeed;
;   57	int character1JumpHeight;
;   58	
;   59	int character1WeaponSpeed;
;   60	int character1WeaponKnockback;
;   61	int character1WeaponKnockbackStrength;
;   62	
;   63	int player;
;   64	int playerX;
;   65	int playerY;
;   66	int playerGrounded;
;   67	int playerDeath;
;   68	
;   69	int player1SpawnX;
;   70	int player1SpawnY;
;   71	int player2SpawnX;
;   72	int player2SpawnY;
;   73	
;   74	int player1CharacterSelection;
;   75	int player1X;
;   76	int player1Y;
;   77	int player1Flipped;
;   78	int player1MoveSpeed;
;   79	int player1FallSpeed;
;   80	int player1JumpSpeed;
;   81	int player1JumpHeight;
;   82	int player1MoveAnimation;
;   83	int player1MoveAnimationCount;
;   84	int player1Jumping;
;   85	int player1Grounded;
;   86	int player1ShieldActive;
;   87	int player1XKnockback;
;   88	int player1Lifes;
;   89	
;   90	int player1WeaponSpeed;
;   91	int player1WeaponKnockback;
;   92	int player1WeaponKnockbackStrength;
;   93	int player1Weapon1;
;   94	int player1Weapon1X;
;   95	int player1Weapon1Y;
;   96	int player1Weapon1Flipped;
;   97	int player1Weapon2;
;   98	int player1Weapon2X;
;   99	int player1Weapon2Y;
;  100	int player1Weapon2Flipped;
;  101	int player1Weapon3;
;  102	int player1Weapon3X;
;  103	int player1Weapon3Y;
;  104	int player1Weapon3Flipped;
;  105	
;  106	int player2IsAi;
;  107	int player2CharacterSelection;
;  108	int player2X;
;  109	int player2Y;
;  110	int player2Flipped;
;  111	int player2MoveSpeed;
;  112	int player2FallSpeed;
;  113	int player2JumpSpeed;
;  114	int player2JumpHeight;
;  115	int player2MoveAnimation;
;  116	int player2MoveAnimationCount;
;  117	int player2Jumping;
;  118	int player2Grounded;
;  119	int player2ShieldActive;
;  120	int player2XKnockback;
;  121	int player2Lifes;
;  122	
;  123	int player2WeaponSpeed;
;  124	int player2WeaponKnockback;
;  125	int player2WeaponKnockbackStrength;
;  126	int player2Weapon1;
;  127	int player2Weapon1X;
;  128	int player2Weapon1Y;
;  129	int player2Weapon1Flipped;
;  130	int player2Weapon2;
;  131	int player2Weapon2X;
;  132	int player2Weapon2Y;
;  133	int player2Weapon2Flipped;
;  134	int player2Weapon3;
;  135	int player2Weapon3X;
;  136	int player2Weapon3Y;
;  137	int player2Weapon3Flipped;
;  138	
;  139	sk_key_t key;
;  140	
;  141	gfx_sprite_t *player1Character;
;  142	gfx_sprite_t *player1CharacterMoving1;
;  143	gfx_sprite_t *player1CharacterMoving2;
;  144	gfx_sprite_t *player1CharacterJumping;
;  145	gfx_sprite_t *player1CharacterFlipped;
;  146	gfx_sprite_t *player1CharacterMoving1Flipped;
;  147	gfx_sprite_t *player1CharacterMoving2Flipped;
;  148	gfx_sprite_t *player1CharacterJumpingFlipped;
;  149	
;  150	gfx_sprite_t *player1Weapon;
;  151	gfx_sprite_t *player1WeaponFlipped;
;  152	
;  153	gfx_sprite_t *player2Character;
;  154	gfx_sprite_t *player2CharacterMoving1;
;  155	gfx_sprite_t *player2CharacterMoving2;
;  156	gfx_sprite_t *player2CharacterJumping;
;  157	gfx_sprite_t *player2CharacterFlipped;
;  158	gfx_sprite_t *player2CharacterMoving1Flipped;
;  159	gfx_sprite_t *player2CharacterMoving2Flipped;
;  160	gfx_sprite_t *player2CharacterJumpingFlipped;
;  161	
;  162	gfx_sprite_t *player2Weapon;
;  163	gfx_sprite_t *player2WeaponFlipped;
;  164	
;  165	gfx_tilemap_t tilemap;
	SEGMENT CODE
;  166	
;  167	int getXBlock(int xBlock)
;  168	{
_getXBlock:
	CALL	__frameset0
;  169		return TILE_WIDTH * TILEMAP_DRAW_WIDTH * xBlock;
	LD	BC,320
	LD	HL,(IX+6)
	CALL	__imuls
;  170	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getXBlock ***************************
;Name                         Addr/Register   Size   Type
;xBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  171	
;  172	int getYBlock(int yBlock)
;  173	{
_getYBlock:
	CALL	__frameset0
;  174		return TILE_HEIGHT * TILEMAP_DRAW_HEIGHT * yBlock;
	LD	HL,(IX+6)
	LD	A,240
	CALL	__imul_b
;  175	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getYBlock ***************************
;Name                         Addr/Register   Size   Type
;yBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  176	
;  177	int main(void)
;  178	{
_main:
	LD	HL,-4
	CALL	__frameset
;  179		//initialization
;  180		player1Character = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  181		player1CharacterMoving1 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1Character),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  182		player1CharacterMoving2 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving1),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  183		player1CharacterJumping = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving2),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  184		player1CharacterFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterJumping),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  185		player1CharacterMoving1Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  186		player1CharacterMoving2Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving1Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  187		player1CharacterJumpingFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving2Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  188		
;  189		player1Weapon = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player1CharacterJumpingFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  190		player1WeaponFlipped = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player1Weapon),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  191		
;  192		player2Character = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1WeaponFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  193		player2CharacterMoving1 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2Character),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  194		player2CharacterMoving2 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving1),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  195		player2CharacterJumping = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving2),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  196		player2CharacterFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterJumping),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  197		player2CharacterMoving1Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  198		player2CharacterMoving2Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving1Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  199		player2CharacterJumpingFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving2Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  200		
;  201		player2Weapon = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player2CharacterJumpingFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  202		player2WeaponFlipped = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player2Weapon),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_player2WeaponFlipped),HL
;  203		
;  204		tilemap.map         = tilemap_map;
	LD	BC,_tilemap_map
	LD	(_tilemap),BC
;  205	    tilemap.tiles       = tileset_tiles;
	LD	BC,_tileset_tiles_data
	LD	(_tilemap+3),BC
;  206	    tilemap.type_width  = gfx_tile_16_pixel;
	LD	A,4
	LD	(_tilemap+10),A
;  207	    tilemap.type_height = gfx_tile_16_pixel;
	LD	(_tilemap+11),A
;  208	    tilemap.tile_height = TILE_HEIGHT;
	LD	A,16
	LD	(_tilemap+6),A
;  209	    tilemap.tile_width  = TILE_WIDTH;
	LD	(_tilemap+7),A
;  210	    tilemap.draw_height = TILEMAP_DRAW_HEIGHT;
	LD	A,15
	LD	(_tilemap+8),A
;  211	    tilemap.draw_width  = TILEMAP_DRAW_WIDTH;
	LD	A,20
	LD	(_tilemap+9),A
;  212	    tilemap.height      = TILEMAP_HEIGHT;
	LD	A,120
	LD	(_tilemap+12),A
;  213	    tilemap.width       = TILEMAP_WIDTH;
	LD	A,160
	LD	(_tilemap+13),A
;  214	    tilemap.y_loc       = Y_OFFSET;
	XOR	A,A
	LD	(_tilemap+14),A
;  215	    tilemap.x_loc       = X_OFFSET;
	LD	BC,0
	LD	(_tilemap+15),BC
;  216		
;  217		gfx_Begin();
	CALL	_gfx_Begin
;  218		
;  219		gfx_SetPalette(global_palette, sizeof_global_palette, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,264
	PUSH	BC
	LD	BC,_global_palette
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  220		gfx_SetTransparentColor(TRANSPARENT);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;  221	    gfx_SetColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  222		
;  223		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  224		
;  225		gfx_SetMonospaceFont(8);
	LD	BC,8
	PUSH	BC
	CALL	_gfx_SetMonospaceFont
	POP	BC
;  226		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  227	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  228		
;  229		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  230		gfx_PrintStringXY(version, 296, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,_version
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  231		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  232		
;  233		character0MoveSpeed = 4;
	LD	BC,4
	LD	(_character0MoveSpeed),BC
;  234		character0FallSpeed = 4;
	LD	(_character0FallSpeed),BC
;  235		character0JumpSpeed = 8;
	LD	BC,8
	LD	(_character0JumpSpeed),BC
;  236		character0JumpHeight = 10;
	LD	BC,10
	LD	(_character0JumpHeight),BC
;  237				
;  238		character0WeaponSpeed = 8;
	LD	BC,8
	LD	(_character0WeaponSpeed),BC
;  239		character0WeaponKnockback = 4;
	LD	BC,4
	LD	(_character0WeaponKnockback),BC
;  240		character0WeaponKnockbackStrength = 6;
	LD	BC,6
	LD	(_character0WeaponKnockbackStrength),BC
;  241		
;  242		character1MoveSpeed = 8;
	LD	BC,8
	LD	(_character1MoveSpeed),BC
;  243		character1FallSpeed = 4;
	LD	BC,4
	LD	(_character1FallSpeed),BC
;  244		character1JumpSpeed = 8;
	LD	BC,8
	LD	(_character1JumpSpeed),BC
;  245		character1JumpHeight = 15;
	LD	BC,15
	LD	(_character1JumpHeight),BC
;  246		
;  247		character1WeaponSpeed = 6;
	LD	BC,6
;  248		character1WeaponKnockback = 4;
;  249		character1WeaponKnockbackStrength = 4;
;  250		
;  251		delay(2000);
	LD	DE,2000
	PUSH	DE
	LD	(_character1WeaponSpeed),BC
	LD	BC,4
	LD	(_character1WeaponKnockback),BC
	LD	(_character1WeaponKnockbackStrength),BC
	CALL	_delay
	POP	BC
;  252		
;  253		//---------------------------------------------------------------
;  254		
;  255		//start screen
;  256		startScreen:
L_2:
;  257		
;  258		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  259		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  260	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  261		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  262		gfx_PrintStringXY("Press [2nd] to start...", 78, 200);
	LD	BC,200
	PUSH	BC
	LD	BC,78
	PUSH	BC
	LD	BC,L__2
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  263		gfx_PrintStringXY(version, 296, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,_version
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  264		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  265		while(os_GetCSC() != sk_2nd);
L_4:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_4
;  266		
;  267		//---------------------------------------------------------------
;  268		
;  269		//main menu
;  270		mainMenu:
L_5:
;  271		
;  272		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  273		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  274		while(selecting)
	JR	L_25
L_26:
;  275		{
;  276			gfx_Tilemap(&tilemap, getXBlock(1), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  277			gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  278			gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  279			
;  280			key = os_GetCSC();
	CALL	_os_GetCSC
;  281			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_17
;  282			{
;  283				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  284			}
;  285			else if(key == sk_Clear)
	JR	L_20
L_17:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_2
;  286			{
;  287				goto startScreen;
;  288			}
;  289			else if(key == sk_Up && selection != 0)
	LD	A,(_key)
	CP	A,4
	JR	NZ,L_13
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_13
;  290			{
;  291				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  292			}
;  293			else if(key == sk_Down && selection != 1)
	JR	L_20
L_13:
	LD	A,(_key)
	CP	A,1
	JR	NZ,L_20
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_20
;  294			{
;  295				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  296			}
L_20:
;  297			
;  298			if(selection == 0)
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_19
;  299			{
;  300				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  301			}
;  302			else
	JR	L_21
L_19:
;  303			{
;  304				gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  305			}
L_21:
;  306			gfx_PrintStringXY("Singleplayer", 112, 68);
	LD	BC,68
	PUSH	BC
	LD	BC,112
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  307			if(selection == 1)
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_23
;  308			{
;  309				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  310			}
;  311			else
	JR	L_24
L_23:
;  312			{
;  313				gfx_SetTextFGColor(BLACK);
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  314			}
L_24:
;  315			gfx_PrintStringXY("Quit game", 124, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,124
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  316			gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  317			gfx_PrintStringXY("Star it on GitHub!", 90, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,90
	PUSH	BC
	LD	BC,L__14
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  318			
;  319			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  320		}
L_25:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_26
;  321		
;  322		switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__16:
	DW	2
	DB	0
	DW24	L_27	

	DB	1
	DW24	L_30	

	DW24	L_32	

;  323		{
;  324			case 0:
L_27:
;  325				players = 1;
	LD	BC,1
	LD	(_players),BC
;  326				goto mapSelector;
L_28:
;  327				break;
;  328			case 1:
;  329				goto quitGame;
;  330				break;
;  331		}
;  332		
;  333		goto error;
;  334		
;  335		//---------------------------------------------------------------
;  336		
;  337		//map selector
;  338		mapSelector:
;  339		
;  340		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  341		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  342		while(selecting)
	JR	L_49
L_50:
;  343		{
;  344			gfx_Tilemap(&tilemap, getXBlock(2), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,2
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  345			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  346			gfx_SetTextBGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  347			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  348			gfx_PrintStringXY("Select a map:", 62, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,L__17
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  349			
;  350			key = os_GetCSC();
	CALL	_os_GetCSC
;  351			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_44
;  352			{
;  353				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  354			}
;  355			else if(key == sk_Clear)
	JR	L_47
L_44:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_5
;  356			{
;  357				goto mainMenu;
;  358			}
;  359			else if(key == sk_Left && selection != 0)
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_40
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_40
;  360			{
;  361				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  362			}
;  363			else if(key == sk_Right && selection != 1)
	JR	L_47
L_40:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_47
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_47
;  364			{
;  365				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  366			}
L_47:
;  367			
;  368			switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__24:
	DW	2
	DB	0
	DW24	L_45	

	DB	1
	DW24	L_46	

	DW24	L_48	

;  369			{
;  370				case 0:
L_45:
;  371					gfx_TransparentSprite(mapHighlighter, 32, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  372					break;
	JR	L_48
;  373				case 1:
L_46:
;  374					gfx_TransparentSprite(mapHighlighter, 96, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  375					break;
;  376			}
L_48:
;  377			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  378		}
L_49:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_50
;  379		map = selection;
	LD	BC,(_selection)
	LD	(_map),BC
;  380		switch(map)
	LD	HL,(_map)
	CALL	__case8
L__26:
	DW	2
	DB	0
	DW24	L_52	

	DB	1
	DW24	L_53	

	DW24	L_54	

;  381		{
;  382			case 0:
L_52:
;  383				mapXBlock = 3;
	LD	BC,3
	LD	(_mapXBlock),BC
;  384				mapYBlock = 0;
	LD	BC,0
	LD	(_mapYBlock),BC
;  385				break;
	JR	L_54
;  386			case 1:
L_53:
;  387				mapXBlock = 5;
	LD	BC,5
	LD	(_mapXBlock),BC
;  388				mapYBlock = 0;
	LD	BC,0
	LD	(_mapYBlock),BC
;  389				break;
;  390		}
;  391		
;  392		goto characterSelector;
L_54:
;  393		
;  394		//---------------------------------------------------------------
;  395		
;  396		//character selector
;  397		characterSelector:
;  398		
;  399		selection = 0;
	LD	(_selection),BC
;  400		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  401		
;  402		while(selecting)
	JR	L_77
L_78:
;  403		{
;  404			gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  405			gfx_SetColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  406			gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  407			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  408			gfx_SetTextBGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  409			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  410			gfx_PrintStringXY("Select a character:", 10, 76);
	LD	BC,76
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__27
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  411			gfx_TransparentSprite(characterHighlighter, 138, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,138
	PUSH	BC
	LD	BC,_characterHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  412			
;  413			key = os_GetCSC();
	CALL	_os_GetCSC
;  414			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_72
;  415			{
;  416				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  417			}
;  418			else if(key == sk_Clear)
	JR	L_75
L_72:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_28
;  419			{
;  420				goto mapSelector;
;  421			}
;  422			else if(key == sk_Left && selection != 0)
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_68
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_68
;  423			{
;  424				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  425			}
;  426			else if(key == sk_Left && selection == 0)
	JR	L_75
L_68:
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_66
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_66
;  427			{
;  428				selection = 1;
	LD	BC,1
	LD	(_selection),BC
;  429			}
;  430			else if(key == sk_Right && selection != 1)
	JR	L_75
L_66:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_64
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_64
;  431			{
;  432				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  433			}
;  434			else if(key == sk_Right && selection == 1)
	JR	L_75
L_64:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_75
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_75
;  435			{
;  436				selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  437			}
L_75:
;  438			
;  439			switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__38:
	DW	2
	DB	0
	DW24	L_73	

	DB	1
	DW24	L_74	

	DW24	L_76	

;  440			{
;  441				case 0:
L_73:
;  442					gfx_TransparentSprite(character1, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  443					gfx_TransparentSprite(character0, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  444					gfx_TransparentSprite(character1, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  445					break;
	JR	L_76
;  446				case 1:
L_74:
;  447					gfx_TransparentSprite(character0, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  448					gfx_TransparentSprite(character1, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  449					gfx_TransparentSprite(character0, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  450					break;
;  451			}
L_76:
;  452			
;  453			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  454		}
L_77:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_78
;  455		player1CharacterSelection = selection;
	LD	BC,(_selection)
	LD	(_player1CharacterSelection),BC
;  456		
;  457		goto prepareFight;
;  458		
;  459		//---------------------------------------------------------------
;  460		
;  461		//prepareFight
;  462		prepareFight:
;  463		
;  464		player1Flipped = 0;
	LD	BC,0
	LD	(_player1Flipped),BC
;  465		player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
;  466		player1Jumping = 0;
	LD	(_player1Jumping),BC
;  467		player1Grounded = 1;
	LD	BC,1
	LD	(_player1Grounded),BC
;  468		player1ShieldActive = 0;
	LD	BC,0
	LD	(_player1ShieldActive),BC
;  469		player1Lifes = 3;
	LD	BC,3
	LD	(_player1Lifes),BC
;  470		player2Flipped = 1;
	LD	BC,1
	LD	(_player2Flipped),BC
;  471		player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
;  472		player2Jumping = 0;
	LD	(_player2Jumping),BC
;  473		player2Grounded = 1;
	LD	BC,1
	LD	(_player2Grounded),BC
;  474		player2ShieldActive = 0;
	LD	BC,0
	LD	(_player2ShieldActive),BC
;  475		player2Lifes = 3;
	LD	BC,3
	LD	(_player2Lifes),BC
;  476		if(players == 1)
	LD	HL,(_players)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_83
;  477		{
;  478			player2IsAi = 1;
	LD	(_player2IsAi),BC
;  479		}
;  480		else if(players == 2)
	JR	L_86
L_83:
	LD	BC,2
	LD	HL,(_players)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_86
;  481		{
;  482			player2IsAi = 0;
	LD	BC,0
	LD	(_player2IsAi),BC
;  483		}
L_86:
;  484		switch(map)
	LD	HL,(_map)
	CALL	__case8
L__42:
	DW	2
	DB	0
	DW24	L_84	

	DB	1
	DW24	L_85	

	DW24	L_87	

;  485		{
;  486			case 0:
L_84:
;  487				player1SpawnX = 80;
	LD	BC,80
	LD	(_player1SpawnX),BC
;  488				player1SpawnY = 132;
	LD	BC,132
	LD	(_player1SpawnY),BC
;  489				
;  490				player2SpawnX = 220;
	LD	BC,220
	LD	(_player2SpawnX),BC
;  491				player2SpawnY = 132;
	LD	BC,132
	LD	(_player2SpawnY),BC
;  492				break;
	JR	L_87
;  493			case 1:
L_85:
;  494				player1SpawnX = 32;
	LD	BC,32
	LD	(_player1SpawnX),BC
;  495				player1SpawnY = 96;
	LD	BC,96
	LD	(_player1SpawnY),BC
;  496				
;  497				player2SpawnX = 256;
	LD	BC,256
	LD	(_player2SpawnX),BC
;  498				player2SpawnY = 96;
	LD	BC,96
	LD	(_player2SpawnY),BC
;  499				break;
;  500		}
L_87:
;  501		player1X = player1SpawnX;
	LD	BC,(_player1SpawnX)
	LD	(_player1X),BC
;  502		player1Y = player1SpawnY;
	LD	BC,(_player1SpawnY)
	LD	(_player1Y),BC
;  503		player2X = player2SpawnX;
	LD	BC,(_player2SpawnX)
	LD	(_player2X),BC
;  504		player2Y = player2SpawnY;
	LD	BC,(_player2SpawnY)
	LD	(_player2Y),BC
;  505		
;  506		switch(player1CharacterSelection)
	LD	HL,(_player1CharacterSelection)
	CALL	__case8
L__43:
	DW	2
	DB	0
	DW24	L_88	

	DB	1
	DW24	L_89	

	DW24	L_92	

;  507		{
;  508			case 0:
L_88:
;  509				player1Character = character0;
	LD	BC,_character0_data
	LD	(_player1Character),BC
;  510				player1CharacterMoving1 = character0Moving1;
	LD	BC,_character0Moving1_data
	LD	(_player1CharacterMoving1),BC
;  511				player1CharacterMoving2 = character0Moving2;
	LD	BC,_character0Moving2_data
	LD	(_player1CharacterMoving2),BC
;  512				player1CharacterJumping = character0Jumping;
	LD	BC,_character0Jumping_data
	LD	(_player1CharacterJumping),BC
;  513				gfx_FlipSpriteY(character0, player1CharacterFlipped);
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  514				gfx_FlipSpriteY(character0Moving1, player1CharacterMoving1Flipped);
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character0Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  515				gfx_FlipSpriteY(character0Moving2, player1CharacterMoving2Flipped);
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character0Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  516				gfx_FlipSpriteY(character0Jumping, player1CharacterJumpingFlipped);
	LD	BC,(_player1CharacterJumpingFlipped)
	PUSH	BC
	LD	BC,_character0Jumping_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  517				
;  518				player1Weapon = character0Weapon;
	LD	BC,_character0Weapon_data
	LD	(_player1Weapon),BC
;  519				gfx_FlipSpriteY(character0Weapon, player1WeaponFlipped);
	LD	BC,(_player1WeaponFlipped)
	PUSH	BC
	LD	BC,_character0Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  520				
;  521				player1MoveSpeed = character0MoveSpeed;
	LD	BC,(_character0MoveSpeed)
	LD	(_player1MoveSpeed),BC
;  522				player1FallSpeed = character0FallSpeed;
	LD	BC,(_character0FallSpeed)
	LD	(_player1FallSpeed),BC
;  523				player1JumpSpeed = character0JumpSpeed;
	LD	BC,(_character0JumpSpeed)
	LD	(_player1JumpSpeed),BC
;  524				player1JumpHeight = character0JumpHeight;
	LD	BC,(_character0JumpHeight)
	LD	(_player1JumpHeight),BC
;  525				
;  526				player1WeaponSpeed = character0WeaponSpeed;
	LD	BC,(_character0WeaponSpeed)
	LD	(_player1WeaponSpeed),BC
;  527				player1WeaponKnockback = character0WeaponKnockback;
	LD	BC,(_character0WeaponKnockback)
	LD	(_player1WeaponKnockback),BC
;  528				player1WeaponKnockbackStrength = character0WeaponKnockbackStrength;
	LD	BC,(_character0WeaponKnockbackStrength)
	LD	(_player1WeaponKnockbackStrength),BC
;  529				break;
	JR	L_92
;  530			case 1:
L_89:
;  531				player1Character = character1;
	LD	BC,_character1_data
	LD	(_player1Character),BC
;  532				player1CharacterMoving1 = character1Moving1;
	LD	BC,_character1Moving1_data
	LD	(_player1CharacterMoving1),BC
;  533				player1CharacterMoving2 = character1Moving2;
	LD	BC,_character1Moving2_data
	LD	(_player1CharacterMoving2),BC
;  534				player1CharacterJumping = character1Jumping;
	LD	BC,_character1Jumping_data
	LD	(_player1CharacterJumping),BC
;  535				gfx_FlipSpriteY(character1, player1CharacterFlipped);
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  536				gfx_FlipSpriteY(character1Moving1, player1CharacterMoving1Flipped);
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character1Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  537				gfx_FlipSpriteY(character1Moving2, player1CharacterMoving2Flipped);
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character1Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  538				gfx_FlipSpriteY(character1Jumping, player1CharacterJumpingFlipped);
	LD	BC,(_player1CharacterJumpingFlipped)
	PUSH	BC
	LD	BC,_character1Jumping_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  539				
;  540				player1Weapon = character1Weapon;
	LD	BC,_character1Weapon_data
	LD	(_player1Weapon),BC
;  541				gfx_FlipSpriteY(character1Weapon, player1WeaponFlipped);
	LD	BC,(_player1WeaponFlipped)
	PUSH	BC
	LD	BC,_character1Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  542				
;  543				player1MoveSpeed = character1MoveSpeed;
	LD	BC,(_character1MoveSpeed)
	LD	(_player1MoveSpeed),BC
;  544				player1FallSpeed = character1FallSpeed;
	LD	BC,(_character1FallSpeed)
	LD	(_player1FallSpeed),BC
;  545				player1JumpSpeed = character1JumpSpeed;
	LD	BC,(_character1JumpSpeed)
	LD	(_player1JumpSpeed),BC
;  546				player1JumpHeight = character1JumpHeight;
	LD	BC,(_character1JumpHeight)
	LD	(_player1JumpHeight),BC
;  547				
;  548				player1WeaponSpeed = character1WeaponSpeed;
	LD	BC,(_character1WeaponSpeed)
	LD	(_player1WeaponSpeed),BC
;  549				player1WeaponKnockback = character1WeaponKnockback;
	LD	BC,(_character1WeaponKnockback)
	LD	(_player1WeaponKnockback),BC
;  550				player1WeaponKnockbackStrength = character1WeaponKnockbackStrength;
	LD	BC,(_character1WeaponKnockbackStrength)
	LD	(_player1WeaponKnockbackStrength),BC
;  551				break;
;  552		}
L_92:
;  553		switch(player2CharacterSelection)
	LD	HL,(_player2CharacterSelection)
	CALL	__case8
L__44:
	DW	2
	DB	0
	DW24	L_90	

	DB	1
	DW24	L_91	

	DW24	L_93	

;  554		{
;  555			case 0:
L_90:
;  556				player2Character = character0;
	LD	BC,_character0_data
	LD	(_player2Character),BC
;  557				player2CharacterMoving1 = character0Moving1;
	LD	BC,_character0Moving1_data
	LD	(_player2CharacterMoving1),BC
;  558				player2CharacterMoving2 = character0Moving2;
	LD	BC,_character0Moving2_data
	LD	(_player2CharacterMoving2),BC
;  559				player2CharacterJumping = character0Jumping;
	LD	BC,_character0Jumping_data
	LD	(_player2CharacterJumping),BC
;  560				gfx_FlipSpriteY(character0, player2CharacterFlipped);
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  561				gfx_FlipSpriteY(character0Moving1, player2CharacterMoving1Flipped);
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character0Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  562				gfx_FlipSpriteY(character0Moving2, player2CharacterMoving2Flipped);
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character0Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  563				gfx_FlipSpriteY(character0Jumping, player2CharacterJumpingFlipped);
	LD	BC,(_player2CharacterJumpingFlipped)
	PUSH	BC
	LD	BC,_character0Jumping_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  564				
;  565				player2Weapon = character0Weapon;
	LD	BC,_character0Weapon_data
	LD	(_player2Weapon),BC
;  566				gfx_FlipSpriteY(character0Weapon, player2WeaponFlipped);
	LD	BC,(_player2WeaponFlipped)
	PUSH	BC
	LD	BC,_character0Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  567				
;  568				player2MoveSpeed = character0MoveSpeed;
	LD	BC,(_character0MoveSpeed)
	LD	(_player2MoveSpeed),BC
;  569				player2FallSpeed = character0FallSpeed;
	LD	BC,(_character0FallSpeed)
	LD	(_player2FallSpeed),BC
;  570				player2JumpSpeed = character0JumpSpeed;
	LD	BC,(_character0JumpSpeed)
	LD	(_player2JumpSpeed),BC
;  571				player2JumpHeight = character0JumpHeight;
	LD	BC,(_character0JumpHeight)
	LD	(_player2JumpHeight),BC
;  572				
;  573				player2WeaponSpeed = character0WeaponSpeed;
	LD	BC,(_character0WeaponSpeed)
	LD	(_player2WeaponSpeed),BC
;  574				player2WeaponKnockback = character0WeaponKnockback;
	LD	BC,(_character0WeaponKnockback)
	LD	(_player2WeaponKnockback),BC
;  575				player2WeaponKnockbackStrength = character0WeaponKnockbackStrength;
	LD	BC,(_character0WeaponKnockbackStrength)
	LD	(_player2WeaponKnockbackStrength),BC
;  576				break;
	JR	L_93
;  577			case 1:
L_91:
;  578				player2Character = character1;
	LD	BC,_character1_data
	LD	(_player2Character),BC
;  579				player2CharacterMoving1 = character1Moving1;
	LD	BC,_character1Moving1_data
	LD	(_player2CharacterMoving1),BC
;  580				player2CharacterMoving2 = character1Moving2;
	LD	BC,_character1Moving2_data
	LD	(_player2CharacterMoving2),BC
;  581				player2CharacterJumping = character1Jumping;
	LD	BC,_character1Jumping_data
	LD	(_player2CharacterJumping),BC
;  582				gfx_FlipSpriteY(character1, player2CharacterFlipped);
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  583				gfx_FlipSpriteY(character1Moving1, player2CharacterMoving1Flipped);
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character1Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  584				gfx_FlipSpriteY(character1Moving2, player2CharacterMoving2Flipped);
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character1Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  585				gfx_FlipSpriteY(character1Jumping, player2CharacterJumpingFlipped);
	LD	BC,(_player2CharacterJumpingFlipped)
	PUSH	BC
	LD	BC,_character1Jumping_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  586				
;  587				player2Weapon = character1Weapon;
	LD	BC,_character1Weapon_data
	LD	(_player2Weapon),BC
;  588				gfx_FlipSpriteY(character1Weapon, player2WeaponFlipped);
	LD	BC,(_player2WeaponFlipped)
	PUSH	BC
	LD	BC,_character1Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  589				
;  590				player2MoveSpeed = character1MoveSpeed;
	LD	BC,(_character1MoveSpeed)
	LD	(_player2MoveSpeed),BC
;  591				player2FallSpeed = character1FallSpeed;
	LD	BC,(_character1FallSpeed)
	LD	(_player2FallSpeed),BC
;  592				player2JumpSpeed = character1JumpSpeed;
	LD	BC,(_character1JumpSpeed)
	LD	(_player2JumpSpeed),BC
;  593				player2JumpHeight = character1JumpHeight;
	LD	BC,(_character1JumpHeight)
	LD	(_player2JumpHeight),BC
;  594				
;  595				player2WeaponSpeed = character1WeaponSpeed;
	LD	BC,(_character1WeaponSpeed)
	LD	(_player2WeaponSpeed),BC
;  596				player2WeaponKnockback = character1WeaponKnockback;
	LD	BC,(_character1WeaponKnockback)
	LD	(_player2WeaponKnockback),BC
;  597				player2WeaponKnockbackStrength = character1WeaponKnockbackStrength;
	LD	BC,(_character1WeaponKnockbackStrength)
	LD	(_player2WeaponKnockbackStrength),BC
;  598				break;
;  599		}
L_93:
;  600		
;  601		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  602		gfx_TransparentSprite(counter3, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  603		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  604		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  605		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  606		gfx_TransparentSprite(counter2, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  607		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  608		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  609		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  610		gfx_TransparentSprite(counter1, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  611		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  612		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  613		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  614		gfx_TransparentSprite(counterFight, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counterFight_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  615		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  616		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  617		
;  618		goto fight;
L_94:
;  619		
;  620		//---------------------------------------------------------------
;  621		
;  622		//fight
;  623		fight:
;  624		
;  625		gfx_TransparentSprite(statusUi, 128, 208);
	LD	BC,208
	PUSH	BC
	LD	BC,128
	PUSH	BC
	LD	BC,_statusUi_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  626		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  627		gfx_SetTextBGColor(gfx_GetPixel(150, 224));
	LD	BC,224
	PUSH	BC
	LD	BC,150
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  628		
;  629		while(1)
L_441:
;  630		{
;  631			//fight - draw map
;  632			gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  633			
;  634			//fight - get keys (player 1)
;  635			key = os_GetCSC();
	CALL	_os_GetCSC
;  636			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_112
;  637			{
;  638				if(player1Grounded == 1)
	LD	BC,1
	LD	HL,(_player1Grounded)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_112
;  639				{
;  640					player1Jumping = player1JumpHeight;
	LD	BC,(_player1JumpHeight)
	LD	(_player1Jumping),BC
;  641				}
;  642			}
L_112:
;  643			if(key == sk_Alpha)
	LD	A,(_key)
	CP	A,48
	JR	NZ,L_115
;  644			{
;  645				if(player1Weapon1 == 0)
	LD	HL,(_player1Weapon1)
	CALL	__icmpzero
	JR	NZ,L_110
;  646				{
;  647					player1Weapon1 = 1;
	LD	BC,1
	LD	(_player1Weapon1),BC
;  648					player1Weapon1Flipped = player1Flipped;
	LD	BC,(_player1Flipped)
	LD	(_player1Weapon1Flipped),BC
;  649					if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_98
;  650					{
;  651						player1Weapon1X = player1X + 8;
	LD	IY,(_player1X)
	LEA	BC,IY+8
	LD	(_player1Weapon1X),BC
;  652					}
;  653					else
	JR	L_99
L_98:
;  654					{
;  655						player1Weapon1X = player1X - 8;
	LD	IY,(_player1X)
	LEA	BC,IY+-8
	LD	(_player1Weapon1X),BC
;  656					}
L_99:
;  657					player1Weapon1Y = player1Y + 17;
	LD	IY,(_player1Y)
	LEA	BC,IY+17
	LD	(_player1Weapon1Y),BC
;  658				}
;  659				else if(player1Weapon2 == 0)
	JR	L_115
L_110:
	LD	HL,(_player1Weapon2)
	CALL	__icmpzero
	JR	NZ,L_108
;  660				{
;  661					player1Weapon2 = 1;
	LD	BC,1
	LD	(_player1Weapon2),BC
;  662					player1Weapon2Flipped = player1Flipped;
	LD	BC,(_player1Flipped)
	LD	(_player1Weapon2Flipped),BC
;  663					if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_101
;  664					{
;  665						player1Weapon2X = player1X + 8;
	LD	IY,(_player1X)
	LEA	BC,IY+8
	LD	(_player1Weapon2X),BC
;  666					}
;  667					else
	JR	L_102
L_101:
;  668					{
;  669						player1Weapon2X = player1X - 8;
	LD	IY,(_player1X)
	LEA	BC,IY+-8
	LD	(_player1Weapon2X),BC
;  670					}
L_102:
;  671					player1Weapon2Y = player1Y + 17;
	LD	IY,(_player1Y)
	LEA	BC,IY+17
	LD	(_player1Weapon2Y),BC
;  672				}
;  673				else if(player1Weapon3 == 0)
	JR	L_115
L_108:
	LD	HL,(_player1Weapon3)
	CALL	__icmpzero
	JR	NZ,L_115
;  674				{
;  675					player1Weapon3 = 1;
	LD	BC,1
	LD	(_player1Weapon3),BC
;  676					player1Weapon3Flipped = player1Flipped;
	LD	BC,(_player1Flipped)
	LD	(_player1Weapon3Flipped),BC
;  677					if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_104
;  678					{
;  679						player1Weapon3X = player1X + 8;
	LD	IY,(_player1X)
	LEA	BC,IY+8
	LD	(_player1Weapon3X),BC
;  680					}
;  681					else
	JR	L_105
L_104:
;  682					{
;  683						player1Weapon3X = player1X - 8;
	LD	IY,(_player1X)
	LEA	BC,IY+-8
	LD	(_player1Weapon3X),BC
;  684					}
L_105:
;  685					player1Weapon3Y = player1Y + 17;
	LD	IY,(_player1Y)
	LEA	BC,IY+17
	LD	(_player1Weapon3Y),BC
;  686				}
;  687			}
L_115:
;  688			if(key == sk_Clear)
	LD	A,(_key)
	CP	A,15
	JR	Z,L_113
;  689			{
;  690				goto pause;
;  691			}
;  692			
;  693			kb_Scan();
	CALL	_kb_Scan
;  694	        key = kb_Data[7];
	LD	A,(16056350)
	LD	(_key),A
;  695			if(key & kb_Up)
	AND	A,8
	JR	Z,L_124
;  696			{
;  697				if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_124
;  698				{
;  699					player1Y -= 4;
	LD	IY,(_player1Y)
	LEA	BC,IY+-4
	LD	(_player1Y),BC
;  700				}
;  701			}
L_124:
;  702			if(key & kb_Down)
	LD	A,(_key)
	AND	A,1
	JR	Z,L_123
;  703			{
;  704				if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_120
;  705				{
;  706					player1Y += 4;
	LD	IY,(_player1Y)
	LEA	BC,IY+4
	LD	(_player1Y),BC
;  707				}
L_120:
;  708				player1Jumping = 0;
	LD	BC,0
	LD	(_player1Jumping),BC
;  709				if(player1Grounded == 1)
	LD	HL,(_player1Grounded)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_135
;  710				{
;  711					player1ShieldActive = 1;
	LD	(_player1ShieldActive),BC
;  712				}
;  713			}
;  714			else
	JR	L_135
L_123:
;  715			{
;  716				player1ShieldActive = 0;
	LD	BC,0
	LD	(_player1ShieldActive),BC
;  717			}
L_135:
;  718			if(key & kb_Left && player1ShieldActive == 0)
	LD	A,(_key)
	AND	A,2
	JR	Z,L_146
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_146
;  719			{
;  720				player1X -= player1MoveSpeed;
	LD	HL,(_player1X)
	LD	BC,(_player1MoveSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1X),HL
;  721				if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_128
;  722				{
;  723					player1Flipped = 1;
	LD	BC,1
	LD	(_player1Flipped),BC
;  724					player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  725					player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
;  726				}
L_128:
;  727				player1MoveAnimationCount++;
	LD	BC,(_player1MoveAnimationCount)
	INC	BC
	LD	(_player1MoveAnimationCount),BC
;  728				if(player1MoveAnimationCount == 3)
	LD	HL,(_player1MoveAnimationCount)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_146
;  729				{
;  730					if(player1MoveAnimation != 3)
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_131
;  731					{
;  732						player1MoveAnimation++;
	LD	BC,(_player1MoveAnimation)
	INC	BC
	LD	(_player1MoveAnimation),BC
;  733					}
;  734					else
	JR	L_132
L_131:
;  735					{
;  736						player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  737					}
L_132:
;  738					player1MoveAnimationCount = 0;
	LD	BC,0
	LD	(_player1MoveAnimationCount),BC
;  739				}
;  740			}
L_146:
;  741			if(key & kb_Right && player1ShieldActive == 0)
	LD	A,(_key)
	AND	A,4
	JR	Z,L_204
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_204
;  742			{
;  743				player1X += player1MoveSpeed;
	LD	BC,(_player1MoveSpeed)
	LD	HL,(_player1X)
	ADD	HL,BC
	LD	(_player1X),HL
;  744				if(player1Flipped == 1)
	LD	HL,(_player1Flipped)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_139
;  745				{
;  746					player1Flipped = 0;
	LD	BC,0
	LD	(_player1Flipped),BC
;  747					player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
;  748					player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
;  749				}
L_139:
;  750				player1MoveAnimationCount++;
	LD	BC,(_player1MoveAnimationCount)
	INC	BC
	LD	(_player1MoveAnimationCount),BC
;  751				if(player1MoveAnimationCount == 3)
	LD	HL,(_player1MoveAnimationCount)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_204
;  752				{
;  753					if(player1MoveAnimation != 3)
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_142
;  754					{
;  755						player1MoveAnimation++;
	LD	BC,(_player1MoveAnimation)
	INC	BC
	LD	(_player1MoveAnimation),BC
;  756					}
;  757					else
	JR	L_143
L_142:
;  758					{
;  759						player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  760					}
L_143:
;  761					player1MoveAnimationCount = 0;
	LD	BC,0
	LD	(_player1MoveAnimationCount),BC
;  762				}
;  763			}
L_204:
;  764			
;  765			//fight - check for grounded and death
;  766			for(player = 1; player < 3; ++player)
	LD	BC,1
	LD	(_player),BC
	JR	L_203
L_201:
;  767			{
;  768				switch(player)
	LD	HL,(_player)
	CALL	__case8
L__70:
	DW	2
	DB	1
	DW24	L_147	

	DB	2
	DW24	L_148	

	DW24	L_149	

;  769				{
;  770					case 1:
L_147:
;  771						playerX = player1X;
	LD	BC,(_player1X)
	LD	(_playerX),BC
;  772						playerY = player1Y;
	LD	BC,(_player1Y)
	LD	(_playerY),BC
;  773						break;
	JR	L_149
;  774					case 2:
L_148:
;  775						playerX = player2X;
	LD	BC,(_player2X)
	LD	(_playerX),BC
;  776						playerY = player2Y;
	LD	BC,(_player2Y)
	LD	(_playerY),BC
;  777						break;
;  778				}
L_149:
;  779				
;  780				playerGrounded = 0;
	LD	BC,0
	LD	(_playerGrounded),BC
;  781				playerDeath = 0;
	LD	(_playerDeath),BC
;  782				
;  783				if(map == 0)
	LD	HL,(_map)
	CALL	__icmpzero
	JR	NZ,L_186
;  784				{
;  785					if(playerX >= 24 && playerX <= 264 && playerY == 132)
	LD	BC,24
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	JP	M,L_166
	LD	BC,(_playerX)
	LD	HL,264
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_166
	LD	BC,132
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_166
;  786					{
;  787						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  788					}
;  789					else if(playerX >= 72 && playerX <= 216 && playerY == 64)
	JR	L_189
L_166:
	LD	BC,72
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_164
	LD	BC,(_playerX)
	LD	HL,216
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_164
	LD	BC,64
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_164
;  790					{
;  791						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  792					}
;  793					else if(playerX >= -8 && playerX <= 40 && playerY == 40)
	JR	L_189
L_164:
	LD	BC,16777208
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_162
	LD	BC,(_playerX)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_162
	LD	BC,40
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_162
;  794					{
;  795						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  796					}
;  797					else if(playerX >= 248 && playerX <= 296 && playerY == 40)
	JR	L_189
L_162:
	LD	BC,248
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_160
	LD	BC,(_playerX)
	LD	HL,296
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_160
	LD	BC,40
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_160
;  798					{
;  799						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  800					}
;  801					else if(playerY >= 240)
	JR	L_189
L_160:
	LD	BC,240
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_189
;  802					{
;  803						playerDeath = 1;
	LD	BC,1
	LD	(_playerDeath),BC
;  804					}
;  805				}
;  806				else if(map == 1)
	JR	L_189
L_186:
	LD	BC,1
	LD	HL,(_map)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_189
;  807				{
;  808					if(playerX >= -8 && playerX <= 56 && playerY == 96)
	LD	BC,16777208
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_183
	LD	BC,(_playerX)
	LD	HL,56
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_183
	LD	BC,96
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_183
;  809					{
;  810						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  811					}
;  812					else if(playerX >= 232 && playerX <= 296 && playerY == 96)
	JR	L_189
L_183:
	LD	BC,232
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_181
	LD	BC,(_playerX)
	LD	HL,296
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_181
	LD	BC,96
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_181
;  813					{
;  814						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  815					}
;  816					else if(playerX >= 88 && playerX <= 200 && playerY == 80)
	JR	L_189
L_181:
	LD	BC,88
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_179
	LD	BC,(_playerX)
	LD	HL,200
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_179
	LD	BC,80
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_179
;  817					{
;  818						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  819					}
;  820					else if(playerX >= 104 && playerX <= 184 && playerY == 16)
	JR	L_189
L_179:
	LD	BC,104
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_177
	LD	BC,(_playerX)
	LD	HL,184
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_177
	LD	BC,16
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_177
;  821					{
;  822						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  823					}
;  824					else if(playerY > 160)
	JR	L_189
L_177:
	LD	BC,(_playerY)
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_189
;  825					{
;  826						playerDeath = 1;
	LD	BC,1
	LD	(_playerDeath),BC
;  827					}
;  828				}
L_189:
;  829				
;  830				switch(player)
	LD	HL,(_player)
	CALL	__case8
L__99:
	DW	2
	DB	1
	DW24	L_187	

	DB	2
	DW24	L_188	

	DW24	L_200	

;  831				{
;  832					case 1:
L_187:
;  833						player1Grounded = playerGrounded;
	LD	BC,(_playerGrounded)
	LD	(_player1Grounded),BC
;  834						break;
	JR	L_200
;  835					case 2:
L_188:
;  836						player2Grounded = playerGrounded;
	LD	BC,(_playerGrounded)
	LD	(_player2Grounded),BC
;  837						break;
;  838				}
L_200:
;  839				
;  840				if(playerDeath == 1)
	LD	BC,1
	LD	HL,(_playerDeath)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_202
;  841				{
;  842					switch(player)
	LD	HL,(_player)
	CALL	__case8
L__101:
	DW	2
	DB	1
	DW24	L_190	

	DB	2
	DW24	L_195	

	DW24	L_202	

;  843					{
;  844						case 1:
L_190:
;  845							player1Lifes--;
	LD	BC,(_player1Lifes)
	DEC	BC
	LD	(_player1Lifes),BC
;  846							if(player1Lifes <= 0)
	OR	A,A
	OR	A,A
	SBC	HL,HL
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_192
;  847							{
;  848								goto gameOver;
;  849							}
;  850							player1X = player1SpawnX;
	LD	BC,(_player1SpawnX)
	LD	(_player1X),BC
;  851							player1Y = player1SpawnY;
	LD	BC,(_player1SpawnY)
	LD	(_player1Y),BC
;  852							player1Flipped = 0;
	LD	BC,0
	LD	(_player1Flipped),BC
;  853							player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
;  854							player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
;  855							player1ShieldActive = 0;
	LD	(_player1ShieldActive),BC
;  856							player1Grounded = 1;
	LD	BC,1
	LD	(_player1Grounded),BC
;  857							break;
	JR	L_202
;  858						case 2:
L_195:
;  859							player2Lifes--;
	LD	BC,(_player2Lifes)
	DEC	BC
	LD	(_player2Lifes),BC
;  860							if(player2Lifes <= 0)
	OR	A,A
	OR	A,A
	SBC	HL,HL
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_192
;  861							{
;  862								goto gameOver;
;  863							}
;  864							player2X = player2SpawnX;
	LD	BC,(_player2SpawnX)
	LD	(_player2X),BC
;  865							player2Y = player2SpawnY;
	LD	BC,(_player2SpawnY)
	LD	(_player2Y),BC
;  866							player2Flipped = 1;
	LD	BC,1
	LD	(_player2Flipped),BC
;  867							player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
;  868							player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
;  869							player2ShieldActive = 0;
	LD	(_player2ShieldActive),BC
;  870							player2Grounded = 1;
	LD	BC,1
	LD	(_player2Grounded),BC
;  871							break;
;  872					}
;  873				}
;  874			}
L_202:
	LD	BC,(_player)
	INC	BC
	LD	(_player),BC
L_203:
	LD	BC,3
	LD	HL,(_player)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_201
;  875			
;  876			//fight - player 1 always grounded in test mode
;  877			if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_211
;  878			{
;  879				player1Grounded = 1;
	LD	(_player1Grounded),BC
;  880			}
L_211:
;  881			
;  882			//fight - calculate jumps (player 1)
;  883			if(player1Jumping > 0)
	LD	BC,(_player1Jumping)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_210
;  884			{
;  885				player1Jumping--;
	LD	BC,(_player1Jumping)
	DEC	BC
	LD	(_player1Jumping),BC
;  886				player1Y -= player1JumpSpeed;
	LD	HL,(_player1Y)
	LD	BC,(_player1JumpSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Y),HL
;  887			}
;  888			else if(player1Grounded == 0)
	JR	L_216
L_210:
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_216
;  889			{
;  890				player1Y += player1FallSpeed;
	LD	BC,(_player1FallSpeed)
	LD	HL,(_player1Y)
	ADD	HL,BC
	LD	(_player1Y),HL
;  891			}
L_216:
;  892			
;  893			//fight - calculate jumps (player 2)
;  894			if(player2Jumping > 0)
	LD	BC,(_player2Jumping)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_215
;  895			{
;  896				player2Jumping--;
	LD	BC,(_player2Jumping)
	DEC	BC
	LD	(_player2Jumping),BC
;  897				player2Y -= player2JumpSpeed;
	LD	HL,(_player2Y)
	LD	BC,(_player2JumpSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Y),HL
;  898			}
;  899			else if(player2Grounded == 0)
	JR	L_222
L_215:
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_222
;  900			{
;  901				player2Y += player2FallSpeed;
	LD	BC,(_player2FallSpeed)
	LD	HL,(_player2Y)
	ADD	HL,BC
	LD	(_player2Y),HL
;  902			}
L_222:
;  903			
;  904			//fight - calculate knockback (player 1)
;  905			if(player1XKnockback < 0)
	LD	HL,(_player1XKnockback)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_221
;  906			{
;  907				player1XKnockback++;
	LD	BC,(_player1XKnockback)
	INC	BC
	LD	(_player1XKnockback),BC
;  908				player1X -= player2WeaponKnockbackStrength;
	LD	HL,(_player1X)
	LD	BC,(_player2WeaponKnockbackStrength)
	OR	A,A
	SBC	HL,BC
	LD	(_player1X),HL
;  909			}
;  910			else if(player1XKnockback > 0)
	JR	L_228
L_221:
	LD	BC,(_player1XKnockback)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_228
;  911			{
;  912				player1XKnockback--;
	LD	BC,(_player1XKnockback)
	DEC	BC
	LD	(_player1XKnockback),BC
;  913				player1X += player2WeaponKnockbackStrength;
	LD	BC,(_player2WeaponKnockbackStrength)
	LD	HL,(_player1X)
	ADD	HL,BC
	LD	(_player1X),HL
;  914			}
L_228:
;  915			
;  916			//fight - calculate knockback (player 2)
;  917			if(player2XKnockback < 0)
	LD	HL,(_player2XKnockback)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_227
;  918			{
;  919				player2XKnockback++;
	LD	BC,(_player2XKnockback)
	INC	BC
	LD	(_player2XKnockback),BC
;  920				player2X -= player1WeaponKnockbackStrength;
	LD	HL,(_player2X)
	LD	BC,(_player1WeaponKnockbackStrength)
	OR	A,A
	SBC	HL,BC
	LD	(_player2X),HL
;  921			}
;  922			else if(player2XKnockback > 0)
	JR	L_235
L_227:
	LD	BC,(_player2XKnockback)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_235
;  923			{
;  924				player2XKnockback--;
	LD	BC,(_player2XKnockback)
	DEC	BC
	LD	(_player2XKnockback),BC
;  925				player2X += player1WeaponKnockbackStrength;
	LD	BC,(_player1WeaponKnockbackStrength)
	LD	HL,(_player2X)
	ADD	HL,BC
	LD	(_player2X),HL
;  926			}
L_235:
;  927			
;  928			//fight - calculate weapons (player 1)
;  929			if(player1Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_242
;  930			{
;  931				if(player1Weapon1Flipped == 0)
	LD	HL,(_player1Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_230
;  932				{
;  933					player1Weapon1X += player1WeaponSpeed;
	LD	BC,(_player1WeaponSpeed)
	LD	HL,(_player1Weapon1X)
	ADD	HL,BC
	LD	(_player1Weapon1X),HL
;  934				}
;  935				else
	JR	L_233
L_230:
;  936				{
;  937					player1Weapon1X -= player1WeaponSpeed;
	LD	HL,(_player1Weapon1X)
	LD	BC,(_player1WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Weapon1X),HL
;  938				}
L_233:
;  939				
;  940				if(player1Weapon1X <= -8 || player1Weapon1X >= 320)
	LD	BC,(_player1Weapon1X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_232
	LD	BC,320
	LD	HL,(_player1Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_242
L_232:
;  941				{
;  942					player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
;  943				}
;  944			}
L_242:
;  945			if(player1Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_249
;  946			{
;  947				if(player1Weapon2Flipped == 0)
	LD	HL,(_player1Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_237
;  948				{
;  949					player1Weapon2X += player1WeaponSpeed;
	LD	BC,(_player1WeaponSpeed)
	LD	HL,(_player1Weapon2X)
	ADD	HL,BC
	LD	(_player1Weapon2X),HL
;  950				}
;  951				else
	JR	L_240
L_237:
;  952				{
;  953					player1Weapon2X -= player1WeaponSpeed;
	LD	HL,(_player1Weapon2X)
	LD	BC,(_player1WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Weapon2X),HL
;  954				}
L_240:
;  955				
;  956				if(player1Weapon2X <= -8 || player1Weapon2X >= 320)
	LD	BC,(_player1Weapon2X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_239
	LD	BC,320
	LD	HL,(_player1Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_249
L_239:
;  957				{
;  958					player1Weapon2 = 0;
	LD	BC,0
	LD	(_player1Weapon2),BC
;  959				}
;  960			}
L_249:
;  961			if(player1Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_256
;  962			{
;  963				if(player1Weapon3Flipped == 0)
	LD	HL,(_player1Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_244
;  964				{
;  965					player1Weapon3X += player1WeaponSpeed;
	LD	BC,(_player1WeaponSpeed)
	LD	HL,(_player1Weapon3X)
	ADD	HL,BC
	LD	(_player1Weapon3X),HL
;  966				}
;  967				else
	JR	L_247
L_244:
;  968				{
;  969					player1Weapon3X -= player1WeaponSpeed;
	LD	HL,(_player1Weapon3X)
	LD	BC,(_player1WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Weapon3X),HL
;  970				}
L_247:
;  971				
;  972				if(player1Weapon3X <= -8 || player1Weapon3X >= 320)
	LD	BC,(_player1Weapon3X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_246
	LD	BC,320
	LD	HL,(_player1Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_256
L_246:
;  973				{
;  974					player1Weapon3 = 0;
	LD	BC,0
	LD	(_player1Weapon3),BC
;  975				}
;  976			}
L_256:
;  977			
;  978			//fight - calculate weapons (player 2)
;  979			if(player2Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_263
;  980			{
;  981				if(player2Weapon1Flipped == 0)
	LD	HL,(_player2Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_251
;  982				{
;  983					player2Weapon1X += player2WeaponSpeed;
	LD	BC,(_player2WeaponSpeed)
	LD	HL,(_player2Weapon1X)
	ADD	HL,BC
	LD	(_player2Weapon1X),HL
;  984				}
;  985				else
	JR	L_254
L_251:
;  986				{
;  987					player2Weapon1X -= player2WeaponSpeed;
	LD	HL,(_player2Weapon1X)
	LD	BC,(_player2WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Weapon1X),HL
;  988				}
L_254:
;  989				
;  990				if(player2Weapon1X <= -8 || player2Weapon1X >= 320)
	LD	BC,(_player2Weapon1X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_253
	LD	BC,320
	LD	HL,(_player2Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_263
L_253:
;  991				{
;  992					player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
;  993				}
;  994			}
L_263:
;  995			if(player2Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_270
;  996			{
;  997				if(player2Weapon2Flipped == 0)
	LD	HL,(_player2Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_258
;  998				{
;  999					player2Weapon2X += player2WeaponSpeed;
	LD	BC,(_player2WeaponSpeed)
	LD	HL,(_player2Weapon2X)
	ADD	HL,BC
	LD	(_player2Weapon2X),HL
; 1000				}
; 1001				else
	JR	L_261
L_258:
; 1002				{
; 1003					player2Weapon2X -= player2WeaponSpeed;
	LD	HL,(_player2Weapon2X)
	LD	BC,(_player2WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Weapon2X),HL
; 1004				}
L_261:
; 1005				
; 1006				if(player2Weapon2X <= -8 || player2Weapon2X >= 320)
	LD	BC,(_player2Weapon2X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_260
	LD	BC,320
	LD	HL,(_player2Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_270
L_260:
; 1007				{
; 1008					player2Weapon2 = 0;
	LD	BC,0
	LD	(_player2Weapon2),BC
; 1009				}
; 1010			}
L_270:
; 1011			if(player2Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_300
; 1012			{
; 1013				if(player2Weapon3Flipped == 0)
	LD	HL,(_player2Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_265
; 1014				{
; 1015					player2Weapon3X += player2WeaponSpeed;
	LD	BC,(_player2WeaponSpeed)
	LD	HL,(_player2Weapon3X)
	ADD	HL,BC
	LD	(_player2Weapon3X),HL
; 1016				}
; 1017				else
	JR	L_268
L_265:
; 1018				{
; 1019					player2Weapon3X -= player2WeaponSpeed;
	LD	HL,(_player2Weapon3X)
	LD	BC,(_player2WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Weapon3X),HL
; 1020				}
L_268:
; 1021				
; 1022				if(player2Weapon3X <= -8 || player2Weapon3X >= 320)
	LD	BC,(_player2Weapon3X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_267
	LD	BC,320
	LD	HL,(_player2Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_300
L_267:
; 1023				{
; 1024					player2Weapon3 = 0;
	LD	BC,0
	LD	(_player2Weapon3),BC
; 1025				}
; 1026			}
L_300:
; 1027			
; 1028			//fight - draw character (player 1)
; 1029			if(player1Flipped == 0 && player1Grounded == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	Z,L__139
	LD	A,1
	JR	L__140
L__139:
	XOR	A,A
L__140:
	LD	(IX+-1),A
	OR	A,A
	JR	NZ,L_299
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_299
; 1030			{
; 1031				gfx_TransparentSprite(player1CharacterJumping, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterJumping)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1032				player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
; 1033				player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
; 1034			}
; 1035			else if(player1Flipped == 1 && player1Grounded == 0)
	JR	L_302
L_299:
	LD	BC,1
	LD	HL,(_player1Flipped)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__144
	LD	A,1
	JR	L__145
L__144:
	XOR	A,A
L__145:
	LD	(IX+-2),A
	OR	A,A
	JR	NZ,L_297
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_297
; 1036			{
; 1037				gfx_TransparentSprite(player1CharacterJumpingFlipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterJumpingFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1038				player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
; 1039				player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
; 1040			}
; 1041			else if(player1Flipped == 0 && player1MoveAnimation == 0)
	JR	L_302
L_297:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_295
	LD	HL,(_player1MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_295
; 1042			{
; 1043				gfx_TransparentSprite(player1Character, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1Character)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1044			}
; 1045			else if(player1Flipped == 1 && player1MoveAnimation == 0)
	JR	L_302
L_295:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_293
	LD	HL,(_player1MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_293
; 1046			{
; 1047				gfx_TransparentSprite(player1CharacterFlipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1048			}
; 1049			else if(player1Flipped == 0 && player1MoveAnimation == 1)
	JR	L_302
L_293:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_291
	LD	BC,1
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_291
; 1050			{
; 1051				gfx_TransparentSprite(player1CharacterMoving1, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1052			}
; 1053			else if(player1Flipped == 1 && player1MoveAnimation == 1)
	JR	L_302
L_291:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_289
	LD	BC,1
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_289
; 1054			{
; 1055				gfx_TransparentSprite(player1CharacterMoving1Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1056			}
; 1057			else if(player1Flipped == 0 && player1MoveAnimation == 2)
	JR	L_302
L_289:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_287
	LD	BC,2
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_287
; 1058			{
; 1059				gfx_TransparentSprite(player1CharacterMoving2, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving2)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1060			}
; 1061			else if(player1Flipped == 1 && player1MoveAnimation == 2)
	JR	L_302
L_287:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_285
	LD	BC,2
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_285
; 1062			{
; 1063				gfx_TransparentSprite(player1CharacterMoving2Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1064			}
; 1065			else if(player1Flipped == 0 && player1MoveAnimation == 3)
	JR	L_302
L_285:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_283
	LD	BC,3
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_283
; 1066			{
; 1067				gfx_TransparentSprite(player1CharacterMoving1, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1068			}
; 1069			else if(player1Flipped == 1 && player1MoveAnimation == 3)
	JR	L_302
L_283:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_302
	LD	BC,3
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_302
; 1070			{
; 1071				gfx_TransparentSprite(player1CharacterMoving1Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1072			}
L_302:
; 1073			
; 1074			//fight - draw shield (player 1)
; 1075			if(player1ShieldActive == 1)
	LD	BC,1
	LD	HL,(_player1ShieldActive)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_332
; 1076			{
; 1077				gfx_TransparentSprite(shield, player1X - 12, player1Y - 4);
	LD	IY,(_player1Y)
	LEA	BC,IY+-4
	PUSH	BC
	LD	IY,(_player1X)
	LEA	BC,IY+-12
	PUSH	BC
	LD	BC,_shield_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1078			}
L_332:
; 1079			
; 1080			//fight - draw character (player 2)
; 1081			if(player2Flipped == 0 && player2Grounded == 0)
	LD	HL,(_player2Flipped)
	CALL	__icmpzero
	JR	Z,L__166
	LD	A,1
	JR	L__167
L__166:
	XOR	A,A
L__167:
	LD	(IX+-3),A
	OR	A,A
	JR	NZ,L_331
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_331
; 1082			{
; 1083				gfx_TransparentSprite(player2CharacterJumping, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterJumping)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1084				player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
; 1085				player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
; 1086			}
; 1087			else if(player2Flipped == 1 && player2Grounded == 0)
	JR	L_334
L_331:
	LD	BC,1
	LD	HL,(_player2Flipped)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__171
	LD	A,1
	JR	L__172
L__171:
	XOR	A,A
L__172:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_329
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_329
; 1088			{
; 1089				gfx_TransparentSprite(player2CharacterJumpingFlipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterJumpingFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1090				player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
; 1091				player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
; 1092			}
; 1093			else if(player2Flipped == 0 && player2MoveAnimation == 0)
	JR	L_334
L_329:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_327
	LD	HL,(_player2MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_327
; 1094			{
; 1095				gfx_TransparentSprite(player2Character, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2Character)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1096			}
; 1097			else if(player2Flipped == 1 && player2MoveAnimation == 0)
	JR	L_334
L_327:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_325
	LD	HL,(_player2MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_325
; 1098			{
; 1099				gfx_TransparentSprite(player2CharacterFlipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1100			}
; 1101			else if(player2Flipped == 0 && player2MoveAnimation == 1)
	JR	L_334
L_325:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_323
	LD	BC,1
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_323
; 1102			{
; 1103				gfx_TransparentSprite(player2CharacterMoving1, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1104			}
; 1105			else if(player2Flipped == 1 && player2MoveAnimation == 1)
	JR	L_334
L_323:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_321
	LD	BC,1
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_321
; 1106			{
; 1107				gfx_TransparentSprite(player2CharacterMoving1Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1108			}
; 1109			else if(player2Flipped == 0 && player2MoveAnimation == 2)
	JR	L_334
L_321:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_319
	LD	BC,2
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_319
; 1110			{
; 1111				gfx_TransparentSprite(player2CharacterMoving2, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving2)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1112			}
; 1113			else if(player2Flipped == 1 && player2MoveAnimation == 2)
	JR	L_334
L_319:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_317
	LD	BC,2
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_317
; 1114			{
; 1115				gfx_TransparentSprite(player2CharacterMoving2Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1116			}
; 1117			else if(player2Flipped == 0 && player2MoveAnimation == 3)
	JR	L_334
L_317:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_315
	LD	BC,3
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_315
; 1118			{
; 1119				gfx_TransparentSprite(player2CharacterMoving1, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1120			}
; 1121			else if(player2Flipped == 1 && player2MoveAnimation == 3)
	JR	L_334
L_315:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_334
	LD	BC,3
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_334
; 1122			{
; 1123				gfx_TransparentSprite(player2CharacterMoving1Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1124			}
L_334:
; 1125			
; 1126			//fight - draw shield (player 2)
; 1127			if(player2ShieldActive == 1)
	LD	BC,1
	LD	HL,(_player2ShieldActive)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_336
; 1128			{
; 1129				gfx_TransparentSprite(shield, player2X - 12, player2Y - 4);
	LD	IY,(_player2Y)
	LEA	BC,IY+-4
	PUSH	BC
	LD	IY,(_player2X)
	LEA	BC,IY+-12
	PUSH	BC
	LD	BC,_shield_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1130			}
L_336:
; 1131			
; 1132			//fight - draw weapons (player 1)
; 1133			if(player1Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_338
; 1134			{
; 1135				gfx_TransparentSprite(player1Weapon, player1Weapon1X, player1Weapon1Y);
	LD	BC,(_player1Weapon1Y)
	PUSH	BC
	LD	BC,(_player1Weapon1X)
	PUSH	BC
	LD	BC,(_player1Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1136			}
L_338:
; 1137			if(player1Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_340
; 1138			{
; 1139				gfx_TransparentSprite(player1Weapon, player1Weapon2X, player1Weapon2Y);
	LD	BC,(_player1Weapon2Y)
	PUSH	BC
	LD	BC,(_player1Weapon2X)
	PUSH	BC
	LD	BC,(_player1Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1140			}
L_340:
; 1141			if(player1Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_342
; 1142			{
; 1143				gfx_TransparentSprite(player1Weapon, player1Weapon3X, player1Weapon3Y);
	LD	BC,(_player1Weapon3Y)
	PUSH	BC
	LD	BC,(_player1Weapon3X)
	PUSH	BC
	LD	BC,(_player1Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1144			}
L_342:
; 1145			
; 1146			//fight - draw weapons (player 2)
; 1147			if(player2Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_344
; 1148			{
; 1149				gfx_TransparentSprite(player2Weapon, player2Weapon1X, player2Weapon1Y);
	LD	BC,(_player2Weapon1Y)
	PUSH	BC
	LD	BC,(_player2Weapon1X)
	PUSH	BC
	LD	BC,(_player2Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1150			}
L_344:
; 1151			if(player2Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_346
; 1152			{
; 1153				gfx_TransparentSprite(player2Weapon, player2Weapon2X, player2Weapon2Y);
	LD	BC,(_player2Weapon2Y)
	PUSH	BC
	LD	BC,(_player2Weapon2X)
	PUSH	BC
	LD	BC,(_player2Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1154			}
L_346:
; 1155			if(player2Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_361
; 1156			{
; 1157				gfx_TransparentSprite(player2Weapon, player2Weapon3X, player2Weapon3Y);
	LD	BC,(_player2Weapon3Y)
	PUSH	BC
	LD	BC,(_player2Weapon3X)
	PUSH	BC
	LD	BC,(_player2Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1158			}
L_361:
; 1159			
; 1160			//fight - check for weapon hits (player 1)
; 1161			if(player1Weapon1 == 1 && player1Weapon1Y + 8 >= player2Y && player1Weapon1Y <= player2Y + 48)
	LD	BC,1
	LD	HL,(_player1Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_376
	LD	IY,(_player1Weapon1Y)
	LEA	HL,IY+8
	LD	BC,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JP	M,L_376
	LD	IY,(_player2Y)
	LEA	HL,IY+48
	LD	BC,(_player1Weapon1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_376
; 1162			{
; 1163				if(player1Weapon1Flipped == 0 && player1Weapon1X + 8 >= player2X && player1Weapon1X <= player2X + 32)
	LD	HL,(_player1Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_359
	LD	IY,(_player1Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_359
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_359
; 1164				{
; 1165					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_352
; 1166					{
; 1167						player2XKnockback += player1WeaponKnockback;
	LD	BC,(_player1WeaponKnockback)
	LD	HL,(_player2XKnockback)
	ADD	HL,BC
	LD	(_player2XKnockback),HL
; 1168					}
L_352:
; 1169					player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
; 1170				}
; 1171				else if(player1Weapon1Flipped == 1 && player1Weapon1X <= player2X + 32 && player1Weapon1X + 8 >= player2X)
	JR	L_376
L_359:
	LD	BC,1
	LD	HL,(_player1Weapon1Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_376
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_376
	LD	IY,(_player1Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_376
; 1172				{
; 1173					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_356
; 1174					{
; 1175						player2XKnockback -= player1WeaponKnockback;
	LD	HL,(_player2XKnockback)
	LD	BC,(_player1WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player2XKnockback),HL
; 1176					}
L_356:
; 1177					player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
; 1178				}
; 1179			}
L_376:
; 1180			if(player1Weapon2 == 1 && player1Weapon2Y + 8 >= player2Y && player1Weapon2Y <= player2Y + 48)
	LD	BC,1
	LD	HL,(_player1Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_391
	LD	IY,(_player1Weapon2Y)
	LEA	HL,IY+8
	LD	BC,(_player2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_391
	LD	IY,(_player2Y)
	LEA	HL,IY+48
	LD	BC,(_player1Weapon2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_391
; 1181			{
; 1182				if(player1Weapon2Flipped == 0 && player1Weapon2X + 8 >= player2X && player1Weapon2X <= player2X + 32)
	LD	HL,(_player1Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_374
	LD	IY,(_player1Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_374
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_374
; 1183				{
; 1184					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_367
; 1185					{
; 1186						player2XKnockback += player1WeaponKnockback;
	LD	BC,(_player1WeaponKnockback)
	LD	HL,(_player2XKnockback)
	ADD	HL,BC
	LD	(_player2XKnockback),HL
; 1187					}
L_367:
; 1188					player1Weapon2 = 0;
	LD	BC,0
	LD	(_player1Weapon2),BC
; 1189				}
; 1190				else if(player1Weapon2Flipped == 1 && player1Weapon2X <= player2X + 32 && player1Weapon2X + 8 >= player2X)
	JR	L_391
L_374:
	LD	BC,1
	LD	HL,(_player1Weapon2Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_391
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_391
	LD	IY,(_player1Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_391
; 1191				{
; 1192					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_371
; 1193					{
; 1194						player2XKnockback -= player1WeaponKnockback;
	LD	HL,(_player2XKnockback)
	LD	BC,(_player1WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player2XKnockback),HL
; 1195					}
L_371:
; 1196					player1Weapon2 = 0;
	LD	BC,0
	LD	(_player1Weapon2),BC
; 1197				}
; 1198			}
L_391:
; 1199			if(player1Weapon3 == 1 && player1Weapon3Y + 8 >= player2Y && player1Weapon3Y <= player2Y + 48)
	LD	BC,1
	LD	HL,(_player1Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_406
	LD	IY,(_player1Weapon3Y)
	LEA	HL,IY+8
	LD	BC,(_player2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_406
	LD	IY,(_player2Y)
	LEA	HL,IY+48
	LD	BC,(_player1Weapon3Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_406
; 1200			{
; 1201				if(player1Weapon3Flipped == 0 && player1Weapon3X + 8 >= player2X && player1Weapon3X <= player2X + 32)
	LD	HL,(_player1Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_389
	LD	IY,(_player1Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_389
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_389
; 1202				{
; 1203					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_382
; 1204					{
; 1205						player2XKnockback += player1WeaponKnockback;
	LD	BC,(_player1WeaponKnockback)
	LD	HL,(_player2XKnockback)
	ADD	HL,BC
	LD	(_player2XKnockback),HL
; 1206					}
L_382:
; 1207					player1Weapon3 = 0;
	LD	BC,0
	LD	(_player1Weapon3),BC
; 1208				}
; 1209				else if(player1Weapon3Flipped == 1 && player1Weapon3X <= player2X + 32 && player1Weapon3X + 8 >= player2X)
	JR	L_406
L_389:
	LD	BC,1
	LD	HL,(_player1Weapon3Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_406
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_406
	LD	IY,(_player1Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_406
; 1210				{
; 1211					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_386
; 1212					{
; 1213						player2XKnockback -= player1WeaponKnockback;
	LD	HL,(_player2XKnockback)
	LD	BC,(_player1WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player2XKnockback),HL
; 1214					}
L_386:
; 1215					player1Weapon3 = 0;
	LD	BC,0
	LD	(_player1Weapon3),BC
; 1216				}
; 1217			}
L_406:
; 1218			
; 1219			//fight - check for weapon hits (player 2)
; 1220			if(player2Weapon1 == 1 && player2Weapon1Y + 8 >= player1Y && player2Weapon1Y <= player1Y + 48)
	LD	BC,1
	LD	HL,(_player2Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_421
	LD	IY,(_player2Weapon1Y)
	LEA	HL,IY+8
	LD	BC,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_421
	LD	IY,(_player1Y)
	LEA	HL,IY+48
	LD	BC,(_player2Weapon1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_421
; 1221			{
; 1222				if(player2Weapon1Flipped == 0 && player2Weapon1X + 8 >= player1X && player2Weapon1X <= player1X + 32)
	LD	HL,(_player2Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_404
	LD	IY,(_player2Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_404
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_404
; 1223				{
; 1224					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_397
; 1225					{
; 1226						player1XKnockback += player2WeaponKnockback;
	LD	BC,(_player2WeaponKnockback)
	LD	HL,(_player1XKnockback)
	ADD	HL,BC
	LD	(_player1XKnockback),HL
; 1227					}
L_397:
; 1228					player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
; 1229				}
; 1230				else if(player2Weapon1Flipped == 1 && player2Weapon1X <= player1X + 32 && player2Weapon1X + 8 >= player1X)
	JR	L_421
L_404:
	LD	BC,1
	LD	HL,(_player2Weapon1Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_421
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_421
	LD	IY,(_player2Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_421
; 1231				{
; 1232					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_401
; 1233					{
; 1234						player1XKnockback -= player2WeaponKnockback;
	LD	HL,(_player1XKnockback)
	LD	BC,(_player2WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player1XKnockback),HL
; 1235					}
L_401:
; 1236					player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
; 1237				}
; 1238			}
L_421:
; 1239			if(player2Weapon2 == 1 && player2Weapon2Y + 8 >= player1Y && player2Weapon2Y <= player1Y + 48)
	LD	BC,1
	LD	HL,(_player2Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_436
	LD	IY,(_player2Weapon2Y)
	LEA	HL,IY+8
	LD	BC,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_436
	LD	IY,(_player1Y)
	LEA	HL,IY+48
	LD	BC,(_player2Weapon2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_436
; 1240			{
; 1241				if(player2Weapon2Flipped == 0 && player2Weapon2X + 8 >= player1X && player2Weapon2X <= player1X + 32)
	LD	HL,(_player2Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_419
	LD	IY,(_player2Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_419
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_419
; 1242				{
; 1243					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_412
; 1244					{
; 1245						player1XKnockback += player2WeaponKnockback;
	LD	BC,(_player2WeaponKnockback)
	LD	HL,(_player1XKnockback)
	ADD	HL,BC
	LD	(_player1XKnockback),HL
; 1246					}
L_412:
; 1247					player2Weapon2 = 0;
	LD	BC,0
	LD	(_player2Weapon2),BC
; 1248				}
; 1249				else if(player2Weapon2Flipped == 1 && player2Weapon2X <= player1X + 32 && player2Weapon2X + 8 >= player1X)
	JR	L_436
L_419:
	LD	BC,1
	LD	HL,(_player2Weapon2Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_436
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_436
	LD	IY,(_player2Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_436
; 1250				{
; 1251					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_416
; 1252					{
; 1253						player1XKnockback -= player2WeaponKnockback;
	LD	HL,(_player1XKnockback)
	LD	BC,(_player2WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player1XKnockback),HL
; 1254					}
L_416:
; 1255					player2Weapon2 = 0;
	LD	BC,0
	LD	(_player2Weapon2),BC
; 1256				}
; 1257			}
L_436:
; 1258			if(player2Weapon3 == 1 && player2Weapon3Y + 8 >= player1Y && player2Weapon3Y <= player1Y + 48)
	LD	BC,1
	LD	HL,(_player2Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_437
	LD	IY,(_player2Weapon3Y)
	LEA	HL,IY+8
	LD	BC,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_437
	LD	IY,(_player1Y)
	LEA	HL,IY+48
	LD	BC,(_player2Weapon3Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_437
; 1259			{
; 1260				if(player2Weapon3Flipped == 0 && player2Weapon3X + 8 >= player1X && player2Weapon3X <= player1X + 32)
	LD	HL,(_player2Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_434
	LD	IY,(_player2Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_434
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_434
; 1261				{
; 1262					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_427
; 1263					{
; 1264						player1XKnockback += player2WeaponKnockback;
	LD	BC,(_player2WeaponKnockback)
	LD	HL,(_player1XKnockback)
	ADD	HL,BC
	LD	(_player1XKnockback),HL
; 1265					}
L_427:
; 1266					player2Weapon3 = 0;
	LD	BC,0
	LD	(_player2Weapon3),BC
; 1267				}
; 1268				else if(player2Weapon3Flipped == 1 && player2Weapon3X <= player1X + 32 && player2Weapon3X + 8 >= player1X)
	JR	L_437
L_434:
	LD	BC,1
	LD	HL,(_player2Weapon3Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_437
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_437
	LD	IY,(_player2Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_437
; 1269				{
; 1270					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_431
; 1271					{
; 1272						player1XKnockback -= player2WeaponKnockback;
	LD	HL,(_player1XKnockback)
	LD	BC,(_player2WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player1XKnockback),HL
; 1273					}
L_431:
; 1274					player2Weapon3 = 0;
	LD	BC,0
	LD	(_player2Weapon3),BC
; 1275				}
; 1276			}
L_437:
; 1277			
; 1278			//fight - draw UI
; 1279			gfx_TransparentSprite(statusUi, 128, 208);
	LD	BC,208
	PUSH	BC
	LD	BC,128
	PUSH	BC
	LD	BC,_statusUi_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1280			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1281			gfx_SetTextXY(134, 216);
	LD	BC,216
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
; 1282			gfx_PrintInt(player1Lifes, 1);
	LD	BC,1
	PUSH	BC
	LD	BC,(_player1Lifes)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1283			gfx_SetTextXY(171, 216);
	LD	BC,216
	PUSH	BC
	LD	BC,171
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
; 1284			gfx_PrintInt(player2Lifes, 1);
	LD	BC,1
	PUSH	BC
	LD	BC,(_player2Lifes)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1285			
; 1286			//fight - draw player 1 position
; 1287			if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_439
; 1288			{
; 1289				gfx_SetTextXY(10, 10);
	LD	BC,10
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
; 1290				gfx_PrintInt(player1X, 3);
	LD	BC,3
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1291				gfx_PrintString(" ");
	LD	BC,L__265
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
; 1292				gfx_PrintInt(player1Y, 3);
	LD	BC,3
	PUSH	BC
	LD	BC,(_player1Y)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1293			}
L_439:
; 1294			
; 1295			//fight - swap draw
; 1296			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	JR	L_441
L_113:
; 1297		}
; 1298		
; 1299		//---------------------------------------------------------------
; 1300		
; 1301		//pause
; 1302		pause:
; 1303		
; 1304		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
; 1305		gfx_SetColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
; 1306		gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 1307		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
; 1308		gfx_SetTextBGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
; 1309		gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1310		gfx_PrintStringXY("Pause menu", 80, 90);
	LD	BC,90
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,L__266
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1311		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1312		gfx_PrintStringXY("Press [clear] to continue...", 55, 125);
	LD	BC,125
	PUSH	BC
	LD	BC,55
	PUSH	BC
	LD	BC,L__267
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1313		gfx_PrintStringXY("Press [del] to give up...", 62, 145);
	LD	BC,145
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,L__268
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1314		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
; 1315		
; 1316		while(1)
L_447:
; 1317		{
; 1318			key = os_GetCSC();
	CALL	_os_GetCSC
; 1319			if(key == sk_Clear)
	CP	A,15
	LD	(_key),A
	JR	Z,L_94
; 1320			{
; 1321				goto fight;
; 1322			}
; 1323			else if(key == sk_Del)
	LD	A,(_key)
	CP	A,56
	JR	NZ,L_447
L_192:
; 1324			{
; 1325				goto gameOver;
; 1326			}
; 1327		}
; 1328		
; 1329		//---------------------------------------------------------------
; 1330		
; 1331		//gameOver
; 1332		gameOver:
; 1333		
; 1334		gfx_Tilemap(&tilemap, getXBlock(4), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,4
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
; 1335		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
; 1336		gfx_SetTextBGColor(gfx_GetPixel(0, 0));
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
; 1337		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1338		gfx_PrintStringXY("Press [2nd] to go to the main menu...", 15, 218);
	LD	BC,218
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,L__271
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1339		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
; 1340		while(os_GetCSC() != sk_2nd);
L_450:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_450
; 1341		goto mainMenu;
	JR	L_5
L_32:
; 1342		
; 1343		
; 1344		//---------------------------------------------------------------
; 1345		
; 1346		//error
; 1347		error:
; 1348		
; 1349		gfx_FillScreen(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
; 1350		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
; 1351		gfx_SetTextBGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
; 1352		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1353		gfx_PrintStringXY("An error has occurred!", 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,L__273
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1354		gfx_PrintStringXY("Press [2nd] to go to the main menu...", 0, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,L__274
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1355		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
; 1356		while(os_GetCSC() != sk_2nd);
L_453:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_453
; 1357		goto mainMenu;
	JR	L_5
L_30:
; 1358		
; 1359		//---------------------------------------------------------------
; 1360		
; 1361		//quit game
; 1362		quitGame:
; 1363		
; 1364		gfx_End();
	CALL	_gfx_End
	OR	A,A
; 1365		return 0;
	SBC	HL,HL
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_gfx_PrintString                    IMPORT  -----   function
;_gfx_PrintInt                       IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_player2Weapon3Y                    STATIC      3   variable
;_player2Weapon2Y                    STATIC      3   variable
;_player2Weapon1Y                    STATIC      3   variable
;_shield_data                        IMPORT   3138   variable
;_player2Weapon3X                    STATIC      3   variable
;_player2Weapon3Flipped              STATIC      3   variable
;_player2Weapon3                     STATIC      3   variable
;_player2Weapon2X                    STATIC      3   variable
;_player2Weapon2Flipped              STATIC      3   variable
;_player2Weapon2                     STATIC      3   variable
;_player2Weapon1X                    STATIC      3   variable
;_player2Weapon1Flipped              STATIC      3   variable
;_player2Weapon1                     STATIC      3   variable
;_player2XKnockback                  STATIC      3   variable
;_player1XKnockback                  STATIC      3   variable
;_player2MoveAnimationCount          STATIC      3   variable
;_playerDeath                        STATIC      3   variable
;_playerGrounded                     STATIC      3   variable
;_playerY                            STATIC      3   variable
;_playerX                            STATIC      3   variable
;_player                             STATIC      3   variable
;_player1MoveAnimationCount          STATIC      3   variable
;_testMode                           STATIC      3   variable
;_kb_Scan                            IMPORT  -----   function
;_player1Weapon3Y                    STATIC      3   variable
;_player1Weapon3X                    STATIC      3   variable
;_player1Weapon3Flipped              STATIC      3   variable
;_player1Weapon3                     STATIC      3   variable
;_player1Weapon2Y                    STATIC      3   variable
;_player1Weapon2X                    STATIC      3   variable
;_player1Weapon2Flipped              STATIC      3   variable
;_player1Weapon2                     STATIC      3   variable
;_player1Weapon1Y                    STATIC      3   variable
;_player1Weapon1X                    STATIC      3   variable
;_player1Weapon1Flipped              STATIC      3   variable
;_player1Weapon1                     STATIC      3   variable
;_gfx_GetPixel                       IMPORT  -----   function
;_statusUi_data                      IMPORT   2050   variable
;_counterFight_data                  IMPORT   1538   variable
;_counter1_data                      IMPORT   1538   variable
;_counter2_data                      IMPORT   1538   variable
;_counter3_data                      IMPORT   1538   variable
;_player2WeaponKnockbackStrength      STATIC      3   variable
;_player2WeaponKnockback             STATIC      3   variable
;_player2WeaponSpeed                 STATIC      3   variable
;_player2JumpHeight                  STATIC      3   variable
;_player2JumpSpeed                   STATIC      3   variable
;_player2FallSpeed                   STATIC      3   variable
;_player2MoveSpeed                   STATIC      3   variable
;_player2CharacterSelection          STATIC      3   variable
;_character1Weapon_data              IMPORT     66   variable
;_character1Jumping_data             IMPORT   1538   variable
;_character1Moving2_data             IMPORT   1538   variable
;_character1Moving1_data             IMPORT   1538   variable
;_player1WeaponKnockbackStrength      STATIC      3   variable
;_player1WeaponKnockback             STATIC      3   variable
;_player1WeaponSpeed                 STATIC      3   variable
;_player1JumpHeight                  STATIC      3   variable
;_player1JumpSpeed                   STATIC      3   variable
;_player1FallSpeed                   STATIC      3   variable
;_player1MoveSpeed                   STATIC      3   variable
;_character0Weapon_data              IMPORT     66   variable
;_gfx_FlipSpriteY                    IMPORT  -----   function
;_character0Jumping_data             IMPORT   1538   variable
;_character0Moving2_data             IMPORT   1538   variable
;_character0Moving1_data             IMPORT   1538   variable
;_player2Y                           STATIC      3   variable
;_player2X                           STATIC      3   variable
;_player1Y                           STATIC      3   variable
;_player1X                           STATIC      3   variable
;_player2SpawnY                      STATIC      3   variable
;_player2SpawnX                      STATIC      3   variable
;_player1SpawnY                      STATIC      3   variable
;_player1SpawnX                      STATIC      3   variable
;_player2IsAi                        STATIC      3   variable
;_player2Lifes                       STATIC      3   variable
;_player2ShieldActive                STATIC      3   variable
;_player2Grounded                    STATIC      3   variable
;_player2Jumping                     STATIC      3   variable
;_player2MoveAnimation               STATIC      3   variable
;_player2Flipped                     STATIC      3   variable
;_player1Lifes                       STATIC      3   variable
;_player1ShieldActive                STATIC      3   variable
;_player1Grounded                    STATIC      3   variable
;_player1Jumping                     STATIC      3   variable
;_player1MoveAnimation               STATIC      3   variable
;_player1Flipped                     STATIC      3   variable
;_player1CharacterSelection          STATIC      3   variable
;_character0_data                    IMPORT   1538   variable
;_character1_data                    IMPORT   1538   variable
;_characterHighlighter_data          IMPORT   3074   variable
;_gfx_FillRectangle                  IMPORT  -----   function
;_mapYBlock                          STATIC      3   variable
;_mapXBlock                          STATIC      3   variable
;_map                                STATIC      3   variable
;_mapHighlighter_data                IMPORT   1026   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_players                            STATIC      3   variable
;_key                                STATIC      1   variable
;_selecting                          STATIC      3   variable
;_selection                          STATIC      3   variable
;_os_GetCSC                          IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_delay                              IMPORT  -----   function
;_character1WeaponKnockbackStrength      STATIC      3   variable
;_character1WeaponKnockback          STATIC      3   variable
;_character1WeaponSpeed              STATIC      3   variable
;_character1JumpHeight               STATIC      3   variable
;_character1JumpSpeed                STATIC      3   variable
;_character1FallSpeed                STATIC      3   variable
;_character1MoveSpeed                STATIC      3   variable
;_character0WeaponKnockbackStrength      STATIC      3   variable
;_character0WeaponKnockback          STATIC      3   variable
;_character0WeaponSpeed              STATIC      3   variable
;_character0JumpHeight               STATIC      3   variable
;_character0JumpSpeed                STATIC      3   variable
;_character0FallSpeed                STATIC      3   variable
;_character0MoveSpeed                STATIC      3   variable
;_gfx_SwapDraw                       IMPORT  -----   function
;_version                            STATIC      4   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_Tilemap                        IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetMonospaceFont               IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_global_palette                     IMPORT    264   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_tileset_tiles_data                 IMPORT    180   variable
;_tilemap                            STATIC     18   variable
;_tilemap_map                        IMPORT  unknown variable
;_player2WeaponFlipped               STATIC      3   variable
;_player2Weapon                      STATIC      3   variable
;_player2CharacterJumpingFlipped      STATIC      3   variable
;_player2CharacterMoving2Flipped      STATIC      3   variable
;_player2CharacterMoving1Flipped      STATIC      3   variable
;_player2CharacterFlipped            STATIC      3   variable
;_player2CharacterJumping            STATIC      3   variable
;_player2CharacterMoving2            STATIC      3   variable
;_player2CharacterMoving1            STATIC      3   variable
;_player2Character                   STATIC      3   variable
;_player1WeaponFlipped               STATIC      3   variable
;_player1Weapon                      STATIC      3   variable
;_player1CharacterJumpingFlipped      STATIC      3   variable
;_player1CharacterMoving2Flipped      STATIC      3   variable
;_player1CharacterMoving1Flipped      STATIC      3   variable
;_player1CharacterFlipped            STATIC      3   variable
;_player1CharacterJumping            STATIC      3   variable
;_player1CharacterMoving2            STATIC      3   variable
;_player1CharacterMoving1            STATIC      3   variable
;_player1Character                   STATIC      3   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;G_9                                   IX-4      1   variable
;G_8                                   IX-3      1   variable
;G_1                                   IX-2      1   variable
;G_0                                   IX-1      1   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__2:
	DB	"Press [2nd] to start..."
	DB	0
L__11:
	DB	"Singleplayer"
	DB	0
L__13:
	DB	"Quit game"
	DB	0
L__14:
	DB	"Star it on GitHub!"
	DB	0
L__17:
	DB	"Select a map:"
	DB	0
L__27:
	DB	"Select a character:"
	DB	0
L__265:
	DB	" "
	DB	0
L__266:
	DB	"Pause menu"
	DB	0
L__267:
	DB	"Press [clear] to continue..."
	DB	0
L__268:
	DB	"Press [del] to give up..."
	DB	0
L__271:
	DB	"Press [2nd] to go to the main menu..."
	DB	0
L__273:
	DB	"An error has occurred!"
	DB	0
L__274:
	DB	"Press [2nd] to go to the main menu..."
	DB	0
	XREF _tilemap_map:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_SetMonospaceFont:ROM
	XREF _gfx_FlipSpriteY:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintString:ROM
	XREF _gfx_PrintInt:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_GetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _statusUi_data:ROM
	XREF _shield_data:ROM
	XREF _mapHighlighter_data:ROM
	XREF _counterFight_data:ROM
	XREF _counter3_data:ROM
	XREF _counter2_data:ROM
	XREF _counter1_data:ROM
	XREF _characterHighlighter_data:ROM
	XREF _character1Weapon_data:ROM
	XREF _character1Moving2_data:ROM
	XREF _character1Moving1_data:ROM
	XREF _character1Jumping_data:ROM
	XREF _character1_data:ROM
	XREF _character0Weapon_data:ROM
	XREF _character0Moving2_data:ROM
	XREF _character0Moving1_data:ROM
	XREF _character0Jumping_data:ROM
	XREF _character0_data:ROM
	XREF _tileset_tiles_data:ROM
	XREF _global_palette:ROM
	XREF _os_GetCSC:ROM
	XREF _delay:ROM
	XREF _malloc:ROM
	XREF __imuls:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __imul_b:ROM
	XDEF _main
	XDEF _getYBlock
	XDEF _getXBlock
	XDEF _tilemap
	XDEF _player2WeaponFlipped
	XDEF _player2Weapon
	XDEF _player2CharacterJumpingFlipped
	XDEF _player2CharacterMoving2Flipped
	XDEF _player2CharacterMoving1Flipped
	XDEF _player2CharacterFlipped
	XDEF _player2CharacterJumping
	XDEF _player2CharacterMoving2
	XDEF _player2CharacterMoving1
	XDEF _player2Character
	XDEF _player1WeaponFlipped
	XDEF _player1Weapon
	XDEF _player1CharacterJumpingFlipped
	XDEF _player1CharacterMoving2Flipped
	XDEF _player1CharacterMoving1Flipped
	XDEF _player1CharacterFlipped
	XDEF _player1CharacterJumping
	XDEF _player1CharacterMoving2
	XDEF _player1CharacterMoving1
	XDEF _player1Character
	XDEF _key
	XDEF _player2Weapon3Flipped
	XDEF _player2Weapon3Y
	XDEF _player2Weapon3X
	XDEF _player2Weapon3
	XDEF _player2Weapon2Flipped
	XDEF _player2Weapon2Y
	XDEF _player2Weapon2X
	XDEF _player2Weapon2
	XDEF _player2Weapon1Flipped
	XDEF _player2Weapon1Y
	XDEF _player2Weapon1X
	XDEF _player2Weapon1
	XDEF _player2WeaponKnockbackStrength
	XDEF _player2WeaponKnockback
	XDEF _player2WeaponSpeed
	XDEF _player2Lifes
	XDEF _player2XKnockback
	XDEF _player2ShieldActive
	XDEF _player2Grounded
	XDEF _player2Jumping
	XDEF _player2MoveAnimationCount
	XDEF _player2MoveAnimation
	XDEF _player2JumpHeight
	XDEF _player2JumpSpeed
	XDEF _player2FallSpeed
	XDEF _player2MoveSpeed
	XDEF _player2Flipped
	XDEF _player2Y
	XDEF _player2X
	XDEF _player2CharacterSelection
	XDEF _player2IsAi
	XDEF _player1Weapon3Flipped
	XDEF _player1Weapon3Y
	XDEF _player1Weapon3X
	XDEF _player1Weapon3
	XDEF _player1Weapon2Flipped
	XDEF _player1Weapon2Y
	XDEF _player1Weapon2X
	XDEF _player1Weapon2
	XDEF _player1Weapon1Flipped
	XDEF _player1Weapon1Y
	XDEF _player1Weapon1X
	XDEF _player1Weapon1
	XDEF _player1WeaponKnockbackStrength
	XDEF _player1WeaponKnockback
	XDEF _player1WeaponSpeed
	XDEF _player1Lifes
	XDEF _player1XKnockback
	XDEF _player1ShieldActive
	XDEF _player1Grounded
	XDEF _player1Jumping
	XDEF _player1MoveAnimationCount
	XDEF _player1MoveAnimation
	XDEF _player1JumpHeight
	XDEF _player1JumpSpeed
	XDEF _player1FallSpeed
	XDEF _player1MoveSpeed
	XDEF _player1Flipped
	XDEF _player1Y
	XDEF _player1X
	XDEF _player1CharacterSelection
	XDEF _player2SpawnY
	XDEF _player2SpawnX
	XDEF _player1SpawnY
	XDEF _player1SpawnX
	XDEF _playerDeath
	XDEF _playerGrounded
	XDEF _playerY
	XDEF _playerX
	XDEF _player
	XDEF _character1WeaponKnockbackStrength
	XDEF _character1WeaponKnockback
	XDEF _character1WeaponSpeed
	XDEF _character1JumpHeight
	XDEF _character1JumpSpeed
	XDEF _character1FallSpeed
	XDEF _character1MoveSpeed
	XDEF _character0WeaponKnockbackStrength
	XDEF _character0WeaponKnockback
	XDEF _character0WeaponSpeed
	XDEF _character0JumpHeight
	XDEF _character0JumpSpeed
	XDEF _character0FallSpeed
	XDEF _character0MoveSpeed
	XDEF _mapYBlock
	XDEF _mapXBlock
	XDEF _map
	XDEF _players
	XDEF _selecting
	XDEF _selection
	XDEF _testMode
	XDEF _version
	END
