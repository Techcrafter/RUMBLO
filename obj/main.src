; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
_selection:
	DS	3
_selecting:
	DS	3
_players:
	DS	3
_map:
	DS	3
_character:
	DS	3
;    1	#include <fileioc.h>
;    2	#include <fontlibc.h>
;    3	#include "gfx/gfx.h"
;    4	#include <graphx.h>
;    5	#include <stdbool.h>
;    6	#include <stddef.h>
;    7	#include <stdint.h>
;    8	#include <stdio.h>
;    9	#include <stdlib.h>
;   10	#include <string.h>
;   11	#include <tice.h>
;   12	
;   13	extern unsigned char tilemap_map[];
;   14	
;   15	#define TILE_WIDTH          16
;   16	#define TILE_HEIGHT         16
;   17	
;   18	#define TILEMAP_WIDTH       160
;   19	#define TILEMAP_HEIGHT      120
;   20	
;   21	#define TILEMAP_DRAW_WIDTH  20
;   22	#define TILEMAP_DRAW_HEIGHT 15
;   23	
;   24	#define Y_OFFSET            0
;   25	#define X_OFFSET            0
;   26	
;   27	#define BLACK				1
;   28	#define RED					gfx_red
;   29	#define TRANSPARENT			0
;   30	#define WHITE				2
;   31	
;   32	int selection;
;   33	int selecting;
;   34	
;   35	int players;
;   36	int map;
;   37	int character;
	SEGMENT CODE
;   38	
;   39	int getXBlock(int xBlock)
;   40	{
_getXBlock:
	CALL	__frameset0
;   41		return TILE_WIDTH * TILEMAP_DRAW_WIDTH * xBlock;
	LD	BC,320
	LD	HL,(IX+6)
	CALL	__imuls
;   42	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getXBlock ***************************
;Name                         Addr/Register   Size   Type
;xBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   43	
;   44	int getYBlock(int yBlock)
;   45	{
_getYBlock:
	CALL	__frameset0
;   46		return TILE_HEIGHT * TILEMAP_DRAW_HEIGHT * yBlock;
	LD	HL,(IX+6)
	LD	A,240
	CALL	__imul_b
;   47	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getYBlock ***************************
;Name                         Addr/Register   Size   Type
;yBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   48	
;   49	int main(void)
;   50	{
_main:
	LD	HL,-19
	CALL	__frameset
;   51		//initialization
;   52		sk_key_t key;
;   53		
;   54	    gfx_tilemap_t tilemap;
;   55		tilemap.map         = tilemap_map;
	LD	BC,_tilemap_map
	LD	(IX+-19),BC
;   56	    tilemap.tiles       = tileset_tiles;
	LD	BC,_tileset_tiles_data
	LD	(IX+-16),BC
;   57	    tilemap.type_width  = gfx_tile_16_pixel;
	LD	(IX+-9),4
;   58	    tilemap.type_height = gfx_tile_16_pixel;
	LD	(IX+-8),4
;   59	    tilemap.tile_height = TILE_HEIGHT;
	LD	(IX+-13),16
;   60	    tilemap.tile_width  = TILE_WIDTH;
	LD	(IX+-12),16
;   61	    tilemap.draw_height = TILEMAP_DRAW_HEIGHT;
	LD	(IX+-11),15
;   62	    tilemap.draw_width  = TILEMAP_DRAW_WIDTH;
	LD	(IX+-10),20
;   63	    tilemap.height      = TILEMAP_HEIGHT;
	LD	(IX+-7),120
;   64	    tilemap.width       = TILEMAP_WIDTH;
	LD	(IX+-6),160
;   65	    tilemap.y_loc       = Y_OFFSET;
	LD	(IX+-5),0
;   66	    tilemap.x_loc       = X_OFFSET;
	LD	BC,0
	LD	(IX+-4),BC
;   67		
;   68		gfx_Begin();
	CALL	_gfx_Begin
;   69		
;   70		gfx_SetPalette(global_palette, sizeof_global_palette, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,212
	PUSH	BC
	LD	BC,_global_palette
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   71		gfx_SetTransparentColor(TRANSPARENT);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;   72	    gfx_SetColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   73		
;   74		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   75		
;   76		gfx_SetMonospaceFont(8);
	LD	BC,8
	PUSH	BC
	CALL	_gfx_SetMonospaceFont
	POP	BC
;   77		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   78	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;   79		
;   80		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;   81		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;   82		
;   83		delay(2000);
	LD	BC,2000
	PUSH	BC
	CALL	_delay
	POP	BC
;   84		
;   85		//---------------------------------------------------------------
;   86		
;   87		//start screen
;   88		startScreen:
;   89		
;   90		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;   91		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   92	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;   93		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;   94		gfx_PrintStringXY("Press [enter] to start...", 65, 200);
	LD	BC,200
	PUSH	BC
	LD	BC,65
	PUSH	BC
	LD	BC,L__2
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   95		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;   96		while(os_GetCSC() != sk_Enter);
L_4:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,9
	SBC	HL,BC
	JR	NZ,L_4
;   97		
;   98		//---------------------------------------------------------------
;   99		
;  100		//main menu
;  101		mainMenu:
L_5:
;  102		
;  103		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  104		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  105		while(selecting)
	JR	L_23
L_24:
;  106		{
;  107			gfx_Tilemap(&tilemap, getXBlock(1), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  108			gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  109			gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  110			
;  111			key = os_GetCSC();
	CALL	_os_GetCSC
	LD	(IX+-1),A
;  112			if(key == sk_Enter)
	CP	A,9
	JR	NZ,L_15
;  113			{
;  114				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  115			}
;  116			else if(key == sk_Up && selection != 0)
	JR	L_18
L_15:
	LD	A,(IX+-1)
	CP	A,4
	JR	NZ,L_13
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_13
;  117			{
;  118				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  119			}
;  120			else if(key == sk_Down && selection != 1)
	JR	L_18
L_13:
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_18
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_18
;  121			{
;  122				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  123			}
L_18:
;  124			
;  125			if(selection == 0)
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_17
;  126			{
;  127				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  128			}
;  129			else
	JR	L_19
L_17:
;  130			{
;  131				gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  132			}
L_19:
;  133			gfx_PrintStringXY("Singleplayer", 112, 68);
	LD	BC,68
	PUSH	BC
	LD	BC,112
	PUSH	BC
	LD	BC,L__10
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  134			if(selection == 1)
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_21
;  135			{
;  136				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  137			}
;  138			else
	JR	L_22
L_21:
;  139			{
;  140				gfx_SetTextFGColor(BLACK);
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  141			}
L_22:
;  142			gfx_PrintStringXY("Quit game", 124, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,124
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  143			
;  144			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  145		}
L_23:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_24
;  146		
;  147		switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__14:
	DW	2
	DB	0
	DW24	L_25	

	DB	1
	DW24	L_28	

	DW24	L_30	

;  148		{
;  149			case 0:
L_25:
;  150				players = 1;
	LD	BC,1
	LD	(_players),BC
;  151				goto mapSelector;
;  152				break;
;  153			case 1:
;  154				goto quitGame;
;  155				break;
;  156		}
;  157		
;  158		goto error;
;  159		
;  160		//---------------------------------------------------------------
;  161		
;  162		//map selector
;  163		mapSelector:
;  164		
;  165		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  166		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  167		while(selecting)
	JR	L_47
L_48:
;  168		{
;  169			gfx_Tilemap(&tilemap, getXBlock(2), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,2
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  170			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  171			gfx_SetTextBGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  172			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  173			gfx_PrintStringXY("Select a map:", 62, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,L__15
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  174			
;  175			key = os_GetCSC();
	CALL	_os_GetCSC
	LD	(IX+-1),A
;  176			if(key == sk_Enter)
	CP	A,9
	JR	NZ,L_42
;  177			{
;  178				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  179			}
;  180			else if(key == sk_Clear)
	JR	L_45
L_42:
	LD	A,(IX+-1)
	CP	A,15
	JR	Z,L_5
;  181			{
;  182				goto mainMenu;
;  183			}
;  184			else if(key == sk_Left && selection != 0)
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_38
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_38
;  185			{
;  186				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  187			}
;  188			else if(key == sk_Right && selection != 1)
	JR	L_45
L_38:
	LD	A,(IX+-1)
	CP	A,3
	JR	NZ,L_45
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_45
;  189			{
;  190				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  191			}
L_45:
;  192			
;  193			switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__22:
	DW	2
	DB	0
	DW24	L_43	

	DB	1
	DW24	L_44	

	DW24	L_46	

;  194			{
;  195				case 0:
L_43:
;  196					gfx_TransparentSprite(mapHighlighter, 32, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  197					break;
	JR	L_46
;  198				case 1:
L_44:
;  199					gfx_TransparentSprite(mapHighlighter, 96, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  200					break;
;  201			}
L_46:
;  202			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  203		}
L_47:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_48
;  204		map = selection;
	LD	BC,(_selection)
	LD	(_map),BC
;  205		
;  206		goto characterSelector;
;  207		
;  208		//---------------------------------------------------------------
;  209		
;  210		//character selector
;  211		characterSelector:
;  212		
;  213		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  214		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  215		
;  216		while(selecting)
	JR	L_66
L_67:
;  217		{
;  218			gfx_Tilemap(&tilemap, getXBlock(3), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,3
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  219			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  220			gfx_SetTextBGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  221			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  222			gfx_PrintStringXY("Select a character:", 10, 10);
	LD	BC,10
	PUSH	BC
	PUSH	BC
	LD	BC,L__24
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  223			
;  224			key = os_GetCSC();
	CALL	_os_GetCSC
	LD	(IX+-1),A
;  225			if(key == sk_Enter)
	CP	A,9
	JR	NZ,L_61
;  226			{
;  227				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  228			}
;  229			else if(key == sk_Clear)
	JR	L_64
L_61:
	LD	A,(IX+-1)
	CP	A,15
	JR	Z,L_5
;  230			{
;  231				goto mainMenu;
;  232			}
;  233			else if(key == sk_Left && selection != 0)
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_57
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_57
;  234			{
;  235				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  236			}
;  237			else if(key == sk_Right && selection != 1)
	JR	L_64
L_57:
	LD	A,(IX+-1)
	CP	A,3
	JR	NZ,L_64
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_64
;  238			{
;  239				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  240			}
L_64:
;  241			
;  242			switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__31:
	DW	2
	DB	0
	DW24	L_62	

	DB	1
	DW24	L_63	

	DW24	L_65	

;  243			{
;  244				case 0:
L_62:
;  245					gfx_TransparentSprite(mapHighlighter, 32, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  246					break;
	JR	L_65
;  247				case 1:
L_63:
;  248					gfx_TransparentSprite(mapHighlighter, 96, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  249					break;
;  250			}
L_65:
;  251			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  252		}
L_66:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_67
;  253		character = selection;
	LD	BC,(_selection)
	LD	(_character),BC
L_30:
;  254		
;  255		goto error;
;  256		
;  257		//---------------------------------------------------------------
;  258		
;  259		//error
;  260		error:
;  261		
;  262		gfx_FillScreen(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  263		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  264		gfx_SetTextBGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  265		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  266		gfx_PrintStringXY("An error has occurred!", 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,L__33
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  267		gfx_PrintStringXY("Press [enter] to go to the main menu...", 0, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,L__34
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  268		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  269		while(os_GetCSC() != sk_Enter);
L_70:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,9
	SBC	HL,BC
	JR	NZ,L_70
;  270		goto mainMenu;
	JR	L_5
L_28:
;  271		
;  272		//---------------------------------------------------------------
;  273		
;  274		//quit game
;  275		quitGame:
;  276		
;  277		gfx_End();
	CALL	_gfx_End
	OR	A,A
;  278		return 0;
	SBC	HL,HL
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_character                          STATIC      3   variable
;_map                                STATIC      3   variable
;_mapHighlighter_data                IMPORT   1026   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_players                            STATIC      3   variable
;_selecting                          STATIC      3   variable
;_selection                          STATIC      3   variable
;_os_GetCSC                          IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_delay                              IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_Tilemap                        IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetMonospaceFont               IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_global_palette                     IMPORT    212   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_tileset_tiles_data                 IMPORT    120   variable
;_tilemap_map                        IMPORT  unknown variable
;tilemap                              IX-19     18   variable
;key                                   IX-1      1   variable


; Stack Frame Size: 25 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__2:
	DB	"Press [enter] to start..."
	DB	0
L__10:
	DB	"Singleplayer"
	DB	0
L__12:
	DB	"Quit game"
	DB	0
L__15:
	DB	"Select a map:"
	DB	0
L__24:
	DB	"Select a character:"
	DB	0
L__33:
	DB	"An error has occurred!"
	DB	0
L__34:
	DB	"Press [enter] to go to the main menu..."
	DB	0
	XREF _tilemap_map:ROM
	XREF _gfx_SetMonospaceFont:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _mapHighlighter_data:ROM
	XREF _tileset_tiles_data:ROM
	XREF _global_palette:ROM
	XREF _os_GetCSC:ROM
	XREF _delay:ROM
	XREF __imuls:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __imul_b:ROM
	XDEF _main
	XDEF _getYBlock
	XDEF _getXBlock
	XDEF _character
	XDEF _map
	XDEF _players
	XDEF _selecting
	XDEF _selection
	END
