; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_version:
	DB	49
	DB	46
	DB	48
	DB	0
	SEGMENT BSS
_selection:
	DS	3
_selecting:
	DS	3
_players:
	DS	3
_map:
	DS	3
_mapXBlock:
	DS	3
_mapYBlock:
	DS	3
_fighting:
	DS	3
_player1Character:
	DS	3
_player1X:
	DS	3
_player1Y:
	DS	3
_player1Lifes:
	DS	3
_player2IsAi:
	DS	3
_player2Character:
	DS	3
_player2X:
	DS	3
_player2Y:
	DS	3
_player2Lifes:
	DS	3
;    1	#include <fileioc.h>
;    2	#include <fontlibc.h>
;    3	#include "gfx/gfx.h"
;    4	#include <graphx.h>
;    5	#include <stdbool.h>
;    6	#include <stddef.h>
;    7	#include <stdint.h>
;    8	#include <stdio.h>
;    9	#include <stdlib.h>
;   10	#include <string.h>
;   11	#include <tice.h>
;   12	
;   13	extern unsigned char tilemap_map[];
;   14	
;   15	#define TILE_WIDTH          16
;   16	#define TILE_HEIGHT         16
;   17	
;   18	#define TILEMAP_WIDTH       160
;   19	#define TILEMAP_HEIGHT      120
;   20	
;   21	#define TILEMAP_DRAW_WIDTH  20
;   22	#define TILEMAP_DRAW_HEIGHT 15
;   23	
;   24	#define Y_OFFSET            0
;   25	#define X_OFFSET            0
;   26	
;   27	#define BLACK				1
;   28	#define GRAY				13
;   29	#define RED					gfx_red
;   30	#define TRANSPARENT			0
;   31	#define WHITE				2
;   32	
;   33	char version[] = "1.0";
;   34	
;   35	int selection;
;   36	int selecting;
;   37	
;   38	int players;
;   39	int map;
;   40	int mapXBlock;
;   41	int mapYBlock;
;   42	int fighting;
;   43	
;   44	int player1Character;
;   45	int player1X;
;   46	int player1Y;
;   47	int player1Lifes;
;   48	
;   49	int player2IsAi;
;   50	int player2Character;
;   51	int player2X;
;   52	int player2Y;
;   53	int player2Lifes;
	SEGMENT CODE
;   54	
;   55	int getXBlock(int xBlock)
;   56	{
_getXBlock:
	CALL	__frameset0
;   57		return TILE_WIDTH * TILEMAP_DRAW_WIDTH * xBlock;
	LD	BC,320
	LD	HL,(IX+6)
	CALL	__imuls
;   58	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getXBlock ***************************
;Name                         Addr/Register   Size   Type
;xBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   59	
;   60	int getYBlock(int yBlock)
;   61	{
_getYBlock:
	CALL	__frameset0
;   62		return TILE_HEIGHT * TILEMAP_DRAW_HEIGHT * yBlock;
	LD	HL,(IX+6)
	LD	A,240
	CALL	__imul_b
;   63	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getYBlock ***************************
;Name                         Addr/Register   Size   Type
;yBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   64	
;   65	int main(void)
;   66	{
_main:
	LD	HL,-19
	CALL	__frameset
;   67		//initialization
;   68		sk_key_t key;
;   69		
;   70	    gfx_tilemap_t tilemap;
;   71		tilemap.map         = tilemap_map;
	LD	BC,_tilemap_map
	LD	(IX+-19),BC
;   72	    tilemap.tiles       = tileset_tiles;
	LD	BC,_tileset_tiles_data
	LD	(IX+-16),BC
;   73	    tilemap.type_width  = gfx_tile_16_pixel;
	LD	(IX+-9),4
;   74	    tilemap.type_height = gfx_tile_16_pixel;
	LD	(IX+-8),4
;   75	    tilemap.tile_height = TILE_HEIGHT;
	LD	(IX+-13),16
;   76	    tilemap.tile_width  = TILE_WIDTH;
	LD	(IX+-12),16
;   77	    tilemap.draw_height = TILEMAP_DRAW_HEIGHT;
	LD	(IX+-11),15
;   78	    tilemap.draw_width  = TILEMAP_DRAW_WIDTH;
	LD	(IX+-10),20
;   79	    tilemap.height      = TILEMAP_HEIGHT;
	LD	(IX+-7),120
;   80	    tilemap.width       = TILEMAP_WIDTH;
	LD	(IX+-6),160
;   81	    tilemap.y_loc       = Y_OFFSET;
	LD	(IX+-5),0
;   82	    tilemap.x_loc       = X_OFFSET;
	LD	BC,0
	LD	(IX+-4),BC
;   83		
;   84		gfx_Begin();
	CALL	_gfx_Begin
;   85		
;   86		gfx_SetPalette(global_palette, sizeof_global_palette, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,254
	PUSH	BC
	LD	BC,_global_palette
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   87		gfx_SetTransparentColor(TRANSPARENT);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;   88	    gfx_SetColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   89		
;   90		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   91		
;   92		gfx_SetMonospaceFont(8);
	LD	BC,8
	PUSH	BC
	CALL	_gfx_SetMonospaceFont
	POP	BC
;   93		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   94	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;   95		
;   96		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;   97		gfx_PrintStringXY(version, 296, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,_version
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   98		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;   99		
;  100		delay(2000);
	LD	BC,2000
	PUSH	BC
	CALL	_delay
	POP	BC
;  101		
;  102		//---------------------------------------------------------------
;  103		
;  104		//start screen
;  105		startScreen:
L_2:
;  106		
;  107		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  108		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  109	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  110		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  111		gfx_PrintStringXY("Press [enter] to start...", 65, 200);
	LD	BC,200
	PUSH	BC
	LD	BC,65
	PUSH	BC
	LD	BC,L__2
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  112		gfx_PrintStringXY(version, 296, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,_version
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  113		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  114		while(os_GetCSC() != sk_Enter);
L_4:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,9
	SBC	HL,BC
	JR	NZ,L_4
;  115		
;  116		//---------------------------------------------------------------
;  117		
;  118		//main menu
;  119		mainMenu:
L_5:
;  120		
;  121		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  122		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  123		while(selecting)
	JR	L_25
L_26:
;  124		{
;  125			gfx_Tilemap(&tilemap, getXBlock(1), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  126			gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  127			gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  128			
;  129			key = os_GetCSC();
	CALL	_os_GetCSC
	LD	(IX+-1),A
;  130			if(key == sk_Enter)
	CP	A,9
	JR	NZ,L_17
;  131			{
;  132				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  133			}
;  134			else if(key == sk_Clear)
	JR	L_20
L_17:
	LD	A,(IX+-1)
	CP	A,15
	JR	Z,L_2
;  135			{
;  136				goto startScreen;
;  137			}
;  138			else if(key == sk_Up && selection != 0)
	LD	A,(IX+-1)
	CP	A,4
	JR	NZ,L_13
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_13
;  139			{
;  140				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  141			}
;  142			else if(key == sk_Down && selection != 1)
	JR	L_20
L_13:
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_20
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_20
;  143			{
;  144				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  145			}
L_20:
;  146			
;  147			if(selection == 0)
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_19
;  148			{
;  149				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  150			}
;  151			else
	JR	L_21
L_19:
;  152			{
;  153				gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  154			}
L_21:
;  155			gfx_PrintStringXY("Singleplayer", 112, 68);
	LD	BC,68
	PUSH	BC
	LD	BC,112
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  156			if(selection == 1)
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_23
;  157			{
;  158				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  159			}
;  160			else
	JR	L_24
L_23:
;  161			{
;  162				gfx_SetTextFGColor(BLACK);
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  163			}
L_24:
;  164			gfx_PrintStringXY("Quit game", 124, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,124
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  165			gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  166			gfx_PrintStringXY("Star it on GitHub!", 90, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,90
	PUSH	BC
	LD	BC,L__14
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  167			
;  168			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  169		}
L_25:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_26
;  170		
;  171		switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__16:
	DW	2
	DB	0
	DW24	L_27	

	DB	1
	DW24	L_30	

	DW24	L_32	

;  172		{
;  173			case 0:
L_27:
;  174				players = 1;
	LD	BC,1
	LD	(_players),BC
;  175				goto mapSelector;
L_28:
;  176				break;
;  177			case 1:
;  178				goto quitGame;
;  179				break;
;  180		}
;  181		
;  182		goto error;
;  183		
;  184		//---------------------------------------------------------------
;  185		
;  186		//map selector
;  187		mapSelector:
;  188		
;  189		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  190		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  191		while(selecting)
	JR	L_49
L_50:
;  192		{
;  193			gfx_Tilemap(&tilemap, getXBlock(2), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,2
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  194			gfx_SetColor(GRAY);
	LD	BC,13
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  195			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  196			gfx_SetTextBGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  197			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  198			gfx_PrintStringXY("Select a map:", 62, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,L__17
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  199			
;  200			key = os_GetCSC();
	CALL	_os_GetCSC
	LD	(IX+-1),A
;  201			if(key == sk_Enter)
	CP	A,9
	JR	NZ,L_44
;  202			{
;  203				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  204			}
;  205			else if(key == sk_Clear)
	JR	L_47
L_44:
	LD	A,(IX+-1)
	CP	A,15
	JR	Z,L_5
;  206			{
;  207				goto mainMenu;
;  208			}
;  209			else if(key == sk_Left && selection != 0)
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_40
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_40
;  210			{
;  211				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  212			}
;  213			else if(key == sk_Right && selection != 1)
	JR	L_47
L_40:
	LD	A,(IX+-1)
	CP	A,3
	JR	NZ,L_47
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_47
;  214			{
;  215				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  216			}
L_47:
;  217			
;  218			switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__24:
	DW	2
	DB	0
	DW24	L_45	

	DB	1
	DW24	L_46	

	DW24	L_48	

;  219			{
;  220				case 0:
L_45:
;  221					gfx_TransparentSprite(mapHighlighter, 32, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  222					break;
	JR	L_48
;  223				case 1:
L_46:
;  224					gfx_TransparentSprite(mapHighlighter, 96, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  225					break;
;  226			}
L_48:
;  227			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  228		}
L_49:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_50
;  229		map = selection;
	LD	BC,(_selection)
	LD	(_map),BC
;  230		switch(map)
	LD	HL,(_map)
	CALL	__case8
L__26:
	DW	2
	DB	0
	DW24	L_52	

	DB	1
	DW24	L_55	

	DW24	L_54	

;  231		{
;  232			case 0:
L_52:
;  233				mapXBlock = 3;
	LD	BC,3
	LD	(_mapXBlock),BC
;  234				mapYBlock = 0;
	LD	BC,0
	LD	(_mapYBlock),BC
;  235				break;
;  236			case 1:
;  237				break;
;  238		}
L_55:
;  239		
;  240		goto characterSelector;
L_54:
;  241		
;  242		//---------------------------------------------------------------
;  243		
;  244		//character selector
;  245		characterSelector:
;  246		
;  247		selection = 0;
	LD	(_selection),BC
;  248		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  249		
;  250		while(selecting)
	JR	L_80
L_81:
;  251		{
;  252			switch(map)
	LD	HL,(_map)
	CALL	__case8
L__27:
	DW	2
	DB	0
	DW24	L_56	

	DB	1
	DW24	L_32	

	DW24	L_58	

;  253			{
;  254				case 0:
L_56:
;  255					gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  256					break;
;  257				case 1:
;  258					goto error;
;  259					break;
;  260			}
L_58:
;  261			gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  262			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  263			gfx_SetTextBGColor(GRAY);
	LD	BC,13
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  264			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  265			gfx_PrintStringXY("Select a character:", 10, 76);
	LD	BC,76
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__28
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  266			gfx_TransparentSprite(characterHighlighter, 138, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,138
	PUSH	BC
	LD	BC,_characterHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  267			
;  268			key = os_GetCSC();
	CALL	_os_GetCSC
	LD	(IX+-1),A
;  269			if(key == sk_Enter)
	CP	A,9
	JR	NZ,L_75
;  270			{
;  271				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  272			}
;  273			else if(key == sk_Clear)
	JR	L_78
L_75:
	LD	A,(IX+-1)
	CP	A,15
	JR	Z,L_28
;  274			{
;  275				goto mapSelector;
;  276			}
;  277			else if(key == sk_Left && selection != 0)
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_71
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_71
;  278			{
;  279				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  280			}
;  281			else if(key == sk_Left && selection == 0)
	JR	L_78
L_71:
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_69
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_69
;  282			{
;  283				selection = 1;
	LD	BC,1
	LD	(_selection),BC
;  284			}
;  285			else if(key == sk_Right && selection != 1)
	JR	L_78
L_69:
	LD	A,(IX+-1)
	CP	A,3
	JR	NZ,L_67
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_67
;  286			{
;  287				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  288			}
;  289			else if(key == sk_Right && selection == 1)
	JR	L_78
L_67:
	LD	A,(IX+-1)
	CP	A,3
	JR	NZ,L_78
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_78
;  290			{
;  291				selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  292			}
L_78:
;  293			
;  294			switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__39:
	DW	2
	DB	0
	DW24	L_76	

	DB	1
	DW24	L_77	

	DW24	L_79	

;  295			{
;  296				case 0:
L_76:
;  297					gfx_TransparentSprite(character1, 69, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,69
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  298					gfx_TransparentSprite(character0, 138, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,138
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  299					gfx_TransparentSprite(character1, 207, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,207
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  300					break;
	JR	L_79
;  301				case 1:
L_77:
;  302					gfx_TransparentSprite(character0, 69, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,69
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  303					gfx_TransparentSprite(character1, 138, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,138
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  304					gfx_TransparentSprite(character0, 207, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,207
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  305					break;
;  306			}
L_79:
;  307			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  308		}
L_80:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_81
;  309		player1Character = selection;
	LD	BC,(_selection)
	LD	(_player1Character),BC
;  310		
;  311		goto prepareFight;
;  312		
;  313		//---------------------------------------------------------------
;  314		
;  315		//prepareFight
;  316		prepareFight:
;  317		
;  318		fighting = 1;
	LD	BC,1
	LD	(_fighting),BC
;  319		switch(map)
	LD	HL,(_map)
	CALL	__case8
L__41:
	DW	2
	DB	0
	DW24	L_84	

	DB	1
	DW24	L_90	

	DW24	L_90	

;  320		{
;  321			case 0:
L_84:
;  322				player1X = 100;
	LD	BC,100
	LD	(_player1X),BC
;  323				player1Y = 100;
	LD	(_player1Y),BC
;  324				player1Lifes = 3;
	LD	BC,3
	LD	(_player1Lifes),BC
;  325				if(players == 1)
	LD	HL,(_players)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_87
;  326				{
;  327					player2IsAi = 1;
	LD	(_player2IsAi),BC
;  328				}
;  329				else if(players == 2)
	JR	L_88
L_87:
	LD	BC,2
	LD	HL,(_players)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_88
;  330				{
;  331					player2IsAi = 0;
	LD	BC,0
	LD	(_player2IsAi),BC
;  332				}
L_88:
;  333				player2X = 200;
	LD	BC,200
	LD	(_player2X),BC
;  334				player2Y = 200;
	LD	(_player2Y),BC
;  335				player2Lifes = 3;
	LD	BC,3
	LD	(_player2Lifes),BC
;  336				break;
;  337			case 1:
;  338				break;
;  339		}
L_90:
;  340		
;  341		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  342		gfx_TransparentSprite(counter3, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  343		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  344		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  345		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  346		gfx_TransparentSprite(counter2, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  347		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  348		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  349		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  350		gfx_TransparentSprite(counter1, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  351		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  352		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  353		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  354		gfx_TransparentSprite(counterFight, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counterFight_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  355		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  356		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  357		
;  358		goto fight;
;  359		
;  360		//---------------------------------------------------------------
;  361		
;  362		//fight
;  363		fight:
;  364		
;  365		while(fighting)
	JR	L_109
L_110:
;  366		{
;  367			gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	PEA	IX+-19
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  368			
;  369			key = os_GetCSC();
	CALL	_os_GetCSC
	LD	(IX+-1),A
;  370			if(key == sk_Clear)
	CP	A,15
	JR	NZ,L_104
;  371			{
;  372				fighting = 0;
	LD	BC,0
	LD	(_fighting),BC
;  373			}
;  374			else if(key == sk_Up)
	JR	L_107
L_104:
	LD	A,(IX+-1)
	CP	A,4
	JR	NZ,L_102
;  375			{
;  376				player1Y--;
	LD	BC,(_player1Y)
	DEC	BC
	LD	(_player1Y),BC
;  377			}
;  378			else if(key == sk_Down)
	JR	L_107
L_102:
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_100
;  379			{
;  380				player1Y++;
	LD	BC,(_player1Y)
	INC	BC
	LD	(_player1Y),BC
;  381			}
;  382			else if(key == sk_Left)
	JR	L_107
L_100:
	LD	A,(IX+-1)
	CP	A,2
	JR	NZ,L_98
;  383			{
;  384				player1X--;
	LD	BC,(_player1X)
	DEC	BC
	LD	(_player1X),BC
;  385			}
;  386			else if(key == sk_Right)
	JR	L_107
L_98:
	LD	A,(IX+-1)
	CP	A,3
	JR	NZ,L_107
;  387			{
;  388				player1X++;
	LD	BC,(_player1X)
	INC	BC
	LD	(_player1X),BC
;  389			}
L_107:
;  390			
;  391			switch(player1Character)
	LD	HL,(_player1Character)
	CALL	__case8
L__49:
	DW	2
	DB	0
	DW24	L_105	

	DB	1
	DW24	L_106	

	DW24	L_108	

;  392			{
;  393				case 0:
L_105:
;  394					gfx_TransparentSprite(character0, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  395					break;
	JR	L_108
;  396				case 1:
L_106:
;  397					gfx_TransparentSprite(character1, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  398					break;
;  399			}
L_108:
;  400			
;  401			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  402		}
L_109:
	LD	HL,(_fighting)
	CALL	__icmpzero
	JR	NZ,L_110
L_32:
;  403		
;  404		goto error;
;  405		
;  406		//---------------------------------------------------------------
;  407		
;  408		//error
;  409		error:
;  410		
;  411		gfx_FillScreen(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  412		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  413		gfx_SetTextBGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  414		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  415		gfx_PrintStringXY("An error has occurred!", 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,L__51
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  416		gfx_PrintStringXY("Press [enter] to go to the main menu...", 0, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,L__52
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  417		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  418		while(os_GetCSC() != sk_Enter);
L_113:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,9
	SBC	HL,BC
	JR	NZ,L_113
;  419		goto mainMenu;
	JR	L_5
L_30:
;  420		
;  421		//---------------------------------------------------------------
;  422		
;  423		//quit game
;  424		quitGame:
;  425		
;  426		gfx_End();
	CALL	_gfx_End
	OR	A,A
;  427		return 0;
	SBC	HL,HL
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_counterFight_data                  IMPORT   1538   variable
;_counter1_data                      IMPORT   1538   variable
;_counter2_data                      IMPORT   1538   variable
;_counter3_data                      IMPORT   1538   variable
;_player2Lifes                       STATIC      3   variable
;_player2Y                           STATIC      3   variable
;_player2X                           STATIC      3   variable
;_player2IsAi                        STATIC      3   variable
;_player1Lifes                       STATIC      3   variable
;_player1Y                           STATIC      3   variable
;_player1X                           STATIC      3   variable
;_fighting                           STATIC      3   variable
;_player1Character                   STATIC      3   variable
;_character0_data                    IMPORT   3074   variable
;_character1_data                    IMPORT   3074   variable
;_characterHighlighter_data          IMPORT   3074   variable
;_gfx_FillRectangle                  IMPORT  -----   function
;_mapYBlock                          STATIC      3   variable
;_mapXBlock                          STATIC      3   variable
;_map                                STATIC      3   variable
;_mapHighlighter_data                IMPORT   1026   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_players                            STATIC      3   variable
;_selecting                          STATIC      3   variable
;_selection                          STATIC      3   variable
;_os_GetCSC                          IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_delay                              IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_version                            STATIC      4   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_Tilemap                        IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetMonospaceFont               IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_global_palette                     IMPORT    254   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_tileset_tiles_data                 IMPORT    180   variable
;_tilemap_map                        IMPORT  unknown variable
;tilemap                              IX-19     18   variable
;key                                   IX-1      1   variable


; Stack Frame Size: 25 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__2:
	DB	"Press [enter] to start..."
	DB	0
L__11:
	DB	"Singleplayer"
	DB	0
L__13:
	DB	"Quit game"
	DB	0
L__14:
	DB	"Star it on GitHub!"
	DB	0
L__17:
	DB	"Select a map:"
	DB	0
L__28:
	DB	"Select a character:"
	DB	0
L__51:
	DB	"An error has occurred!"
	DB	0
L__52:
	DB	"Press [enter] to go to the main menu..."
	DB	0
	XREF _tilemap_map:ROM
	XREF _gfx_SetMonospaceFont:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _mapHighlighter_data:ROM
	XREF _counterFight_data:ROM
	XREF _counter3_data:ROM
	XREF _counter2_data:ROM
	XREF _counter1_data:ROM
	XREF _characterHighlighter_data:ROM
	XREF _character1_data:ROM
	XREF _character0_data:ROM
	XREF _tileset_tiles_data:ROM
	XREF _global_palette:ROM
	XREF _os_GetCSC:ROM
	XREF _delay:ROM
	XREF __imuls:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __imul_b:ROM
	XDEF _main
	XDEF _getYBlock
	XDEF _getXBlock
	XDEF _player2Lifes
	XDEF _player2Y
	XDEF _player2X
	XDEF _player2Character
	XDEF _player2IsAi
	XDEF _player1Lifes
	XDEF _player1Y
	XDEF _player1X
	XDEF _player1Character
	XDEF _fighting
	XDEF _mapYBlock
	XDEF _mapXBlock
	XDEF _map
	XDEF _players
	XDEF _selecting
	XDEF _selection
	XDEF _version
	END
