; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_version:
	DB	49
	DB	46
	DB	48
	DB	0
_testMode:
	DW	0
	DB	0
	SEGMENT BSS
_selection:
	DS	3
_selecting:
	DS	3
_players:
	DS	3
_map:
	DS	3
_mapAnimation:
	DS	3
_mapAnimationCount:
	DS	3
_mapAnimationSpeed:
	DS	3
_mapAnimationState:
	DS	3
_mapXBlock1:
	DS	3
_mapYBlock1:
	DS	3
_mapXBlock2:
	DS	3
_mapYBlock2:
	DS	3
_mapXBlock3:
	DS	3
_mapYBlock3:
	DS	3
_character0MoveSpeed:
	DS	3
_character0FallSpeed:
	DS	3
_character0JumpSpeed:
	DS	3
_character0JumpHeight:
	DS	3
_character0WeaponSpeed:
	DS	3
_character0WeaponKnockback:
	DS	3
_character0WeaponKnockbackStrength:
	DS	3
_character1MoveSpeed:
	DS	3
_character1FallSpeed:
	DS	3
_character1JumpSpeed:
	DS	3
_character1JumpHeight:
	DS	3
_character1WeaponSpeed:
	DS	3
_character1WeaponKnockback:
	DS	3
_character1WeaponKnockbackStrength:
	DS	3
_player:
	DS	3
_playerX:
	DS	3
_playerY:
	DS	3
_playerGrounded:
	DS	3
_playerDeath:
	DS	3
_player1SpawnX:
	DS	3
_player1SpawnY:
	DS	3
_player2SpawnX:
	DS	3
_player2SpawnY:
	DS	3
_player1CharacterSelection:
	DS	3
_player1X:
	DS	3
_player1Y:
	DS	3
_player1Flipped:
	DS	3
_player1MoveSpeed:
	DS	3
_player1FallSpeed:
	DS	3
_player1JumpSpeed:
	DS	3
_player1JumpHeight:
	DS	3
_player1MoveAnimation:
	DS	3
_player1MoveAnimationCount:
	DS	3
_player1Jumping:
	DS	3
_player1Grounded:
	DS	3
_player1ShieldActive:
	DS	3
_player1XKnockback:
	DS	3
_player1Lifes:
	DS	3
_player1WeaponSpeed:
	DS	3
_player1WeaponKnockback:
	DS	3
_player1WeaponKnockbackStrength:
	DS	3
_player1Weapon1:
	DS	3
_player1Weapon1X:
	DS	3
_player1Weapon1Y:
	DS	3
_player1Weapon1Flipped:
	DS	3
_player1Weapon2:
	DS	3
_player1Weapon2X:
	DS	3
_player1Weapon2Y:
	DS	3
_player1Weapon2Flipped:
	DS	3
_player1Weapon3:
	DS	3
_player1Weapon3X:
	DS	3
_player1Weapon3Y:
	DS	3
_player1Weapon3Flipped:
	DS	3
_player2IsAi:
	DS	3
_player2CharacterSelection:
	DS	3
_player2X:
	DS	3
_player2Y:
	DS	3
_player2Flipped:
	DS	3
_player2MoveSpeed:
	DS	3
_player2FallSpeed:
	DS	3
_player2JumpSpeed:
	DS	3
_player2JumpHeight:
	DS	3
_player2MoveAnimation:
	DS	3
_player2MoveAnimationCount:
	DS	3
_player2Jumping:
	DS	3
_player2Grounded:
	DS	3
_player2ShieldActive:
	DS	3
_player2XKnockback:
	DS	3
_player2Lifes:
	DS	3
_player2WeaponSpeed:
	DS	3
_player2WeaponKnockback:
	DS	3
_player2WeaponKnockbackStrength:
	DS	3
_player2Weapon1:
	DS	3
_player2Weapon1X:
	DS	3
_player2Weapon1Y:
	DS	3
_player2Weapon1Flipped:
	DS	3
_player2Weapon2:
	DS	3
_player2Weapon2X:
	DS	3
_player2Weapon2Y:
	DS	3
_player2Weapon2Flipped:
	DS	3
_player2Weapon3:
	DS	3
_player2Weapon3X:
	DS	3
_player2Weapon3Y:
	DS	3
_player2Weapon3Flipped:
	DS	3
_key:
	DS	1
_player1Character:
	DS	3
_player1CharacterMoving1:
	DS	3
_player1CharacterMoving2:
	DS	3
_player1CharacterNotGrounded:
	DS	3
_player1CharacterFlipped:
	DS	3
_player1CharacterMoving1Flipped:
	DS	3
_player1CharacterMoving2Flipped:
	DS	3
_player1CharacterNotGroundedFlipped:
	DS	3
_player1Weapon:
	DS	3
_player1WeaponFlipped:
	DS	3
_player2Character:
	DS	3
_player2CharacterMoving1:
	DS	3
_player2CharacterMoving2:
	DS	3
_player2CharacterNotGrounded:
	DS	3
_player2CharacterFlipped:
	DS	3
_player2CharacterMoving1Flipped:
	DS	3
_player2CharacterMoving2Flipped:
	DS	3
_player2CharacterNotGroundedFlipped:
	DS	3
_player2Weapon:
	DS	3
_player2WeaponFlipped:
	DS	3
_tilemap:
	DS	18
;    1	#include <fileioc.h>
;    2	#include <fontlibc.h>
;    3	#include "gfx/gfx.h"
;    4	#include <graphx.h>
;    5	#include <keypadc.h>
;    6	#include <stdbool.h>
;    7	#include <stddef.h>
;    8	#include <stdint.h>
;    9	#include <stdio.h>
;   10	#include <stdlib.h>
;   11	#include <string.h>
;   12	#include <tice.h>
;   13	
;   14	extern unsigned char tilemap_map[];
;   15	
;   16	#define TILE_WIDTH          16
;   17	#define TILE_HEIGHT         16
;   18	
;   19	#define TILEMAP_WIDTH       160
;   20	#define TILEMAP_HEIGHT      120
;   21	
;   22	#define TILEMAP_DRAW_WIDTH  20
;   23	#define TILEMAP_DRAW_HEIGHT 15
;   24	
;   25	#define Y_OFFSET            0
;   26	#define X_OFFSET            0
;   27	
;   28	#define BLACK				1
;   29	#define GRAY				3
;   30	#define RED					gfx_red
;   31	#define TRANSPARENT			0
;   32	#define WHITE				2
;   33	
;   34	char version[] = "1.0";
;   35	int testMode = 0;
;   36	
;   37	int selection;
;   38	int selecting;
;   39	
;   40	int players;
;   41	int map;
;   42	int mapAnimation;
;   43	int mapAnimationCount;
;   44	int mapAnimationSpeed;
;   45	int mapAnimationState;
;   46	int mapXBlock1;
;   47	int mapYBlock1;
;   48	int mapXBlock2;
;   49	int mapYBlock2;
;   50	int mapXBlock3;
;   51	int mapYBlock3;
;   52	
;   53	int character0MoveSpeed;
;   54	int character0FallSpeed;
;   55	int character0JumpSpeed;
;   56	int character0JumpHeight;
;   57	
;   58	int character0WeaponSpeed;
;   59	int character0WeaponKnockback;
;   60	int character0WeaponKnockbackStrength;
;   61	
;   62	int character1MoveSpeed;
;   63	int character1FallSpeed;
;   64	int character1JumpSpeed;
;   65	int character1JumpHeight;
;   66	
;   67	int character1WeaponSpeed;
;   68	int character1WeaponKnockback;
;   69	int character1WeaponKnockbackStrength;
;   70	
;   71	int player;
;   72	int playerX;
;   73	int playerY;
;   74	int playerGrounded;
;   75	int playerDeath;
;   76	
;   77	int player1SpawnX;
;   78	int player1SpawnY;
;   79	int player2SpawnX;
;   80	int player2SpawnY;
;   81	
;   82	int player1CharacterSelection;
;   83	int player1X;
;   84	int player1Y;
;   85	int player1Flipped;
;   86	int player1MoveSpeed;
;   87	int player1FallSpeed;
;   88	int player1JumpSpeed;
;   89	int player1JumpHeight;
;   90	int player1MoveAnimation;
;   91	int player1MoveAnimationCount;
;   92	int player1Jumping;
;   93	int player1Grounded;
;   94	int player1ShieldActive;
;   95	int player1XKnockback;
;   96	int player1Lifes;
;   97	
;   98	int player1WeaponSpeed;
;   99	int player1WeaponKnockback;
;  100	int player1WeaponKnockbackStrength;
;  101	int player1Weapon1;
;  102	int player1Weapon1X;
;  103	int player1Weapon1Y;
;  104	int player1Weapon1Flipped;
;  105	int player1Weapon2;
;  106	int player1Weapon2X;
;  107	int player1Weapon2Y;
;  108	int player1Weapon2Flipped;
;  109	int player1Weapon3;
;  110	int player1Weapon3X;
;  111	int player1Weapon3Y;
;  112	int player1Weapon3Flipped;
;  113	
;  114	int player2IsAi;
;  115	int player2CharacterSelection;
;  116	int player2X;
;  117	int player2Y;
;  118	int player2Flipped;
;  119	int player2MoveSpeed;
;  120	int player2FallSpeed;
;  121	int player2JumpSpeed;
;  122	int player2JumpHeight;
;  123	int player2MoveAnimation;
;  124	int player2MoveAnimationCount;
;  125	int player2Jumping;
;  126	int player2Grounded;
;  127	int player2ShieldActive;
;  128	int player2XKnockback;
;  129	int player2Lifes;
;  130	
;  131	int player2WeaponSpeed;
;  132	int player2WeaponKnockback;
;  133	int player2WeaponKnockbackStrength;
;  134	int player2Weapon1;
;  135	int player2Weapon1X;
;  136	int player2Weapon1Y;
;  137	int player2Weapon1Flipped;
;  138	int player2Weapon2;
;  139	int player2Weapon2X;
;  140	int player2Weapon2Y;
;  141	int player2Weapon2Flipped;
;  142	int player2Weapon3;
;  143	int player2Weapon3X;
;  144	int player2Weapon3Y;
;  145	int player2Weapon3Flipped;
;  146	
;  147	sk_key_t key;
;  148	
;  149	gfx_sprite_t *player1Character;
;  150	gfx_sprite_t *player1CharacterMoving1;
;  151	gfx_sprite_t *player1CharacterMoving2;
;  152	gfx_sprite_t *player1CharacterNotGrounded;
;  153	gfx_sprite_t *player1CharacterFlipped;
;  154	gfx_sprite_t *player1CharacterMoving1Flipped;
;  155	gfx_sprite_t *player1CharacterMoving2Flipped;
;  156	gfx_sprite_t *player1CharacterNotGroundedFlipped;
;  157	
;  158	gfx_sprite_t *player1Weapon;
;  159	gfx_sprite_t *player1WeaponFlipped;
;  160	
;  161	gfx_sprite_t *player2Character;
;  162	gfx_sprite_t *player2CharacterMoving1;
;  163	gfx_sprite_t *player2CharacterMoving2;
;  164	gfx_sprite_t *player2CharacterNotGrounded;
;  165	gfx_sprite_t *player2CharacterFlipped;
;  166	gfx_sprite_t *player2CharacterMoving1Flipped;
;  167	gfx_sprite_t *player2CharacterMoving2Flipped;
;  168	gfx_sprite_t *player2CharacterNotGroundedFlipped;
;  169	
;  170	gfx_sprite_t *player2Weapon;
;  171	gfx_sprite_t *player2WeaponFlipped;
;  172	
;  173	gfx_tilemap_t tilemap;
	SEGMENT CODE
;  174	
;  175	int getXBlock(int xBlock)
;  176	{
_getXBlock:
	CALL	__frameset0
;  177		return TILE_WIDTH * TILEMAP_DRAW_WIDTH * xBlock;
	LD	BC,320
	LD	HL,(IX+6)
	CALL	__imuls
;  178	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getXBlock ***************************
;Name                         Addr/Register   Size   Type
;xBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  179	
;  180	int getYBlock(int yBlock)
;  181	{
_getYBlock:
	CALL	__frameset0
;  182		return TILE_HEIGHT * TILEMAP_DRAW_HEIGHT * yBlock;
	LD	HL,(IX+6)
	LD	A,240
	CALL	__imul_b
;  183	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getYBlock ***************************
;Name                         Addr/Register   Size   Type
;yBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  184	
;  185	int main(void)
;  186	{
_main:
	LD	HL,-4
	CALL	__frameset
;  187		//initialization
;  188		player1Character = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  189		player1CharacterMoving1 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1Character),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  190		player1CharacterMoving2 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving1),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  191		player1CharacterNotGrounded = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving2),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  192		player1CharacterFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterNotGrounded),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  193		player1CharacterMoving1Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  194		player1CharacterMoving2Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving1Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  195		player1CharacterNotGroundedFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving2Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  196		
;  197		player1Weapon = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player1CharacterNotGroundedFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  198		player1WeaponFlipped = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player1Weapon),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  199		
;  200		player2Character = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1WeaponFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  201		player2CharacterMoving1 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2Character),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  202		player2CharacterMoving2 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving1),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  203		player2CharacterNotGrounded = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving2),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  204		player2CharacterFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterNotGrounded),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  205		player2CharacterMoving1Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  206		player2CharacterMoving2Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving1Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  207		player2CharacterNotGroundedFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving2Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  208		
;  209		player2Weapon = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player2CharacterNotGroundedFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  210		player2WeaponFlipped = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player2Weapon),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_player2WeaponFlipped),HL
;  211		
;  212		tilemap.map         = tilemap_map;
	LD	BC,_tilemap_map
	LD	(_tilemap),BC
;  213	    tilemap.tiles       = tileset_tiles;
	LD	BC,_tileset_tiles_data
	LD	(_tilemap+3),BC
;  214	    tilemap.type_width  = gfx_tile_16_pixel;
	LD	A,4
	LD	(_tilemap+10),A
;  215	    tilemap.type_height = gfx_tile_16_pixel;
	LD	(_tilemap+11),A
;  216	    tilemap.tile_height = TILE_HEIGHT;
	LD	A,16
	LD	(_tilemap+6),A
;  217	    tilemap.tile_width  = TILE_WIDTH;
	LD	(_tilemap+7),A
;  218	    tilemap.draw_height = TILEMAP_DRAW_HEIGHT;
	LD	A,15
	LD	(_tilemap+8),A
;  219	    tilemap.draw_width  = TILEMAP_DRAW_WIDTH;
	LD	A,20
	LD	(_tilemap+9),A
;  220	    tilemap.height      = TILEMAP_HEIGHT;
	LD	A,120
	LD	(_tilemap+12),A
;  221	    tilemap.width       = TILEMAP_WIDTH;
	LD	A,160
	LD	(_tilemap+13),A
;  222	    tilemap.y_loc       = Y_OFFSET;
	XOR	A,A
	LD	(_tilemap+14),A
;  223	    tilemap.x_loc       = X_OFFSET;
	LD	BC,0
	LD	(_tilemap+15),BC
;  224		
;  225		gfx_Begin();
	CALL	_gfx_Begin
;  226		
;  227		gfx_SetPalette(global_palette, sizeof_global_palette, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,262
	PUSH	BC
	LD	BC,_global_palette
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  228		gfx_SetTransparentColor(TRANSPARENT);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;  229	    gfx_SetColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  230		
;  231		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  232		
;  233		gfx_SetMonospaceFont(8);
	LD	BC,8
	PUSH	BC
	CALL	_gfx_SetMonospaceFont
	POP	BC
;  234		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  235	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  236		
;  237		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  238		gfx_PrintStringXY(version, 296, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,_version
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  239		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  240		
;  241		srand(rtc_Time());
	LD	BC,(15925316)
	PUSH	BC
	CALL	_srand
	POP	BC
;  242		
;  243		character0MoveSpeed = 4;
	LD	BC,4
	LD	(_character0MoveSpeed),BC
;  244		character0FallSpeed = 4;
	LD	(_character0FallSpeed),BC
;  245		character0JumpSpeed = 8;
	LD	BC,8
	LD	(_character0JumpSpeed),BC
;  246		character0JumpHeight = 10;
	LD	BC,10
	LD	(_character0JumpHeight),BC
;  247				
;  248		character0WeaponSpeed = 8;
	LD	BC,8
	LD	(_character0WeaponSpeed),BC
;  249		character0WeaponKnockback = 4;
	LD	BC,4
	LD	(_character0WeaponKnockback),BC
;  250		character0WeaponKnockbackStrength = 6;
	LD	BC,6
	LD	(_character0WeaponKnockbackStrength),BC
;  251		
;  252		character1MoveSpeed = 8;
	LD	BC,8
	LD	(_character1MoveSpeed),BC
;  253		character1FallSpeed = 4;
	LD	BC,4
	LD	(_character1FallSpeed),BC
;  254		character1JumpSpeed = 8;
	LD	BC,8
	LD	(_character1JumpSpeed),BC
;  255		character1JumpHeight = 15;
	LD	BC,15
	LD	(_character1JumpHeight),BC
;  256		
;  257		character1WeaponSpeed = 6;
	LD	BC,6
;  258		character1WeaponKnockback = 4;
;  259		character1WeaponKnockbackStrength = 4;
;  260		
;  261		delay(2000);
	LD	DE,2000
	PUSH	DE
	LD	(_character1WeaponSpeed),BC
	LD	BC,4
	LD	(_character1WeaponKnockback),BC
	LD	(_character1WeaponKnockbackStrength),BC
	CALL	_delay
	POP	BC
;  262		
;  263		//---------------------------------------------------------------
;  264		
;  265		//start screen
;  266		startScreen:
L_2:
;  267		
;  268		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  269		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  270	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  271		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  272		gfx_PrintStringXY("Press [2nd] to start...", 78, 200);
	LD	BC,200
	PUSH	BC
	LD	BC,78
	PUSH	BC
	LD	BC,L__2
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  273		gfx_PrintStringXY(version, 296, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,_version
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  274		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  275		while(os_GetCSC() != sk_2nd);
L_4:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_4
;  276		
;  277		//---------------------------------------------------------------
;  278		
;  279		//main menu
;  280		mainMenu:
L_5:
;  281		
;  282		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  283		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  284		while(selecting)
	JR	L_28
L_29:
;  285		{
;  286			gfx_Tilemap(&tilemap, getXBlock(1), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  287			gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  288			gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  289			
;  290			key = os_GetCSC();
	CALL	_os_GetCSC
;  291			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_17
;  292			{
;  293				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  294			}
;  295			else if(key == sk_Clear)
	JR	L_20
L_17:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_2
;  296			{
;  297				goto startScreen;
;  298			}
;  299			else if(key == sk_Up && selection != 0)
	LD	A,(_key)
	CP	A,4
	JR	NZ,L_13
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_13
;  300			{
;  301				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  302			}
;  303			else if(key == sk_Down && selection != 1)
	JR	L_20
L_13:
	LD	A,(_key)
	CP	A,1
	JR	NZ,L_20
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_20
;  304			{
;  305				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  306			}
L_20:
;  307			
;  308			if(selection == 0)
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_19
;  309			{
;  310				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  311			}
;  312			else
	JR	L_21
L_19:
;  313			{
;  314				gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  315			}
L_21:
;  316			gfx_PrintStringXY("Singleplayer", 112, 68);
	LD	BC,68
	PUSH	BC
	LD	BC,112
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  317			if(selection == -1)
	LD	BC,16777215
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_23
;  318			{
;  319				gfx_SetTextFGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  320			}
;  321			else
	JR	L_24
L_23:
;  322			{
;  323				gfx_SetTextFGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  324			}
L_24:
;  325			gfx_PrintStringXY("Multiplayer", 119, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,119
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  326			if(selection == 1)
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_26
;  327			{
;  328				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  329			}
;  330			else
	JR	L_27
L_26:
;  331			{
;  332				gfx_SetTextFGColor(BLACK);
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  333			}
L_27:
;  334			gfx_PrintStringXY("Quit game", 124, 132);
	LD	BC,132
	PUSH	BC
	LD	BC,124
	PUSH	BC
	LD	BC,L__15
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  335			gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  336			gfx_PrintStringXY("Star it on GitHub!", 90, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,90
	PUSH	BC
	LD	BC,L__16
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  337			
;  338			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  339		}
L_28:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_29
;  340		
;  341		switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__18:
	DW	2
	DB	0
	DW24	L_30	

	DB	1
	DW24	L_33	

	DW24	L_35	

;  342		{
;  343			case 0:
L_30:
;  344				players = 1;
	LD	BC,1
	LD	(_players),BC
;  345				goto mapSelector;
L_31:
;  346				break;
;  347			case 1:
;  348				goto quitGame;
;  349				break;
;  350		}
;  351		
;  352		goto error;
;  353		
;  354		//---------------------------------------------------------------
;  355		
;  356		//map selector
;  357		mapSelector:
;  358		
;  359		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  360		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  361		while(selecting)
	JR	L_53
L_54:
;  362		{
;  363			gfx_Tilemap(&tilemap, getXBlock(2), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,2
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  364			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  365			gfx_SetTextBGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  366			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  367			gfx_PrintStringXY("Select a map:", 62, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,L__19
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  368			
;  369			key = os_GetCSC();
	CALL	_os_GetCSC
;  370			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_47
;  371			{
;  372				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  373			}
;  374			else if(key == sk_Clear)
	JR	L_51
L_47:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_5
;  375			{
;  376				goto mainMenu;
;  377			}
;  378			else if(key == sk_Left && selection != 0)
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_43
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_43
;  379			{
;  380				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  381			}
;  382			else if(key == sk_Right && selection != 2)
	JR	L_51
L_43:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_51
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_51
;  383			{
;  384				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  385			}
L_51:
;  386			
;  387			switch(selection)
	LD	HL,(_selection)
	CALL	__seqcase
L__26:
	DW	3
	DW	0
	DB	0
	DW24	L_48	

	DW24	L_49	

	DW24	L_50	

	DW24	L_52	

;  388			{
;  389				case 0:
L_48:
;  390					gfx_TransparentSprite(mapHighlighter, 32, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  391					break;
	JR	L_52
;  392				case 1:
L_49:
;  393					gfx_TransparentSprite(mapHighlighter, 96, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  394					break;
	JR	L_52
;  395				case 2:
L_50:
;  396					gfx_TransparentSprite(mapHighlighter, 160, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,160
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  397					break;
;  398			}
L_52:
;  399			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  400		}
L_53:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_54
;  401		
;  402		if(selection == 2)  //random map
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_59
;  403		{
;  404			selection = random();
	CALL	_random
	LD	(_selection),HL
;  405			if(selection < 0.5)
	LD	BC,(_selection)
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,63
	CALL	__fcmp
	JP	P,L_56
;  406			{
;  407				selection = 0;
	LD	(_selection),BC
;  408			}
;  409			else
	JR	L_59
L_56:
;  410			{
;  411				selection = 1;
	LD	BC,1
	LD	(_selection),BC
;  412			}
;  413		}
L_59:
;  414		
;  415		map = selection;
	LD	BC,(_selection)
	LD	(_map),BC
;  416		mapAnimation = 0;
	LD	BC,0
	LD	(_mapAnimation),BC
;  417		switch(map)
	LD	HL,(_map)
	CALL	__case8
L__30:
	DW	2
	DB	0
	DW24	L_60	

	DB	1
	DW24	L_61	

	DW24	L_62	

;  418		{
;  419			case 0:
L_60:
;  420				mapXBlock1 = 3;
	LD	BC,3
	LD	(_mapXBlock1),BC
;  421				mapYBlock1 = 0;
	LD	BC,0
	LD	(_mapYBlock1),BC
;  422				break;
	JR	L_62
;  423			case 1:
L_61:
;  424				mapAnimation = 2;
	LD	BC,2
	LD	(_mapAnimation),BC
;  425				mapAnimationSpeed = 25;
	LD	BC,25
	LD	(_mapAnimationSpeed),BC
;  426				mapXBlock1 = 4;
	LD	BC,4
	LD	(_mapXBlock1),BC
;  427				mapYBlock1 = 0;
	LD	BC,0
	LD	(_mapYBlock1),BC
;  428				mapXBlock2 = 5;
	LD	BC,5
	LD	(_mapXBlock2),BC
;  429				mapYBlock2 = 0;
	LD	BC,0
	LD	(_mapYBlock2),BC
;  430				mapXBlock3 = 6;
	LD	BC,6
	LD	(_mapXBlock3),BC
;  431				mapYBlock3 = 0;
	LD	BC,0
	LD	(_mapYBlock3),BC
;  432				break;
;  433		}
;  434		
;  435		goto characterSelector;
L_62:
;  436		
;  437		//---------------------------------------------------------------
;  438		
;  439		//character selector
;  440		characterSelector:
;  441		
;  442		//player 1
;  443		selection = 0;
	LD	(_selection),BC
;  444		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  445		
;  446		while(selecting)
	JR	L_86
L_87:
;  447		{
;  448			gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  449			gfx_SetColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  450			gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  451			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  452			gfx_SetTextBGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  453			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  454			gfx_PrintStringXY("Select character 1:", 10, 76);
	LD	BC,76
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__31
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  455			gfx_TransparentSprite(characterHighlighter, 138, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,138
	PUSH	BC
	LD	BC,_characterHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  456			
;  457			key = os_GetCSC();
	CALL	_os_GetCSC
;  458			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_80
;  459			{
;  460				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  461			}
;  462			else if(key == sk_Clear)
	JR	L_84
L_80:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_31
;  463			{
;  464				goto mapSelector;
;  465			}
;  466			else if(key == sk_Left && selection != 0)
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_76
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_76
;  467			{
;  468				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  469			}
;  470			else if(key == sk_Left && selection == 0)
	JR	L_84
L_76:
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_74
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_74
;  471			{
;  472				selection = 2;
	LD	BC,2
	LD	(_selection),BC
;  473			}
;  474			else if(key == sk_Right && selection != 2)
	JR	L_84
L_74:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_72
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_72
;  475			{
;  476				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  477			}
;  478			else if(key == sk_Right && selection == 2)
	JR	L_84
L_72:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_84
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_84
;  479			{
;  480				selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  481			}
L_84:
;  482			
;  483			switch(selection)
	LD	HL,(_selection)
	CALL	__seqcase
L__42:
	DW	3
	DW	0
	DB	0
	DW24	L_81	

	DW24	L_82	

	DW24	L_83	

	DW24	L_85	

;  484			{
;  485				case 0:
L_81:
;  486					gfx_TransparentSprite(randomCharacter, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_randomCharacter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  487					gfx_TransparentSprite(character0, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  488					gfx_TransparentSprite(character1, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  489					break;
	JR	L_85
;  490				case 1:
L_82:
;  491					gfx_TransparentSprite(character0, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  492					gfx_TransparentSprite(character1, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  493					gfx_TransparentSprite(randomCharacter, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_randomCharacter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  494					break;
	JR	L_85
;  495				case 2:
L_83:
;  496					gfx_TransparentSprite(character1, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  497					gfx_TransparentSprite(randomCharacter, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_randomCharacter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  498					gfx_TransparentSprite(character0, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  499					break;
;  500			}
L_85:
;  501			
;  502			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  503		}
L_86:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_87
;  504		
;  505		if(selection == 2)  //random character
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_92
;  506		{
;  507			selection = random();
	CALL	_random
	LD	(_selection),HL
;  508			if(selection < 0.5)
	LD	BC,(_selection)
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,63
	CALL	__fcmp
	JP	P,L_89
;  509			{
;  510				selection = 0;
	LD	(_selection),BC
;  511			}
;  512			else
	JR	L_92
L_89:
;  513			{
;  514				selection = 1;
	LD	BC,1
	LD	(_selection),BC
;  515			}
;  516		}
L_92:
;  517		
;  518		player1CharacterSelection = selection;
	LD	BC,(_selection)
	LD	(_player1CharacterSelection),BC
;  519		
;  520		//player 2
;  521		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  522		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  523		
;  524		while(selecting)
	JR	L_115
L_116:
;  525		{
;  526			gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  527			gfx_SetColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  528			gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  529			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  530			gfx_SetTextBGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  531			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  532			gfx_PrintStringXY("Select character 2:", 10, 76);
	LD	BC,76
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__46
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  533			gfx_TransparentSprite(characterHighlighter, 138, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,138
	PUSH	BC
	LD	BC,_characterHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  534			
;  535			key = os_GetCSC();
	CALL	_os_GetCSC
;  536			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_109
;  537			{
;  538				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  539			}
;  540			else if(key == sk_Clear)
	JR	L_113
L_109:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_31
;  541			{
;  542				goto mapSelector;
;  543			}
;  544			else if(key == sk_Left && selection != 0)
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_105
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_105
;  545			{
;  546				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  547			}
;  548			else if(key == sk_Left && selection == 0)
	JR	L_113
L_105:
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_103
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_103
;  549			{
;  550				selection = 2;
	LD	BC,2
	LD	(_selection),BC
;  551			}
;  552			else if(key == sk_Right && selection != 2)
	JR	L_113
L_103:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_101
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_101
;  553			{
;  554				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  555			}
;  556			else if(key == sk_Right && selection == 2)
	JR	L_113
L_101:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_113
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_113
;  557			{
;  558				selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  559			}
L_113:
;  560			
;  561			switch(selection)
	LD	HL,(_selection)
	CALL	__seqcase
L__57:
	DW	3
	DW	0
	DB	0
	DW24	L_110	

	DW24	L_111	

	DW24	L_112	

	DW24	L_114	

;  562			{
;  563				case 0:
L_110:
;  564					gfx_TransparentSprite(randomCharacter, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_randomCharacter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  565					gfx_TransparentSprite(character0, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  566					gfx_TransparentSprite(character1, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  567					break;
	JR	L_114
;  568				case 1:
L_111:
;  569					gfx_TransparentSprite(character0, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  570					gfx_TransparentSprite(character1, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  571					gfx_TransparentSprite(randomCharacter, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_randomCharacter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  572					break;
	JR	L_114
;  573				case 2:
L_112:
;  574					gfx_TransparentSprite(character1, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  575					gfx_TransparentSprite(randomCharacter, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_randomCharacter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  576					gfx_TransparentSprite(character0, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  577					break;
;  578			}
L_114:
;  579			
;  580			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  581		}
L_115:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_116
;  582		
;  583		if(selection == 2)  //random character
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_121
;  584		{
;  585			selection = random();
	CALL	_random
	LD	(_selection),HL
;  586			if(selection < 0.5)
	LD	BC,(_selection)
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,63
	CALL	__fcmp
	JP	P,L_118
;  587			{
;  588				selection = 0;
	LD	(_selection),BC
;  589			}
;  590			else
	JR	L_121
L_118:
;  591			{
;  592				selection = 1;
	LD	BC,1
	LD	(_selection),BC
;  593			}
;  594		}
L_121:
;  595		
;  596		player2CharacterSelection = selection;
	LD	BC,(_selection)
	LD	(_player2CharacterSelection),BC
;  597		
;  598		goto prepareFight;
;  599		
;  600		//---------------------------------------------------------------
;  601		
;  602		//prepareFight
;  603		prepareFight:
;  604		
;  605		mapAnimationCount = 0;
	LD	BC,0
	LD	(_mapAnimationCount),BC
;  606		mapAnimationState = 0;
	LD	(_mapAnimationState),BC
;  607		
;  608		player1Flipped = 0;
	LD	(_player1Flipped),BC
;  609		player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
;  610		player1Jumping = 0;
	LD	(_player1Jumping),BC
;  611		player1Grounded = 1;
	LD	BC,1
	LD	(_player1Grounded),BC
;  612		player1ShieldActive = 0;
	LD	BC,0
	LD	(_player1ShieldActive),BC
;  613		player1Lifes = 3;
	LD	BC,3
	LD	(_player1Lifes),BC
;  614		
;  615		player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
;  616		player1Weapon2 = 0;
	LD	(_player1Weapon2),BC
;  617		player1Weapon3 = 0;
	LD	(_player1Weapon3),BC
;  618		
;  619		player2Flipped = 1;
	LD	BC,1
	LD	(_player2Flipped),BC
;  620		player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
;  621		player2Jumping = 0;
	LD	(_player2Jumping),BC
;  622		player2Grounded = 1;
	LD	BC,1
	LD	(_player2Grounded),BC
;  623		player2ShieldActive = 0;
	LD	BC,0
	LD	(_player2ShieldActive),BC
;  624		player2Lifes = 3;
	LD	BC,3
	LD	(_player2Lifes),BC
;  625		
;  626		player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
;  627		player2Weapon2 = 0;
	LD	(_player2Weapon2),BC
;  628		player2Weapon3 = 0;
	LD	(_player2Weapon3),BC
;  629		
;  630		if(players == 1)
	LD	HL,(_players)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_125
;  631		{
;  632			player2IsAi = 1;
	LD	(_player2IsAi),BC
;  633		}
;  634		else if(players == 2)
	JR	L_128
L_125:
	LD	BC,2
	LD	HL,(_players)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_128
;  635		{
;  636			player2IsAi = 0;
	LD	BC,0
	LD	(_player2IsAi),BC
;  637		}
L_128:
;  638		switch(map)
	LD	HL,(_map)
	CALL	__case8
L__63:
	DW	2
	DB	0
	DW24	L_126	

	DB	1
	DW24	L_127	

	DW24	L_129	

;  639		{
;  640			case 0:
L_126:
;  641				player1SpawnX = 80;
	LD	BC,80
	LD	(_player1SpawnX),BC
;  642				player1SpawnY = 132;
	LD	BC,132
	LD	(_player1SpawnY),BC
;  643				
;  644				player2SpawnX = 220;
	LD	BC,220
	LD	(_player2SpawnX),BC
;  645				player2SpawnY = 132;
	LD	BC,132
	LD	(_player2SpawnY),BC
;  646				break;
	JR	L_129
;  647			case 1:
L_127:
;  648				player1SpawnX = 32;
	LD	BC,32
	LD	(_player1SpawnX),BC
;  649				player1SpawnY = 96;
	LD	BC,96
	LD	(_player1SpawnY),BC
;  650				
;  651				player2SpawnX = 256;
	LD	BC,256
	LD	(_player2SpawnX),BC
;  652				player2SpawnY = 96;
	LD	BC,96
	LD	(_player2SpawnY),BC
;  653				break;
;  654		}
L_129:
;  655		player1X = player1SpawnX;
	LD	BC,(_player1SpawnX)
	LD	(_player1X),BC
;  656		player1Y = player1SpawnY;
	LD	BC,(_player1SpawnY)
	LD	(_player1Y),BC
;  657		player2X = player2SpawnX;
	LD	BC,(_player2SpawnX)
	LD	(_player2X),BC
;  658		player2Y = player2SpawnY;
	LD	BC,(_player2SpawnY)
	LD	(_player2Y),BC
;  659		
;  660		switch(player1CharacterSelection)
	LD	HL,(_player1CharacterSelection)
	CALL	__case8
L__64:
	DW	2
	DB	0
	DW24	L_130	

	DB	1
	DW24	L_131	

	DW24	L_134	

;  661		{
;  662			case 0:
L_130:
;  663				player1Character = character0;
	LD	BC,_character0_data
	LD	(_player1Character),BC
;  664				player1CharacterMoving1 = character0Moving1;
	LD	BC,_character0Moving1_data
	LD	(_player1CharacterMoving1),BC
;  665				player1CharacterMoving2 = character0Moving2;
	LD	BC,_character0Moving2_data
	LD	(_player1CharacterMoving2),BC
;  666				player1CharacterNotGrounded = character0NotGrounded;
	LD	BC,_character0NotGrounded_data
	LD	(_player1CharacterNotGrounded),BC
;  667				gfx_FlipSpriteY(character0, player1CharacterFlipped);
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  668				gfx_FlipSpriteY(character0Moving1, player1CharacterMoving1Flipped);
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character0Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  669				gfx_FlipSpriteY(character0Moving2, player1CharacterMoving2Flipped);
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character0Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  670				gfx_FlipSpriteY(character0NotGrounded, player1CharacterNotGroundedFlipped);
	LD	BC,(_player1CharacterNotGroundedFlipped)
	PUSH	BC
	LD	BC,_character0NotGrounded_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  671				
;  672				player1Weapon = character0Weapon;
	LD	BC,_character0Weapon_data
	LD	(_player1Weapon),BC
;  673				gfx_FlipSpriteY(character0Weapon, player1WeaponFlipped);
	LD	BC,(_player1WeaponFlipped)
	PUSH	BC
	LD	BC,_character0Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  674				
;  675				player1MoveSpeed = character0MoveSpeed;
	LD	BC,(_character0MoveSpeed)
	LD	(_player1MoveSpeed),BC
;  676				player1FallSpeed = character0FallSpeed;
	LD	BC,(_character0FallSpeed)
	LD	(_player1FallSpeed),BC
;  677				player1JumpSpeed = character0JumpSpeed;
	LD	BC,(_character0JumpSpeed)
	LD	(_player1JumpSpeed),BC
;  678				player1JumpHeight = character0JumpHeight;
	LD	BC,(_character0JumpHeight)
	LD	(_player1JumpHeight),BC
;  679				
;  680				player1WeaponSpeed = character0WeaponSpeed;
	LD	BC,(_character0WeaponSpeed)
	LD	(_player1WeaponSpeed),BC
;  681				player1WeaponKnockback = character0WeaponKnockback;
	LD	BC,(_character0WeaponKnockback)
	LD	(_player1WeaponKnockback),BC
;  682				player1WeaponKnockbackStrength = character0WeaponKnockbackStrength;
	LD	BC,(_character0WeaponKnockbackStrength)
	LD	(_player1WeaponKnockbackStrength),BC
;  683				break;
	JR	L_134
;  684			case 1:
L_131:
;  685				player1Character = character1;
	LD	BC,_character1_data
	LD	(_player1Character),BC
;  686				player1CharacterMoving1 = character1Moving1;
	LD	BC,_character1Moving1_data
	LD	(_player1CharacterMoving1),BC
;  687				player1CharacterMoving2 = character1Moving2;
	LD	BC,_character1Moving2_data
	LD	(_player1CharacterMoving2),BC
;  688				player1CharacterNotGrounded = character1NotGrounded;
	LD	BC,_character1NotGrounded_data
	LD	(_player1CharacterNotGrounded),BC
;  689				gfx_FlipSpriteY(character1, player1CharacterFlipped);
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  690				gfx_FlipSpriteY(character1Moving1, player1CharacterMoving1Flipped);
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character1Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  691				gfx_FlipSpriteY(character1Moving2, player1CharacterMoving2Flipped);
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character1Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  692				gfx_FlipSpriteY(character1NotGrounded, player1CharacterNotGroundedFlipped);
	LD	BC,(_player1CharacterNotGroundedFlipped)
	PUSH	BC
	LD	BC,_character1NotGrounded_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  693				
;  694				player1Weapon = character1Weapon;
	LD	BC,_character1Weapon_data
	LD	(_player1Weapon),BC
;  695				gfx_FlipSpriteY(character1Weapon, player1WeaponFlipped);
	LD	BC,(_player1WeaponFlipped)
	PUSH	BC
	LD	BC,_character1Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  696				
;  697				player1MoveSpeed = character1MoveSpeed;
	LD	BC,(_character1MoveSpeed)
	LD	(_player1MoveSpeed),BC
;  698				player1FallSpeed = character1FallSpeed;
	LD	BC,(_character1FallSpeed)
	LD	(_player1FallSpeed),BC
;  699				player1JumpSpeed = character1JumpSpeed;
	LD	BC,(_character1JumpSpeed)
	LD	(_player1JumpSpeed),BC
;  700				player1JumpHeight = character1JumpHeight;
	LD	BC,(_character1JumpHeight)
	LD	(_player1JumpHeight),BC
;  701				
;  702				player1WeaponSpeed = character1WeaponSpeed;
	LD	BC,(_character1WeaponSpeed)
	LD	(_player1WeaponSpeed),BC
;  703				player1WeaponKnockback = character1WeaponKnockback;
	LD	BC,(_character1WeaponKnockback)
	LD	(_player1WeaponKnockback),BC
;  704				player1WeaponKnockbackStrength = character1WeaponKnockbackStrength;
	LD	BC,(_character1WeaponKnockbackStrength)
	LD	(_player1WeaponKnockbackStrength),BC
;  705				break;
;  706		}
L_134:
;  707		switch(player2CharacterSelection)
	LD	HL,(_player2CharacterSelection)
	CALL	__case8
L__65:
	DW	2
	DB	0
	DW24	L_132	

	DB	1
	DW24	L_133	

	DW24	L_135	

;  708		{
;  709			case 0:
L_132:
;  710				player2Character = character0;
	LD	BC,_character0_data
	LD	(_player2Character),BC
;  711				player2CharacterMoving1 = character0Moving1;
	LD	BC,_character0Moving1_data
	LD	(_player2CharacterMoving1),BC
;  712				player2CharacterMoving2 = character0Moving2;
	LD	BC,_character0Moving2_data
	LD	(_player2CharacterMoving2),BC
;  713				player2CharacterNotGrounded = character0NotGrounded;
	LD	BC,_character0NotGrounded_data
	LD	(_player2CharacterNotGrounded),BC
;  714				gfx_FlipSpriteY(character0, player2CharacterFlipped);
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  715				gfx_FlipSpriteY(character0Moving1, player2CharacterMoving1Flipped);
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character0Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  716				gfx_FlipSpriteY(character0Moving2, player2CharacterMoving2Flipped);
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character0Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  717				gfx_FlipSpriteY(character0NotGrounded, player2CharacterNotGroundedFlipped);
	LD	BC,(_player2CharacterNotGroundedFlipped)
	PUSH	BC
	LD	BC,_character0NotGrounded_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  718				
;  719				player2Weapon = character0Weapon;
	LD	BC,_character0Weapon_data
	LD	(_player2Weapon),BC
;  720				gfx_FlipSpriteY(character0Weapon, player2WeaponFlipped);
	LD	BC,(_player2WeaponFlipped)
	PUSH	BC
	LD	BC,_character0Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  721				
;  722				player2MoveSpeed = character0MoveSpeed;
	LD	BC,(_character0MoveSpeed)
	LD	(_player2MoveSpeed),BC
;  723				player2FallSpeed = character0FallSpeed;
	LD	BC,(_character0FallSpeed)
	LD	(_player2FallSpeed),BC
;  724				player2JumpSpeed = character0JumpSpeed;
	LD	BC,(_character0JumpSpeed)
	LD	(_player2JumpSpeed),BC
;  725				player2JumpHeight = character0JumpHeight;
	LD	BC,(_character0JumpHeight)
	LD	(_player2JumpHeight),BC
;  726				
;  727				player2WeaponSpeed = character0WeaponSpeed;
	LD	BC,(_character0WeaponSpeed)
	LD	(_player2WeaponSpeed),BC
;  728				player2WeaponKnockback = character0WeaponKnockback;
	LD	BC,(_character0WeaponKnockback)
	LD	(_player2WeaponKnockback),BC
;  729				player2WeaponKnockbackStrength = character0WeaponKnockbackStrength;
	LD	BC,(_character0WeaponKnockbackStrength)
	LD	(_player2WeaponKnockbackStrength),BC
;  730				break;
	JR	L_135
;  731			case 1:
L_133:
;  732				player2Character = character1;
	LD	BC,_character1_data
	LD	(_player2Character),BC
;  733				player2CharacterMoving1 = character1Moving1;
	LD	BC,_character1Moving1_data
	LD	(_player2CharacterMoving1),BC
;  734				player2CharacterMoving2 = character1Moving2;
	LD	BC,_character1Moving2_data
	LD	(_player2CharacterMoving2),BC
;  735				player2CharacterNotGrounded = character1NotGrounded;
	LD	BC,_character1NotGrounded_data
	LD	(_player2CharacterNotGrounded),BC
;  736				gfx_FlipSpriteY(character1, player2CharacterFlipped);
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  737				gfx_FlipSpriteY(character1Moving1, player2CharacterMoving1Flipped);
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character1Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  738				gfx_FlipSpriteY(character1Moving2, player2CharacterMoving2Flipped);
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character1Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  739				gfx_FlipSpriteY(character1NotGrounded, player2CharacterNotGroundedFlipped);
	LD	BC,(_player2CharacterNotGroundedFlipped)
	PUSH	BC
	LD	BC,_character1NotGrounded_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  740				
;  741				player2Weapon = character1Weapon;
	LD	BC,_character1Weapon_data
	LD	(_player2Weapon),BC
;  742				gfx_FlipSpriteY(character1Weapon, player2WeaponFlipped);
	LD	BC,(_player2WeaponFlipped)
	PUSH	BC
	LD	BC,_character1Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  743				
;  744				player2MoveSpeed = character1MoveSpeed;
	LD	BC,(_character1MoveSpeed)
	LD	(_player2MoveSpeed),BC
;  745				player2FallSpeed = character1FallSpeed;
	LD	BC,(_character1FallSpeed)
	LD	(_player2FallSpeed),BC
;  746				player2JumpSpeed = character1JumpSpeed;
	LD	BC,(_character1JumpSpeed)
	LD	(_player2JumpSpeed),BC
;  747				player2JumpHeight = character1JumpHeight;
	LD	BC,(_character1JumpHeight)
	LD	(_player2JumpHeight),BC
;  748				
;  749				player2WeaponSpeed = character1WeaponSpeed;
	LD	BC,(_character1WeaponSpeed)
	LD	(_player2WeaponSpeed),BC
;  750				player2WeaponKnockback = character1WeaponKnockback;
	LD	BC,(_character1WeaponKnockback)
	LD	(_player2WeaponKnockback),BC
;  751				player2WeaponKnockbackStrength = character1WeaponKnockbackStrength;
	LD	BC,(_character1WeaponKnockbackStrength)
	LD	(_player2WeaponKnockbackStrength),BC
;  752				break;
;  753		}
L_135:
;  754		
;  755		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  756		gfx_TransparentSprite(counter3, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  757		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  758		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  759		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  760		gfx_TransparentSprite(counter2, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  761		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  762		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  763		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  764		gfx_TransparentSprite(counter1, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  765		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  766		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  767		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  768		gfx_TransparentSprite(counterFight, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counterFight_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  769		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  770		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  771		
;  772		goto fight;
L_136:
;  773		
;  774		//---------------------------------------------------------------
;  775		
;  776		//fight
;  777		fight:
;  778		
;  779		gfx_TransparentSprite(statusUi, 128, 208);
	LD	BC,208
	PUSH	BC
	LD	BC,128
	PUSH	BC
	LD	BC,_statusUi_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  780		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  781		gfx_SetTextBGColor(gfx_GetPixel(150, 224));
	LD	BC,224
	PUSH	BC
	LD	BC,150
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  782		
;  783		while(1)
L_498:
;  784		{
;  785			//fight - animate map
;  786			if(mapAnimation > 0)
	LD	BC,(_mapAnimation)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_143
;  787			{
;  788				mapAnimationCount++;
	LD	BC,(_mapAnimationCount)
	INC	BC
	LD	(_mapAnimationCount),BC
;  789			}
L_143:
;  790			
;  791			if(mapAnimationCount == mapAnimationSpeed)
	LD	BC,(_mapAnimationSpeed)
	LD	HL,(_mapAnimationCount)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_150
;  792			{
;  793				mapAnimationCount = 0;
	LD	BC,0
	LD	(_mapAnimationCount),BC
;  794				if(mapAnimationState < mapAnimation)
	LD	BC,(_mapAnimation)
	LD	HL,(_mapAnimationState)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_141
;  795				{
;  796					mapAnimationState++;
	LD	BC,(_mapAnimationState)
	INC	BC
	LD	(_mapAnimationState),BC
;  797				}
;  798				else
	JR	L_150
L_141:
;  799				{
;  800					mapAnimationState = 0;
	LD	BC,0
	LD	(_mapAnimationState),BC
;  801				}
;  802			}
L_150:
;  803			
;  804			//fight - draw map
;  805			if(mapAnimationState == 0)
	LD	HL,(_mapAnimationState)
	CALL	__icmpzero
	JR	NZ,L_149
;  806			{
;  807				gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  808			}
;  809			else if(mapAnimationState == 1 || mapAnimationState == 3)
	JR	L_151
L_149:
	LD	BC,1
	LD	HL,(_mapAnimationState)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_146
	LD	BC,3
	LD	HL,(_mapAnimationState)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_147
L_146:
;  810			{
;  811				gfx_Tilemap(&tilemap, getXBlock(mapXBlock2), getYBlock(mapYBlock2));
	LD	BC,(_mapYBlock2)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock2)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  812			}
;  813			else if(mapAnimationState == 2)
	JR	L_151
L_147:
	LD	BC,2
	LD	HL,(_mapAnimationState)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_151
;  814			{
;  815				gfx_Tilemap(&tilemap, getXBlock(mapXBlock3), getYBlock(mapYBlock3));
	LD	BC,(_mapYBlock3)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock3)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  816			}
L_151:
;  817			
;  818			//fight - get keys (player 1)
;  819			key = os_GetCSC();
	CALL	_os_GetCSC
;  820			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_169
;  821			{
;  822				if(player1Grounded == 1)
	LD	BC,1
	LD	HL,(_player1Grounded)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_169
;  823				{
;  824					player1Jumping = player1JumpHeight;
	LD	BC,(_player1JumpHeight)
	LD	(_player1Jumping),BC
;  825				}
;  826			}
L_169:
;  827			if(key == sk_Alpha)
	LD	A,(_key)
	CP	A,48
	JR	NZ,L_172
;  828			{
;  829				if(player1Weapon1 == 0)
	LD	HL,(_player1Weapon1)
	CALL	__icmpzero
	JR	NZ,L_167
;  830				{
;  831					player1Weapon1 = 1;
	LD	BC,1
	LD	(_player1Weapon1),BC
;  832					player1Weapon1Flipped = player1Flipped;
	LD	BC,(_player1Flipped)
	LD	(_player1Weapon1Flipped),BC
;  833					if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_155
;  834					{
;  835						player1Weapon1X = player1X + 26;
	LD	IY,(_player1X)
	LEA	BC,IY+26
	LD	(_player1Weapon1X),BC
;  836					}
;  837					else
	JR	L_156
L_155:
;  838					{
;  839						player1Weapon1X = player1X;
	LD	BC,(_player1X)
	LD	(_player1Weapon1X),BC
;  840					}
L_156:
;  841					player1Weapon1Y = player1Y + 17;
	LD	IY,(_player1Y)
	LEA	BC,IY+17
	LD	(_player1Weapon1Y),BC
;  842				}
;  843				else if(player1Weapon2 == 0)
	JR	L_172
L_167:
	LD	HL,(_player1Weapon2)
	CALL	__icmpzero
	JR	NZ,L_165
;  844				{
;  845					player1Weapon2 = 1;
	LD	BC,1
	LD	(_player1Weapon2),BC
;  846					player1Weapon2Flipped = player1Flipped;
	LD	BC,(_player1Flipped)
	LD	(_player1Weapon2Flipped),BC
;  847					if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_158
;  848					{
;  849						player1Weapon2X = player1X + 26;
	LD	IY,(_player1X)
	LEA	BC,IY+26
	LD	(_player1Weapon2X),BC
;  850					}
;  851					else
	JR	L_159
L_158:
;  852					{
;  853						player1Weapon2X = player1X;
	LD	BC,(_player1X)
	LD	(_player1Weapon2X),BC
;  854					}
L_159:
;  855					player1Weapon2Y = player1Y + 17;
	LD	IY,(_player1Y)
	LEA	BC,IY+17
	LD	(_player1Weapon2Y),BC
;  856				}
;  857				else if(player1Weapon3 == 0)
	JR	L_172
L_165:
	LD	HL,(_player1Weapon3)
	CALL	__icmpzero
	JR	NZ,L_172
;  858				{
;  859					player1Weapon3 = 1;
	LD	BC,1
	LD	(_player1Weapon3),BC
;  860					player1Weapon3Flipped = player1Flipped;
	LD	BC,(_player1Flipped)
	LD	(_player1Weapon3Flipped),BC
;  861					if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_161
;  862					{
;  863						player1Weapon3X = player1X + 26;
	LD	IY,(_player1X)
	LEA	BC,IY+26
	LD	(_player1Weapon3X),BC
;  864					}
;  865					else
	JR	L_162
L_161:
;  866					{
;  867						player1Weapon3X = player1X;
	LD	BC,(_player1X)
	LD	(_player1Weapon3X),BC
;  868					}
L_162:
;  869					player1Weapon3Y = player1Y + 17;
	LD	IY,(_player1Y)
	LEA	BC,IY+17
	LD	(_player1Weapon3Y),BC
;  870				}
;  871			}
L_172:
;  872			if(key == sk_Clear)
	LD	A,(_key)
	CP	A,15
	JR	Z,L_170
;  873			{
;  874				goto pause;
;  875			}
;  876			
;  877			kb_Scan();
	CALL	_kb_Scan
;  878	        key = kb_Data[7];
	LD	A,(16056350)
	LD	(_key),A
;  879			if(key & kb_Up)
	AND	A,8
	JR	Z,L_181
;  880			{
;  881				if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_181
;  882				{
;  883					player1Y -= 4;
	LD	IY,(_player1Y)
	LEA	BC,IY+-4
	LD	(_player1Y),BC
;  884				}
;  885			}
L_181:
;  886			if(key & kb_Down)
	LD	A,(_key)
	AND	A,1
	JR	Z,L_180
;  887			{
;  888				if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_177
;  889				{
;  890					player1Y += 4;
	LD	IY,(_player1Y)
	LEA	BC,IY+4
	LD	(_player1Y),BC
;  891				}
L_177:
;  892				player1Jumping = 0;
	LD	BC,0
	LD	(_player1Jumping),BC
;  893				if(player1Grounded == 1)
	LD	HL,(_player1Grounded)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_192
;  894				{
;  895					player1ShieldActive = 1;
	LD	(_player1ShieldActive),BC
;  896				}
;  897			}
;  898			else
	JR	L_192
L_180:
;  899			{
;  900				player1ShieldActive = 0;
	LD	BC,0
	LD	(_player1ShieldActive),BC
;  901			}
L_192:
;  902			if(key & kb_Left && player1ShieldActive == 0)
	LD	A,(_key)
	AND	A,2
	JR	Z,L_203
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_203
;  903			{
;  904				player1X -= player1MoveSpeed;
	LD	HL,(_player1X)
	LD	BC,(_player1MoveSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1X),HL
;  905				if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_185
;  906				{
;  907					player1Flipped = 1;
	LD	BC,1
	LD	(_player1Flipped),BC
;  908					player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  909					player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
;  910				}
L_185:
;  911				player1MoveAnimationCount++;
	LD	BC,(_player1MoveAnimationCount)
	INC	BC
	LD	(_player1MoveAnimationCount),BC
;  912				if(player1MoveAnimationCount == 3)
	LD	HL,(_player1MoveAnimationCount)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_203
;  913				{
;  914					if(player1MoveAnimation != 3)
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_188
;  915					{
;  916						player1MoveAnimation++;
	LD	BC,(_player1MoveAnimation)
	INC	BC
	LD	(_player1MoveAnimation),BC
;  917					}
;  918					else
	JR	L_189
L_188:
;  919					{
;  920						player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  921					}
L_189:
;  922					player1MoveAnimationCount = 0;
	LD	BC,0
	LD	(_player1MoveAnimationCount),BC
;  923				}
;  924			}
L_203:
;  925			if(key & kb_Right && player1ShieldActive == 0)
	LD	A,(_key)
	AND	A,4
	JR	Z,L_261
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_261
;  926			{
;  927				player1X += player1MoveSpeed;
	LD	BC,(_player1MoveSpeed)
	LD	HL,(_player1X)
	ADD	HL,BC
	LD	(_player1X),HL
;  928				if(player1Flipped == 1)
	LD	HL,(_player1Flipped)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_196
;  929				{
;  930					player1Flipped = 0;
	LD	BC,0
	LD	(_player1Flipped),BC
;  931					player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
;  932					player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
;  933				}
L_196:
;  934				player1MoveAnimationCount++;
	LD	BC,(_player1MoveAnimationCount)
	INC	BC
	LD	(_player1MoveAnimationCount),BC
;  935				if(player1MoveAnimationCount == 3)
	LD	HL,(_player1MoveAnimationCount)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_261
;  936				{
;  937					if(player1MoveAnimation != 3)
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_199
;  938					{
;  939						player1MoveAnimation++;
	LD	BC,(_player1MoveAnimation)
	INC	BC
	LD	(_player1MoveAnimation),BC
;  940					}
;  941					else
	JR	L_200
L_199:
;  942					{
;  943						player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  944					}
L_200:
;  945					player1MoveAnimationCount = 0;
	LD	BC,0
	LD	(_player1MoveAnimationCount),BC
;  946				}
;  947			}
L_261:
;  948			
;  949			//fight - check for grounded and death
;  950			for(player = 1; player < 3; ++player)
	LD	BC,1
	LD	(_player),BC
	JR	L_260
L_258:
;  951			{
;  952				switch(player)
	LD	HL,(_player)
	CALL	__case8
L__98:
	DW	2
	DB	1
	DW24	L_204	

	DB	2
	DW24	L_205	

	DW24	L_206	

;  953				{
;  954					case 1:
L_204:
;  955						playerX = player1X;
	LD	BC,(_player1X)
	LD	(_playerX),BC
;  956						playerY = player1Y;
	LD	BC,(_player1Y)
	LD	(_playerY),BC
;  957						break;
	JR	L_206
;  958					case 2:
L_205:
;  959						playerX = player2X;
	LD	BC,(_player2X)
	LD	(_playerX),BC
;  960						playerY = player2Y;
	LD	BC,(_player2Y)
	LD	(_playerY),BC
;  961						break;
;  962				}
L_206:
;  963				
;  964				playerGrounded = 0;
	LD	BC,0
	LD	(_playerGrounded),BC
;  965				playerDeath = 0;
	LD	(_playerDeath),BC
;  966				
;  967				if(map == 0)
	LD	HL,(_map)
	CALL	__icmpzero
	JR	NZ,L_243
;  968				{
;  969					if(playerX >= 24 && playerX <= 264 && playerY == 132)
	LD	BC,24
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	JP	M,L_223
	LD	BC,(_playerX)
	LD	HL,264
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_223
	LD	BC,132
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_223
;  970					{
;  971						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  972					}
;  973					else if(playerX >= 72 && playerX <= 216 && playerY == 64)
	JR	L_246
L_223:
	LD	BC,72
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_221
	LD	BC,(_playerX)
	LD	HL,216
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_221
	LD	BC,64
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_221
;  974					{
;  975						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  976					}
;  977					else if(playerX >= -8 && playerX <= 40 && playerY == 40)
	JR	L_246
L_221:
	LD	BC,16777208
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_219
	LD	BC,(_playerX)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_219
	LD	BC,40
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_219
;  978					{
;  979						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  980					}
;  981					else if(playerX >= 248 && playerX <= 296 && playerY == 40)
	JR	L_246
L_219:
	LD	BC,248
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_217
	LD	BC,(_playerX)
	LD	HL,296
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_217
	LD	BC,40
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_217
;  982					{
;  983						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  984					}
;  985					else if(playerY >= 240)
	JR	L_246
L_217:
	LD	BC,240
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_246
;  986					{
;  987						playerDeath = 1;
	LD	BC,1
	LD	(_playerDeath),BC
;  988					}
;  989				}
;  990				else if(map == 1)
	JR	L_246
L_243:
	LD	BC,1
	LD	HL,(_map)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_246
;  991				{
;  992					if(playerX >= -8 && playerX <= 56 && playerY == 96)
	LD	BC,16777208
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_240
	LD	BC,(_playerX)
	LD	HL,56
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_240
	LD	BC,96
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_240
;  993					{
;  994						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  995					}
;  996					else if(playerX >= 232 && playerX <= 296 && playerY == 96)
	JR	L_246
L_240:
	LD	BC,232
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_238
	LD	BC,(_playerX)
	LD	HL,296
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_238
	LD	BC,96
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_238
;  997					{
;  998						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  999					}
; 1000					else if(playerX >= 88 && playerX <= 200 && playerY == 80)
	JR	L_246
L_238:
	LD	BC,88
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_236
	LD	BC,(_playerX)
	LD	HL,200
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_236
	LD	BC,80
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_236
; 1001					{
; 1002						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
; 1003					}
; 1004					else if(playerX >= 104 && playerX <= 184 && playerY == 16)
	JR	L_246
L_236:
	LD	BC,104
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_234
	LD	BC,(_playerX)
	LD	HL,184
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_234
	LD	BC,16
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_234
; 1005					{
; 1006						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
; 1007					}
; 1008					else if(playerY > 160)
	JR	L_246
L_234:
	LD	BC,(_playerY)
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_246
; 1009					{
; 1010						playerDeath = 1;
	LD	BC,1
	LD	(_playerDeath),BC
; 1011					}
; 1012				}
L_246:
; 1013				
; 1014				switch(player)
	LD	HL,(_player)
	CALL	__case8
L__127:
	DW	2
	DB	1
	DW24	L_244	

	DB	2
	DW24	L_245	

	DW24	L_257	

; 1015				{
; 1016					case 1:
L_244:
; 1017						player1Grounded = playerGrounded;
	LD	BC,(_playerGrounded)
	LD	(_player1Grounded),BC
; 1018						break;
	JR	L_257
; 1019					case 2:
L_245:
; 1020						player2Grounded = playerGrounded;
	LD	BC,(_playerGrounded)
	LD	(_player2Grounded),BC
; 1021						break;
; 1022				}
L_257:
; 1023				
; 1024				if(playerDeath == 1)
	LD	BC,1
	LD	HL,(_playerDeath)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_259
; 1025				{
; 1026					switch(player)
	LD	HL,(_player)
	CALL	__case8
L__129:
	DW	2
	DB	1
	DW24	L_247	

	DB	2
	DW24	L_252	

	DW24	L_259	

; 1027					{
; 1028						case 1:
L_247:
; 1029							player1Lifes--;
	LD	BC,(_player1Lifes)
	DEC	BC
	LD	(_player1Lifes),BC
; 1030							if(player1Lifes <= 0)
	OR	A,A
	OR	A,A
	SBC	HL,HL
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_249
; 1031							{
; 1032								goto gameOver;
; 1033							}
; 1034							player1X = player1SpawnX;
	LD	BC,(_player1SpawnX)
	LD	(_player1X),BC
; 1035							player1Y = player1SpawnY;
	LD	BC,(_player1SpawnY)
	LD	(_player1Y),BC
; 1036							player1Flipped = 0;
	LD	BC,0
	LD	(_player1Flipped),BC
; 1037							player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
; 1038							player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
; 1039							player1ShieldActive = 0;
	LD	(_player1ShieldActive),BC
; 1040							player1Grounded = 1;
	LD	BC,1
	LD	(_player1Grounded),BC
; 1041							break;
	JR	L_259
; 1042						case 2:
L_252:
; 1043							player2Lifes--;
	LD	BC,(_player2Lifes)
	DEC	BC
	LD	(_player2Lifes),BC
; 1044							if(player2Lifes <= 0)
	OR	A,A
	OR	A,A
	SBC	HL,HL
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_249
; 1045							{
; 1046								goto gameOver;
; 1047							}
; 1048							player2X = player2SpawnX;
	LD	BC,(_player2SpawnX)
	LD	(_player2X),BC
; 1049							player2Y = player2SpawnY;
	LD	BC,(_player2SpawnY)
	LD	(_player2Y),BC
; 1050							player2Flipped = 1;
	LD	BC,1
	LD	(_player2Flipped),BC
; 1051							player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
; 1052							player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
; 1053							player2ShieldActive = 0;
	LD	(_player2ShieldActive),BC
; 1054							player2Grounded = 1;
	LD	BC,1
	LD	(_player2Grounded),BC
; 1055							break;
; 1056					}
; 1057				}
; 1058			}
L_259:
	LD	BC,(_player)
	INC	BC
	LD	(_player),BC
L_260:
	LD	BC,3
	LD	HL,(_player)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_258
; 1059			
; 1060			//fight - player 1 always grounded in test mode
; 1061			if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_268
; 1062			{
; 1063				player1Grounded = 1;
	LD	(_player1Grounded),BC
; 1064			}
L_268:
; 1065			
; 1066			//fight - calculate jumps (player 1)
; 1067			if(player1Jumping > 0)
	LD	BC,(_player1Jumping)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_267
; 1068			{
; 1069				player1Jumping--;
	LD	BC,(_player1Jumping)
	DEC	BC
	LD	(_player1Jumping),BC
; 1070				player1Y -= player1JumpSpeed;
	LD	HL,(_player1Y)
	LD	BC,(_player1JumpSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Y),HL
; 1071			}
; 1072			else if(player1Grounded == 0)
	JR	L_273
L_267:
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_273
; 1073			{
; 1074				player1Y += player1FallSpeed;
	LD	BC,(_player1FallSpeed)
	LD	HL,(_player1Y)
	ADD	HL,BC
	LD	(_player1Y),HL
; 1075			}
L_273:
; 1076			
; 1077			//fight - calculate jumps (player 2)
; 1078			if(player2Jumping > 0)
	LD	BC,(_player2Jumping)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_272
; 1079			{
; 1080				player2Jumping--;
	LD	BC,(_player2Jumping)
	DEC	BC
	LD	(_player2Jumping),BC
; 1081				player2Y -= player2JumpSpeed;
	LD	HL,(_player2Y)
	LD	BC,(_player2JumpSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Y),HL
; 1082			}
; 1083			else if(player2Grounded == 0)
	JR	L_279
L_272:
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_279
; 1084			{
; 1085				player2Y += player2FallSpeed;
	LD	BC,(_player2FallSpeed)
	LD	HL,(_player2Y)
	ADD	HL,BC
	LD	(_player2Y),HL
; 1086			}
L_279:
; 1087			
; 1088			//fight - calculate knockback (player 1)
; 1089			if(player1XKnockback < 0)
	LD	HL,(_player1XKnockback)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_278
; 1090			{
; 1091				player1XKnockback++;
	LD	BC,(_player1XKnockback)
	INC	BC
	LD	(_player1XKnockback),BC
; 1092				player1X -= player2WeaponKnockbackStrength;
	LD	HL,(_player1X)
	LD	BC,(_player2WeaponKnockbackStrength)
	OR	A,A
	SBC	HL,BC
	LD	(_player1X),HL
; 1093			}
; 1094			else if(player1XKnockback > 0)
	JR	L_285
L_278:
	LD	BC,(_player1XKnockback)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_285
; 1095			{
; 1096				player1XKnockback--;
	LD	BC,(_player1XKnockback)
	DEC	BC
	LD	(_player1XKnockback),BC
; 1097				player1X += player2WeaponKnockbackStrength;
	LD	BC,(_player2WeaponKnockbackStrength)
	LD	HL,(_player1X)
	ADD	HL,BC
	LD	(_player1X),HL
; 1098			}
L_285:
; 1099			
; 1100			//fight - calculate knockback (player 2)
; 1101			if(player2XKnockback < 0)
	LD	HL,(_player2XKnockback)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_284
; 1102			{
; 1103				player2XKnockback++;
	LD	BC,(_player2XKnockback)
	INC	BC
	LD	(_player2XKnockback),BC
; 1104				player2X -= player1WeaponKnockbackStrength;
	LD	HL,(_player2X)
	LD	BC,(_player1WeaponKnockbackStrength)
	OR	A,A
	SBC	HL,BC
	LD	(_player2X),HL
; 1105			}
; 1106			else if(player2XKnockback > 0)
	JR	L_292
L_284:
	LD	BC,(_player2XKnockback)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_292
; 1107			{
; 1108				player2XKnockback--;
	LD	BC,(_player2XKnockback)
	DEC	BC
	LD	(_player2XKnockback),BC
; 1109				player2X += player1WeaponKnockbackStrength;
	LD	BC,(_player1WeaponKnockbackStrength)
	LD	HL,(_player2X)
	ADD	HL,BC
	LD	(_player2X),HL
; 1110			}
L_292:
; 1111			
; 1112			//fight - calculate weapons (player 1)
; 1113			if(player1Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_299
; 1114			{
; 1115				if(player1Weapon1Flipped == 0)
	LD	HL,(_player1Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_287
; 1116				{
; 1117					player1Weapon1X += player1WeaponSpeed;
	LD	BC,(_player1WeaponSpeed)
	LD	HL,(_player1Weapon1X)
	ADD	HL,BC
	LD	(_player1Weapon1X),HL
; 1118				}
; 1119				else
	JR	L_290
L_287:
; 1120				{
; 1121					player1Weapon1X -= player1WeaponSpeed;
	LD	HL,(_player1Weapon1X)
	LD	BC,(_player1WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Weapon1X),HL
; 1122				}
L_290:
; 1123				
; 1124				if(player1Weapon1X <= -8 || player1Weapon1X >= 320)
	LD	BC,(_player1Weapon1X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_289
	LD	BC,320
	LD	HL,(_player1Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_299
L_289:
; 1125				{
; 1126					player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
; 1127				}
; 1128			}
L_299:
; 1129			if(player1Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_306
; 1130			{
; 1131				if(player1Weapon2Flipped == 0)
	LD	HL,(_player1Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_294
; 1132				{
; 1133					player1Weapon2X += player1WeaponSpeed;
	LD	BC,(_player1WeaponSpeed)
	LD	HL,(_player1Weapon2X)
	ADD	HL,BC
	LD	(_player1Weapon2X),HL
; 1134				}
; 1135				else
	JR	L_297
L_294:
; 1136				{
; 1137					player1Weapon2X -= player1WeaponSpeed;
	LD	HL,(_player1Weapon2X)
	LD	BC,(_player1WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Weapon2X),HL
; 1138				}
L_297:
; 1139				
; 1140				if(player1Weapon2X <= -8 || player1Weapon2X >= 320)
	LD	BC,(_player1Weapon2X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_296
	LD	BC,320
	LD	HL,(_player1Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_306
L_296:
; 1141				{
; 1142					player1Weapon2 = 0;
	LD	BC,0
	LD	(_player1Weapon2),BC
; 1143				}
; 1144			}
L_306:
; 1145			if(player1Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_313
; 1146			{
; 1147				if(player1Weapon3Flipped == 0)
	LD	HL,(_player1Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_301
; 1148				{
; 1149					player1Weapon3X += player1WeaponSpeed;
	LD	BC,(_player1WeaponSpeed)
	LD	HL,(_player1Weapon3X)
	ADD	HL,BC
	LD	(_player1Weapon3X),HL
; 1150				}
; 1151				else
	JR	L_304
L_301:
; 1152				{
; 1153					player1Weapon3X -= player1WeaponSpeed;
	LD	HL,(_player1Weapon3X)
	LD	BC,(_player1WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Weapon3X),HL
; 1154				}
L_304:
; 1155				
; 1156				if(player1Weapon3X <= -8 || player1Weapon3X >= 320)
	LD	BC,(_player1Weapon3X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_303
	LD	BC,320
	LD	HL,(_player1Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_313
L_303:
; 1157				{
; 1158					player1Weapon3 = 0;
	LD	BC,0
	LD	(_player1Weapon3),BC
; 1159				}
; 1160			}
L_313:
; 1161			
; 1162			//fight - calculate weapons (player 2)
; 1163			if(player2Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_320
; 1164			{
; 1165				if(player2Weapon1Flipped == 0)
	LD	HL,(_player2Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_308
; 1166				{
; 1167					player2Weapon1X += player2WeaponSpeed;
	LD	BC,(_player2WeaponSpeed)
	LD	HL,(_player2Weapon1X)
	ADD	HL,BC
	LD	(_player2Weapon1X),HL
; 1168				}
; 1169				else
	JR	L_311
L_308:
; 1170				{
; 1171					player2Weapon1X -= player2WeaponSpeed;
	LD	HL,(_player2Weapon1X)
	LD	BC,(_player2WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Weapon1X),HL
; 1172				}
L_311:
; 1173				
; 1174				if(player2Weapon1X <= -8 || player2Weapon1X >= 320)
	LD	BC,(_player2Weapon1X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_310
	LD	BC,320
	LD	HL,(_player2Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_320
L_310:
; 1175				{
; 1176					player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
; 1177				}
; 1178			}
L_320:
; 1179			if(player2Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_327
; 1180			{
; 1181				if(player2Weapon2Flipped == 0)
	LD	HL,(_player2Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_315
; 1182				{
; 1183					player2Weapon2X += player2WeaponSpeed;
	LD	BC,(_player2WeaponSpeed)
	LD	HL,(_player2Weapon2X)
	ADD	HL,BC
	LD	(_player2Weapon2X),HL
; 1184				}
; 1185				else
	JR	L_318
L_315:
; 1186				{
; 1187					player2Weapon2X -= player2WeaponSpeed;
	LD	HL,(_player2Weapon2X)
	LD	BC,(_player2WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Weapon2X),HL
; 1188				}
L_318:
; 1189				
; 1190				if(player2Weapon2X <= -8 || player2Weapon2X >= 320)
	LD	BC,(_player2Weapon2X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_317
	LD	BC,320
	LD	HL,(_player2Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_327
L_317:
; 1191				{
; 1192					player2Weapon2 = 0;
	LD	BC,0
	LD	(_player2Weapon2),BC
; 1193				}
; 1194			}
L_327:
; 1195			if(player2Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_357
; 1196			{
; 1197				if(player2Weapon3Flipped == 0)
	LD	HL,(_player2Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_322
; 1198				{
; 1199					player2Weapon3X += player2WeaponSpeed;
	LD	BC,(_player2WeaponSpeed)
	LD	HL,(_player2Weapon3X)
	ADD	HL,BC
	LD	(_player2Weapon3X),HL
; 1200				}
; 1201				else
	JR	L_325
L_322:
; 1202				{
; 1203					player2Weapon3X -= player2WeaponSpeed;
	LD	HL,(_player2Weapon3X)
	LD	BC,(_player2WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Weapon3X),HL
; 1204				}
L_325:
; 1205				
; 1206				if(player2Weapon3X <= -8 || player2Weapon3X >= 320)
	LD	BC,(_player2Weapon3X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_324
	LD	BC,320
	LD	HL,(_player2Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_357
L_324:
; 1207				{
; 1208					player2Weapon3 = 0;
	LD	BC,0
	LD	(_player2Weapon3),BC
; 1209				}
; 1210			}
L_357:
; 1211			
; 1212			//fight - draw character (player 1)
; 1213			if(player1Flipped == 0 && player1Grounded == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	Z,L__167
	LD	A,1
	JR	L__168
L__167:
	XOR	A,A
L__168:
	LD	(IX+-1),A
	OR	A,A
	JR	NZ,L_356
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_356
; 1214			{
; 1215				gfx_TransparentSprite(player1CharacterNotGrounded, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterNotGrounded)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1216				player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
; 1217				player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
; 1218			}
; 1219			else if(player1Flipped == 1 && player1Grounded == 0)
	JR	L_359
L_356:
	LD	BC,1
	LD	HL,(_player1Flipped)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__172
	LD	A,1
	JR	L__173
L__172:
	XOR	A,A
L__173:
	LD	(IX+-2),A
	OR	A,A
	JR	NZ,L_354
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_354
; 1220			{
; 1221				gfx_TransparentSprite(player1CharacterNotGroundedFlipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterNotGroundedFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1222				player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
; 1223				player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
; 1224			}
; 1225			else if(player1Flipped == 0 && player1MoveAnimation == 0)
	JR	L_359
L_354:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_352
	LD	HL,(_player1MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_352
; 1226			{
; 1227				gfx_TransparentSprite(player1Character, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1Character)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1228			}
; 1229			else if(player1Flipped == 1 && player1MoveAnimation == 0)
	JR	L_359
L_352:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_350
	LD	HL,(_player1MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_350
; 1230			{
; 1231				gfx_TransparentSprite(player1CharacterFlipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1232			}
; 1233			else if(player1Flipped == 0 && player1MoveAnimation == 1)
	JR	L_359
L_350:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_348
	LD	BC,1
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_348
; 1234			{
; 1235				gfx_TransparentSprite(player1CharacterMoving1, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1236			}
; 1237			else if(player1Flipped == 1 && player1MoveAnimation == 1)
	JR	L_359
L_348:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_346
	LD	BC,1
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_346
; 1238			{
; 1239				gfx_TransparentSprite(player1CharacterMoving1Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1240			}
; 1241			else if(player1Flipped == 0 && player1MoveAnimation == 2)
	JR	L_359
L_346:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_344
	LD	BC,2
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_344
; 1242			{
; 1243				gfx_TransparentSprite(player1CharacterMoving2, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving2)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1244			}
; 1245			else if(player1Flipped == 1 && player1MoveAnimation == 2)
	JR	L_359
L_344:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_342
	LD	BC,2
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_342
; 1246			{
; 1247				gfx_TransparentSprite(player1CharacterMoving2Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1248			}
; 1249			else if(player1Flipped == 0 && player1MoveAnimation == 3)
	JR	L_359
L_342:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_340
	LD	BC,3
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_340
; 1250			{
; 1251				gfx_TransparentSprite(player1CharacterMoving1, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1252			}
; 1253			else if(player1Flipped == 1 && player1MoveAnimation == 3)
	JR	L_359
L_340:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_359
	LD	BC,3
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_359
; 1254			{
; 1255				gfx_TransparentSprite(player1CharacterMoving1Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1256			}
L_359:
; 1257			
; 1258			//fight - draw shield (player 1)
; 1259			if(player1ShieldActive == 1)
	LD	BC,1
	LD	HL,(_player1ShieldActive)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_389
; 1260			{
; 1261				gfx_TransparentSprite(shield, player1X - 12, player1Y - 4);
	LD	IY,(_player1Y)
	LEA	BC,IY+-4
	PUSH	BC
	LD	IY,(_player1X)
	LEA	BC,IY+-12
	PUSH	BC
	LD	BC,_shield_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1262			}
L_389:
; 1263			
; 1264			//fight - draw character (player 2)
; 1265			if(player2Flipped == 0 && player2Grounded == 0)
	LD	HL,(_player2Flipped)
	CALL	__icmpzero
	JR	Z,L__194
	LD	A,1
	JR	L__195
L__194:
	XOR	A,A
L__195:
	LD	(IX+-3),A
	OR	A,A
	JR	NZ,L_388
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_388
; 1266			{
; 1267				gfx_TransparentSprite(player2CharacterNotGrounded, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterNotGrounded)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1268				player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
; 1269				player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
; 1270			}
; 1271			else if(player2Flipped == 1 && player2Grounded == 0)
	JR	L_391
L_388:
	LD	BC,1
	LD	HL,(_player2Flipped)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__199
	LD	A,1
	JR	L__200
L__199:
	XOR	A,A
L__200:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_386
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_386
; 1272			{
; 1273				gfx_TransparentSprite(player2CharacterNotGroundedFlipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterNotGroundedFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1274				player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
; 1275				player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
; 1276			}
; 1277			else if(player2Flipped == 0 && player2MoveAnimation == 0)
	JR	L_391
L_386:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_384
	LD	HL,(_player2MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_384
; 1278			{
; 1279				gfx_TransparentSprite(player2Character, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2Character)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1280			}
; 1281			else if(player2Flipped == 1 && player2MoveAnimation == 0)
	JR	L_391
L_384:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_382
	LD	HL,(_player2MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_382
; 1282			{
; 1283				gfx_TransparentSprite(player2CharacterFlipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1284			}
; 1285			else if(player2Flipped == 0 && player2MoveAnimation == 1)
	JR	L_391
L_382:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_380
	LD	BC,1
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_380
; 1286			{
; 1287				gfx_TransparentSprite(player2CharacterMoving1, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1288			}
; 1289			else if(player2Flipped == 1 && player2MoveAnimation == 1)
	JR	L_391
L_380:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_378
	LD	BC,1
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_378
; 1290			{
; 1291				gfx_TransparentSprite(player2CharacterMoving1Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1292			}
; 1293			else if(player2Flipped == 0 && player2MoveAnimation == 2)
	JR	L_391
L_378:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_376
	LD	BC,2
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_376
; 1294			{
; 1295				gfx_TransparentSprite(player2CharacterMoving2, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving2)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1296			}
; 1297			else if(player2Flipped == 1 && player2MoveAnimation == 2)
	JR	L_391
L_376:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_374
	LD	BC,2
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_374
; 1298			{
; 1299				gfx_TransparentSprite(player2CharacterMoving2Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1300			}
; 1301			else if(player2Flipped == 0 && player2MoveAnimation == 3)
	JR	L_391
L_374:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_372
	LD	BC,3
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_372
; 1302			{
; 1303				gfx_TransparentSprite(player2CharacterMoving1, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1304			}
; 1305			else if(player2Flipped == 1 && player2MoveAnimation == 3)
	JR	L_391
L_372:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_391
	LD	BC,3
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_391
; 1306			{
; 1307				gfx_TransparentSprite(player2CharacterMoving1Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1308			}
L_391:
; 1309			
; 1310			//fight - draw shield (player 2)
; 1311			if(player2ShieldActive == 1)
	LD	BC,1
	LD	HL,(_player2ShieldActive)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_393
; 1312			{
; 1313				gfx_TransparentSprite(shield, player2X - 12, player2Y - 4);
	LD	IY,(_player2Y)
	LEA	BC,IY+-4
	PUSH	BC
	LD	IY,(_player2X)
	LEA	BC,IY+-12
	PUSH	BC
	LD	BC,_shield_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1314			}
L_393:
; 1315			
; 1316			//fight - draw weapons (player 1)
; 1317			if(player1Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_395
; 1318			{
; 1319				gfx_TransparentSprite(player1Weapon, player1Weapon1X, player1Weapon1Y);
	LD	BC,(_player1Weapon1Y)
	PUSH	BC
	LD	BC,(_player1Weapon1X)
	PUSH	BC
	LD	BC,(_player1Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1320			}
L_395:
; 1321			if(player1Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_397
; 1322			{
; 1323				gfx_TransparentSprite(player1Weapon, player1Weapon2X, player1Weapon2Y);
	LD	BC,(_player1Weapon2Y)
	PUSH	BC
	LD	BC,(_player1Weapon2X)
	PUSH	BC
	LD	BC,(_player1Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1324			}
L_397:
; 1325			if(player1Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_399
; 1326			{
; 1327				gfx_TransparentSprite(player1Weapon, player1Weapon3X, player1Weapon3Y);
	LD	BC,(_player1Weapon3Y)
	PUSH	BC
	LD	BC,(_player1Weapon3X)
	PUSH	BC
	LD	BC,(_player1Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1328			}
L_399:
; 1329			
; 1330			//fight - draw weapons (player 2)
; 1331			if(player2Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_401
; 1332			{
; 1333				gfx_TransparentSprite(player2Weapon, player2Weapon1X, player2Weapon1Y);
	LD	BC,(_player2Weapon1Y)
	PUSH	BC
	LD	BC,(_player2Weapon1X)
	PUSH	BC
	LD	BC,(_player2Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1334			}
L_401:
; 1335			if(player2Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_403
; 1336			{
; 1337				gfx_TransparentSprite(player2Weapon, player2Weapon2X, player2Weapon2Y);
	LD	BC,(_player2Weapon2Y)
	PUSH	BC
	LD	BC,(_player2Weapon2X)
	PUSH	BC
	LD	BC,(_player2Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1338			}
L_403:
; 1339			if(player2Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_418
; 1340			{
; 1341				gfx_TransparentSprite(player2Weapon, player2Weapon3X, player2Weapon3Y);
	LD	BC,(_player2Weapon3Y)
	PUSH	BC
	LD	BC,(_player2Weapon3X)
	PUSH	BC
	LD	BC,(_player2Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1342			}
L_418:
; 1343			
; 1344			//fight - check for weapon hits (player 1)
; 1345			if(player1Weapon1 == 1 && player1Weapon1Y + 8 >= player2Y && player1Weapon1Y <= player2Y + 48)
	LD	BC,1
	LD	HL,(_player1Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_433
	LD	IY,(_player1Weapon1Y)
	LEA	HL,IY+8
	LD	BC,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JP	M,L_433
	LD	IY,(_player2Y)
	LEA	HL,IY+48
	LD	BC,(_player1Weapon1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_433
; 1346			{
; 1347				if(player1Weapon1Flipped == 0 && player1Weapon1X + 8 >= player2X && player1Weapon1X <= player2X + 32)
	LD	HL,(_player1Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_416
	LD	IY,(_player1Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_416
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_416
; 1348				{
; 1349					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_409
; 1350					{
; 1351						player2XKnockback += player1WeaponKnockback;
	LD	BC,(_player1WeaponKnockback)
	LD	HL,(_player2XKnockback)
	ADD	HL,BC
	LD	(_player2XKnockback),HL
; 1352					}
L_409:
; 1353					player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
; 1354				}
; 1355				else if(player1Weapon1Flipped == 1 && player1Weapon1X <= player2X + 32 && player1Weapon1X + 8 >= player2X)
	JR	L_433
L_416:
	LD	BC,1
	LD	HL,(_player1Weapon1Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_433
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_433
	LD	IY,(_player1Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_433
; 1356				{
; 1357					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_413
; 1358					{
; 1359						player2XKnockback -= player1WeaponKnockback;
	LD	HL,(_player2XKnockback)
	LD	BC,(_player1WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player2XKnockback),HL
; 1360					}
L_413:
; 1361					player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
; 1362				}
; 1363			}
L_433:
; 1364			if(player1Weapon2 == 1 && player1Weapon2Y + 8 >= player2Y && player1Weapon2Y <= player2Y + 48)
	LD	BC,1
	LD	HL,(_player1Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_448
	LD	IY,(_player1Weapon2Y)
	LEA	HL,IY+8
	LD	BC,(_player2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_448
	LD	IY,(_player2Y)
	LEA	HL,IY+48
	LD	BC,(_player1Weapon2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_448
; 1365			{
; 1366				if(player1Weapon2Flipped == 0 && player1Weapon2X + 8 >= player2X && player1Weapon2X <= player2X + 32)
	LD	HL,(_player1Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_431
	LD	IY,(_player1Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_431
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_431
; 1367				{
; 1368					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_424
; 1369					{
; 1370						player2XKnockback += player1WeaponKnockback;
	LD	BC,(_player1WeaponKnockback)
	LD	HL,(_player2XKnockback)
	ADD	HL,BC
	LD	(_player2XKnockback),HL
; 1371					}
L_424:
; 1372					player1Weapon2 = 0;
	LD	BC,0
	LD	(_player1Weapon2),BC
; 1373				}
; 1374				else if(player1Weapon2Flipped == 1 && player1Weapon2X <= player2X + 32 && player1Weapon2X + 8 >= player2X)
	JR	L_448
L_431:
	LD	BC,1
	LD	HL,(_player1Weapon2Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_448
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_448
	LD	IY,(_player1Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_448
; 1375				{
; 1376					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_428
; 1377					{
; 1378						player2XKnockback -= player1WeaponKnockback;
	LD	HL,(_player2XKnockback)
	LD	BC,(_player1WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player2XKnockback),HL
; 1379					}
L_428:
; 1380					player1Weapon2 = 0;
	LD	BC,0
	LD	(_player1Weapon2),BC
; 1381				}
; 1382			}
L_448:
; 1383			if(player1Weapon3 == 1 && player1Weapon3Y + 8 >= player2Y && player1Weapon3Y <= player2Y + 48)
	LD	BC,1
	LD	HL,(_player1Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_463
	LD	IY,(_player1Weapon3Y)
	LEA	HL,IY+8
	LD	BC,(_player2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_463
	LD	IY,(_player2Y)
	LEA	HL,IY+48
	LD	BC,(_player1Weapon3Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_463
; 1384			{
; 1385				if(player1Weapon3Flipped == 0 && player1Weapon3X + 8 >= player2X && player1Weapon3X <= player2X + 32)
	LD	HL,(_player1Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_446
	LD	IY,(_player1Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_446
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_446
; 1386				{
; 1387					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_439
; 1388					{
; 1389						player2XKnockback += player1WeaponKnockback;
	LD	BC,(_player1WeaponKnockback)
	LD	HL,(_player2XKnockback)
	ADD	HL,BC
	LD	(_player2XKnockback),HL
; 1390					}
L_439:
; 1391					player1Weapon3 = 0;
	LD	BC,0
	LD	(_player1Weapon3),BC
; 1392				}
; 1393				else if(player1Weapon3Flipped == 1 && player1Weapon3X <= player2X + 32 && player1Weapon3X + 8 >= player2X)
	JR	L_463
L_446:
	LD	BC,1
	LD	HL,(_player1Weapon3Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_463
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_463
	LD	IY,(_player1Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_463
; 1394				{
; 1395					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_443
; 1396					{
; 1397						player2XKnockback -= player1WeaponKnockback;
	LD	HL,(_player2XKnockback)
	LD	BC,(_player1WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player2XKnockback),HL
; 1398					}
L_443:
; 1399					player1Weapon3 = 0;
	LD	BC,0
	LD	(_player1Weapon3),BC
; 1400				}
; 1401			}
L_463:
; 1402			
; 1403			//fight - check for weapon hits (player 2)
; 1404			if(player2Weapon1 == 1 && player2Weapon1Y + 8 >= player1Y && player2Weapon1Y <= player1Y + 48)
	LD	BC,1
	LD	HL,(_player2Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_478
	LD	IY,(_player2Weapon1Y)
	LEA	HL,IY+8
	LD	BC,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_478
	LD	IY,(_player1Y)
	LEA	HL,IY+48
	LD	BC,(_player2Weapon1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_478
; 1405			{
; 1406				if(player2Weapon1Flipped == 0 && player2Weapon1X + 8 >= player1X && player2Weapon1X <= player1X + 32)
	LD	HL,(_player2Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_461
	LD	IY,(_player2Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_461
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_461
; 1407				{
; 1408					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_454
; 1409					{
; 1410						player1XKnockback += player2WeaponKnockback;
	LD	BC,(_player2WeaponKnockback)
	LD	HL,(_player1XKnockback)
	ADD	HL,BC
	LD	(_player1XKnockback),HL
; 1411					}
L_454:
; 1412					player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
; 1413				}
; 1414				else if(player2Weapon1Flipped == 1 && player2Weapon1X <= player1X + 32 && player2Weapon1X + 8 >= player1X)
	JR	L_478
L_461:
	LD	BC,1
	LD	HL,(_player2Weapon1Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_478
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_478
	LD	IY,(_player2Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_478
; 1415				{
; 1416					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_458
; 1417					{
; 1418						player1XKnockback -= player2WeaponKnockback;
	LD	HL,(_player1XKnockback)
	LD	BC,(_player2WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player1XKnockback),HL
; 1419					}
L_458:
; 1420					player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
; 1421				}
; 1422			}
L_478:
; 1423			if(player2Weapon2 == 1 && player2Weapon2Y + 8 >= player1Y && player2Weapon2Y <= player1Y + 48)
	LD	BC,1
	LD	HL,(_player2Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_493
	LD	IY,(_player2Weapon2Y)
	LEA	HL,IY+8
	LD	BC,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_493
	LD	IY,(_player1Y)
	LEA	HL,IY+48
	LD	BC,(_player2Weapon2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_493
; 1424			{
; 1425				if(player2Weapon2Flipped == 0 && player2Weapon2X + 8 >= player1X && player2Weapon2X <= player1X + 32)
	LD	HL,(_player2Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_476
	LD	IY,(_player2Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_476
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_476
; 1426				{
; 1427					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_469
; 1428					{
; 1429						player1XKnockback += player2WeaponKnockback;
	LD	BC,(_player2WeaponKnockback)
	LD	HL,(_player1XKnockback)
	ADD	HL,BC
	LD	(_player1XKnockback),HL
; 1430					}
L_469:
; 1431					player2Weapon2 = 0;
	LD	BC,0
	LD	(_player2Weapon2),BC
; 1432				}
; 1433				else if(player2Weapon2Flipped == 1 && player2Weapon2X <= player1X + 32 && player2Weapon2X + 8 >= player1X)
	JR	L_493
L_476:
	LD	BC,1
	LD	HL,(_player2Weapon2Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_493
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_493
	LD	IY,(_player2Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_493
; 1434				{
; 1435					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_473
; 1436					{
; 1437						player1XKnockback -= player2WeaponKnockback;
	LD	HL,(_player1XKnockback)
	LD	BC,(_player2WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player1XKnockback),HL
; 1438					}
L_473:
; 1439					player2Weapon2 = 0;
	LD	BC,0
	LD	(_player2Weapon2),BC
; 1440				}
; 1441			}
L_493:
; 1442			if(player2Weapon3 == 1 && player2Weapon3Y + 8 >= player1Y && player2Weapon3Y <= player1Y + 48)
	LD	BC,1
	LD	HL,(_player2Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_494
	LD	IY,(_player2Weapon3Y)
	LEA	HL,IY+8
	LD	BC,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_494
	LD	IY,(_player1Y)
	LEA	HL,IY+48
	LD	BC,(_player2Weapon3Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_494
; 1443			{
; 1444				if(player2Weapon3Flipped == 0 && player2Weapon3X + 8 >= player1X && player2Weapon3X <= player1X + 32)
	LD	HL,(_player2Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_491
	LD	IY,(_player2Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_491
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_491
; 1445				{
; 1446					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_484
; 1447					{
; 1448						player1XKnockback += player2WeaponKnockback;
	LD	BC,(_player2WeaponKnockback)
	LD	HL,(_player1XKnockback)
	ADD	HL,BC
	LD	(_player1XKnockback),HL
; 1449					}
L_484:
; 1450					player2Weapon3 = 0;
	LD	BC,0
	LD	(_player2Weapon3),BC
; 1451				}
; 1452				else if(player2Weapon3Flipped == 1 && player2Weapon3X <= player1X + 32 && player2Weapon3X + 8 >= player1X)
	JR	L_494
L_491:
	LD	BC,1
	LD	HL,(_player2Weapon3Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_494
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_494
	LD	IY,(_player2Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_494
; 1453				{
; 1454					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_488
; 1455					{
; 1456						player1XKnockback -= player2WeaponKnockback;
	LD	HL,(_player1XKnockback)
	LD	BC,(_player2WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player1XKnockback),HL
; 1457					}
L_488:
; 1458					player2Weapon3 = 0;
	LD	BC,0
	LD	(_player2Weapon3),BC
; 1459				}
; 1460			}
L_494:
; 1461			
; 1462			//fight - draw UI
; 1463			gfx_TransparentSprite(statusUi, 128, 208);
	LD	BC,208
	PUSH	BC
	LD	BC,128
	PUSH	BC
	LD	BC,_statusUi_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1464			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1465			gfx_SetTextXY(134, 216);
	LD	BC,216
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
; 1466			gfx_PrintInt(player1Lifes, 1);
	LD	BC,1
	PUSH	BC
	LD	BC,(_player1Lifes)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1467			gfx_SetTextXY(171, 216);
	LD	BC,216
	PUSH	BC
	LD	BC,171
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
; 1468			gfx_PrintInt(player2Lifes, 1);
	LD	BC,1
	PUSH	BC
	LD	BC,(_player2Lifes)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1469			
; 1470			//fight - draw player 1 position
; 1471			if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_496
; 1472			{
; 1473				gfx_SetTextXY(10, 10);
	LD	BC,10
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
; 1474				gfx_PrintInt(player1X, 3);
	LD	BC,3
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1475				gfx_PrintString(" ");
	LD	BC,L__293
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
; 1476				gfx_PrintInt(player1Y, 3);
	LD	BC,3
	PUSH	BC
	LD	BC,(_player1Y)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1477			}
L_496:
; 1478			
; 1479			//fight - swap draw
; 1480			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	JR	L_498
L_170:
; 1481		}
; 1482		
; 1483		//---------------------------------------------------------------
; 1484		
; 1485		//pause
; 1486		pause:
; 1487		
; 1488		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
; 1489		gfx_SetColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
; 1490		gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 1491		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
; 1492		gfx_SetTextBGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
; 1493		gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1494		gfx_PrintStringXY("Pause menu", 80, 90);
	LD	BC,90
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,L__294
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1495		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1496		gfx_PrintStringXY("Press [clear] to continue...", 55, 125);
	LD	BC,125
	PUSH	BC
	LD	BC,55
	PUSH	BC
	LD	BC,L__295
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1497		gfx_PrintStringXY("Press [del] to give up...", 62, 145);
	LD	BC,145
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,L__296
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1498		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
; 1499		
; 1500		while(1)
L_504:
; 1501		{
; 1502			key = os_GetCSC();
	CALL	_os_GetCSC
; 1503			if(key == sk_Clear)
	CP	A,15
	LD	(_key),A
	JR	Z,L_136
; 1504			{
; 1505				goto fight;
; 1506			}
; 1507			else if(key == sk_Del)
	LD	A,(_key)
	CP	A,56
	JR	NZ,L_504
; 1508			{
; 1509				player1Lifes = 0;
	LD	BC,0
	LD	(_player1Lifes),BC
L_249:
; 1510				goto gameOver;
; 1511			}
; 1512		}
; 1513		
; 1514		//---------------------------------------------------------------
; 1515		
; 1516		//gameOver
; 1517		gameOver:
; 1518		
; 1519		if(player1Lifes > 0)
	LD	BC,(_player1Lifes)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_506
; 1520		{
; 1521			gfx_Tilemap(&tilemap, getXBlock(7), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,7
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
; 1522		}
; 1523		else
	JR	L_508
L_506:
; 1524		{
; 1525			gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(1));
	LD	BC,1
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
; 1526		}
L_508:
; 1527		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
; 1528		gfx_SetTextBGColor(gfx_GetPixel(0, 0));
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
; 1529		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1530		gfx_PrintStringXY("Press [2nd] to go to the main menu...", 15, 218);
	LD	BC,218
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,L__300
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1531		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
; 1532		while(os_GetCSC() != sk_2nd);
L_510:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_510
; 1533		goto mainMenu;
	JR	L_5
L_35:
; 1534		
; 1535		
; 1536		//---------------------------------------------------------------
; 1537		
; 1538		//error
; 1539		error:
; 1540		
; 1541		gfx_FillScreen(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
; 1542		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
; 1543		gfx_SetTextBGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
; 1544		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1545		gfx_PrintStringXY("An error has occurred!", 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,L__302
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1546		gfx_PrintStringXY("Press [2nd] to go to the main menu...", 0, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,L__303
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1547		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
; 1548		while(os_GetCSC() != sk_2nd);
L_513:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_513
; 1549		goto mainMenu;
	JR	L_5
L_33:
; 1550		
; 1551		//---------------------------------------------------------------
; 1552		
; 1553		//quit game
; 1554		quitGame:
; 1555		
; 1556		gfx_End();
	CALL	_gfx_End
	OR	A,A
; 1557		return 0;
	SBC	HL,HL
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_gfx_PrintString                    IMPORT  -----   function
;_gfx_PrintInt                       IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_player2Weapon3Y                    STATIC      3   variable
;_player2Weapon2Y                    STATIC      3   variable
;_player2Weapon1Y                    STATIC      3   variable
;_shield_data                        IMPORT   3138   variable
;_player2Weapon3X                    STATIC      3   variable
;_player2Weapon3Flipped              STATIC      3   variable
;_player2Weapon2X                    STATIC      3   variable
;_player2Weapon2Flipped              STATIC      3   variable
;_player2Weapon1X                    STATIC      3   variable
;_player2Weapon1Flipped              STATIC      3   variable
;_player2XKnockback                  STATIC      3   variable
;_player1XKnockback                  STATIC      3   variable
;_player2MoveAnimationCount          STATIC      3   variable
;_playerDeath                        STATIC      3   variable
;_playerGrounded                     STATIC      3   variable
;_playerY                            STATIC      3   variable
;_playerX                            STATIC      3   variable
;_player                             STATIC      3   variable
;_player1MoveAnimationCount          STATIC      3   variable
;_testMode                           STATIC      3   variable
;_kb_Scan                            IMPORT  -----   function
;_player1Weapon3Y                    STATIC      3   variable
;_player1Weapon3X                    STATIC      3   variable
;_player1Weapon3Flipped              STATIC      3   variable
;_player1Weapon2Y                    STATIC      3   variable
;_player1Weapon2X                    STATIC      3   variable
;_player1Weapon2Flipped              STATIC      3   variable
;_player1Weapon1Y                    STATIC      3   variable
;_player1Weapon1X                    STATIC      3   variable
;_player1Weapon1Flipped              STATIC      3   variable
;_gfx_GetPixel                       IMPORT  -----   function
;_statusUi_data                      IMPORT   2050   variable
;_counterFight_data                  IMPORT   1538   variable
;_counter1_data                      IMPORT   1538   variable
;_counter2_data                      IMPORT   1538   variable
;_counter3_data                      IMPORT   1538   variable
;_player2WeaponKnockbackStrength      STATIC      3   variable
;_player2WeaponKnockback             STATIC      3   variable
;_player2WeaponSpeed                 STATIC      3   variable
;_player2JumpHeight                  STATIC      3   variable
;_player2JumpSpeed                   STATIC      3   variable
;_player2FallSpeed                   STATIC      3   variable
;_player2MoveSpeed                   STATIC      3   variable
;_character1Weapon_data              IMPORT     66   variable
;_character1NotGrounded_data         IMPORT   1538   variable
;_character1Moving2_data             IMPORT   1538   variable
;_character1Moving1_data             IMPORT   1538   variable
;_player1WeaponKnockbackStrength      STATIC      3   variable
;_player1WeaponKnockback             STATIC      3   variable
;_player1WeaponSpeed                 STATIC      3   variable
;_player1JumpHeight                  STATIC      3   variable
;_player1JumpSpeed                   STATIC      3   variable
;_player1FallSpeed                   STATIC      3   variable
;_player1MoveSpeed                   STATIC      3   variable
;_character0Weapon_data              IMPORT     66   variable
;_gfx_FlipSpriteY                    IMPORT  -----   function
;_character0NotGrounded_data         IMPORT   1538   variable
;_character0Moving2_data             IMPORT   1538   variable
;_character0Moving1_data             IMPORT   1538   variable
;_player2Y                           STATIC      3   variable
;_player2X                           STATIC      3   variable
;_player1Y                           STATIC      3   variable
;_player1X                           STATIC      3   variable
;_player2SpawnY                      STATIC      3   variable
;_player2SpawnX                      STATIC      3   variable
;_player1SpawnY                      STATIC      3   variable
;_player1SpawnX                      STATIC      3   variable
;_player2IsAi                        STATIC      3   variable
;_player2Weapon3                     STATIC      3   variable
;_player2Weapon2                     STATIC      3   variable
;_player2Weapon1                     STATIC      3   variable
;_player2Lifes                       STATIC      3   variable
;_player2ShieldActive                STATIC      3   variable
;_player2Grounded                    STATIC      3   variable
;_player2Jumping                     STATIC      3   variable
;_player2MoveAnimation               STATIC      3   variable
;_player2Flipped                     STATIC      3   variable
;_player1Weapon3                     STATIC      3   variable
;_player1Weapon2                     STATIC      3   variable
;_player1Weapon1                     STATIC      3   variable
;_player1Lifes                       STATIC      3   variable
;_player1ShieldActive                STATIC      3   variable
;_player1Grounded                    STATIC      3   variable
;_player1Jumping                     STATIC      3   variable
;_player1MoveAnimation               STATIC      3   variable
;_player1Flipped                     STATIC      3   variable
;_mapAnimationState                  STATIC      3   variable
;_mapAnimationCount                  STATIC      3   variable
;_player2CharacterSelection          STATIC      3   variable
;_player1CharacterSelection          STATIC      3   variable
;_character1_data                    IMPORT   1538   variable
;_character0_data                    IMPORT   1538   variable
;_randomCharacter_data               IMPORT   1538   variable
;_characterHighlighter_data          IMPORT   3074   variable
;_gfx_FillRectangle                  IMPORT  -----   function
;_mapYBlock3                         STATIC      3   variable
;_mapXBlock3                         STATIC      3   variable
;_mapYBlock2                         STATIC      3   variable
;_mapXBlock2                         STATIC      3   variable
;_mapAnimationSpeed                  STATIC      3   variable
;_mapYBlock1                         STATIC      3   variable
;_mapXBlock1                         STATIC      3   variable
;_mapAnimation                       STATIC      3   variable
;_map                                STATIC      3   variable
;_random                             IMPORT  -----   function
;_mapHighlighter_data                IMPORT   1026   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_players                            STATIC      3   variable
;_key                                STATIC      1   variable
;_selecting                          STATIC      3   variable
;_selection                          STATIC      3   variable
;_os_GetCSC                          IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_delay                              IMPORT  -----   function
;_character1WeaponKnockbackStrength      STATIC      3   variable
;_character1WeaponKnockback          STATIC      3   variable
;_character1WeaponSpeed              STATIC      3   variable
;_character1JumpHeight               STATIC      3   variable
;_character1JumpSpeed                STATIC      3   variable
;_character1FallSpeed                STATIC      3   variable
;_character1MoveSpeed                STATIC      3   variable
;_character0WeaponKnockbackStrength      STATIC      3   variable
;_character0WeaponKnockback          STATIC      3   variable
;_character0WeaponSpeed              STATIC      3   variable
;_character0JumpHeight               STATIC      3   variable
;_character0JumpSpeed                STATIC      3   variable
;_character0FallSpeed                STATIC      3   variable
;_character0MoveSpeed                STATIC      3   variable
;_srand                              IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_version                            STATIC      4   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_Tilemap                        IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetMonospaceFont               IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_global_palette                     IMPORT    262   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_tileset_tiles_data                 IMPORT    240   variable
;_tilemap                            STATIC     18   variable
;_tilemap_map                        IMPORT  unknown variable
;_player2WeaponFlipped               STATIC      3   variable
;_player2Weapon                      STATIC      3   variable
;_player2CharacterNotGroundedFlipped      STATIC      3   variable
;_player2CharacterMoving2Flipped      STATIC      3   variable
;_player2CharacterMoving1Flipped      STATIC      3   variable
;_player2CharacterFlipped            STATIC      3   variable
;_player2CharacterNotGrounded        STATIC      3   variable
;_player2CharacterMoving2            STATIC      3   variable
;_player2CharacterMoving1            STATIC      3   variable
;_player2Character                   STATIC      3   variable
;_player1WeaponFlipped               STATIC      3   variable
;_player1Weapon                      STATIC      3   variable
;_player1CharacterNotGroundedFlipped      STATIC      3   variable
;_player1CharacterMoving2Flipped      STATIC      3   variable
;_player1CharacterMoving1Flipped      STATIC      3   variable
;_player1CharacterFlipped            STATIC      3   variable
;_player1CharacterNotGrounded        STATIC      3   variable
;_player1CharacterMoving2            STATIC      3   variable
;_player1CharacterMoving1            STATIC      3   variable
;_player1Character                   STATIC      3   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;G_9                                   IX-4      1   variable
;G_8                                   IX-3      1   variable
;G_1                                   IX-2      1   variable
;G_0                                   IX-1      1   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__2:
	DB	"Press [2nd] to start..."
	DB	0
L__11:
	DB	"Singleplayer"
	DB	0
L__13:
	DB	"Multiplayer"
	DB	0
L__15:
	DB	"Quit game"
	DB	0
L__16:
	DB	"Star it on GitHub!"
	DB	0
L__19:
	DB	"Select a map:"
	DB	0
L__31:
	DB	"Select character 1:"
	DB	0
L__46:
	DB	"Select character 2:"
	DB	0
L__293:
	DB	" "
	DB	0
L__294:
	DB	"Pause menu"
	DB	0
L__295:
	DB	"Press [clear] to continue..."
	DB	0
L__296:
	DB	"Press [del] to give up..."
	DB	0
L__300:
	DB	"Press [2nd] to go to the main menu..."
	DB	0
L__302:
	DB	"An error has occurred!"
	DB	0
L__303:
	DB	"Press [2nd] to go to the main menu..."
	DB	0
	XREF _tilemap_map:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_SetMonospaceFont:ROM
	XREF _gfx_FlipSpriteY:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintString:ROM
	XREF _gfx_PrintInt:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_GetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _statusUi_data:ROM
	XREF _shield_data:ROM
	XREF _randomCharacter_data:ROM
	XREF _mapHighlighter_data:ROM
	XREF _counterFight_data:ROM
	XREF _counter3_data:ROM
	XREF _counter2_data:ROM
	XREF _counter1_data:ROM
	XREF _characterHighlighter_data:ROM
	XREF _character1Weapon_data:ROM
	XREF _character1NotGrounded_data:ROM
	XREF _character1Moving2_data:ROM
	XREF _character1Moving1_data:ROM
	XREF _character1_data:ROM
	XREF _character0Weapon_data:ROM
	XREF _character0NotGrounded_data:ROM
	XREF _character0Moving2_data:ROM
	XREF _character0Moving1_data:ROM
	XREF _character0_data:ROM
	XREF _tileset_tiles_data:ROM
	XREF _global_palette:ROM
	XREF _os_GetCSC:ROM
	XREF _delay:ROM
	XREF _random:ROM
	XREF _srand:ROM
	XREF _malloc:ROM
	XREF __imuls:ROM
	XREF __fcmp:ROM
	XREF __ltof:ROM
	XREF __itol:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _main
	XDEF _getYBlock
	XDEF _getXBlock
	XDEF _tilemap
	XDEF _player2WeaponFlipped
	XDEF _player2Weapon
	XDEF _player2CharacterNotGroundedFlipped
	XDEF _player2CharacterMoving2Flipped
	XDEF _player2CharacterMoving1Flipped
	XDEF _player2CharacterFlipped
	XDEF _player2CharacterNotGrounded
	XDEF _player2CharacterMoving2
	XDEF _player2CharacterMoving1
	XDEF _player2Character
	XDEF _player1WeaponFlipped
	XDEF _player1Weapon
	XDEF _player1CharacterNotGroundedFlipped
	XDEF _player1CharacterMoving2Flipped
	XDEF _player1CharacterMoving1Flipped
	XDEF _player1CharacterFlipped
	XDEF _player1CharacterNotGrounded
	XDEF _player1CharacterMoving2
	XDEF _player1CharacterMoving1
	XDEF _player1Character
	XDEF _key
	XDEF _player2Weapon3Flipped
	XDEF _player2Weapon3Y
	XDEF _player2Weapon3X
	XDEF _player2Weapon3
	XDEF _player2Weapon2Flipped
	XDEF _player2Weapon2Y
	XDEF _player2Weapon2X
	XDEF _player2Weapon2
	XDEF _player2Weapon1Flipped
	XDEF _player2Weapon1Y
	XDEF _player2Weapon1X
	XDEF _player2Weapon1
	XDEF _player2WeaponKnockbackStrength
	XDEF _player2WeaponKnockback
	XDEF _player2WeaponSpeed
	XDEF _player2Lifes
	XDEF _player2XKnockback
	XDEF _player2ShieldActive
	XDEF _player2Grounded
	XDEF _player2Jumping
	XDEF _player2MoveAnimationCount
	XDEF _player2MoveAnimation
	XDEF _player2JumpHeight
	XDEF _player2JumpSpeed
	XDEF _player2FallSpeed
	XDEF _player2MoveSpeed
	XDEF _player2Flipped
	XDEF _player2Y
	XDEF _player2X
	XDEF _player2CharacterSelection
	XDEF _player2IsAi
	XDEF _player1Weapon3Flipped
	XDEF _player1Weapon3Y
	XDEF _player1Weapon3X
	XDEF _player1Weapon3
	XDEF _player1Weapon2Flipped
	XDEF _player1Weapon2Y
	XDEF _player1Weapon2X
	XDEF _player1Weapon2
	XDEF _player1Weapon1Flipped
	XDEF _player1Weapon1Y
	XDEF _player1Weapon1X
	XDEF _player1Weapon1
	XDEF _player1WeaponKnockbackStrength
	XDEF _player1WeaponKnockback
	XDEF _player1WeaponSpeed
	XDEF _player1Lifes
	XDEF _player1XKnockback
	XDEF _player1ShieldActive
	XDEF _player1Grounded
	XDEF _player1Jumping
	XDEF _player1MoveAnimationCount
	XDEF _player1MoveAnimation
	XDEF _player1JumpHeight
	XDEF _player1JumpSpeed
	XDEF _player1FallSpeed
	XDEF _player1MoveSpeed
	XDEF _player1Flipped
	XDEF _player1Y
	XDEF _player1X
	XDEF _player1CharacterSelection
	XDEF _player2SpawnY
	XDEF _player2SpawnX
	XDEF _player1SpawnY
	XDEF _player1SpawnX
	XDEF _playerDeath
	XDEF _playerGrounded
	XDEF _playerY
	XDEF _playerX
	XDEF _player
	XDEF _character1WeaponKnockbackStrength
	XDEF _character1WeaponKnockback
	XDEF _character1WeaponSpeed
	XDEF _character1JumpHeight
	XDEF _character1JumpSpeed
	XDEF _character1FallSpeed
	XDEF _character1MoveSpeed
	XDEF _character0WeaponKnockbackStrength
	XDEF _character0WeaponKnockback
	XDEF _character0WeaponSpeed
	XDEF _character0JumpHeight
	XDEF _character0JumpSpeed
	XDEF _character0FallSpeed
	XDEF _character0MoveSpeed
	XDEF _mapYBlock3
	XDEF _mapXBlock3
	XDEF _mapYBlock2
	XDEF _mapXBlock2
	XDEF _mapYBlock1
	XDEF _mapXBlock1
	XDEF _mapAnimationState
	XDEF _mapAnimationSpeed
	XDEF _mapAnimationCount
	XDEF _mapAnimation
	XDEF _map
	XDEF _players
	XDEF _selecting
	XDEF _selection
	XDEF _testMode
	XDEF _version
	END
