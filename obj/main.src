; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_version:
	DB	48
	DB	46
	DB	49
	DB	0
	SEGMENT BSS
_testMode:
	DS	3
_selection:
	DS	3
_selecting:
	DS	3
_players:
	DS	3
_map:
	DS	3
_mapAnimation:
	DS	3
_mapAnimationCount:
	DS	3
_mapAnimationSpeed:
	DS	3
_mapAnimationState:
	DS	3
_mapXBlock1:
	DS	3
_mapYBlock1:
	DS	3
_mapXBlock2:
	DS	3
_mapYBlock2:
	DS	3
_mapXBlock3:
	DS	3
_mapYBlock3:
	DS	3
_character0MoveSpeed:
	DS	3
_character0MoveAnimationSpeed:
	DS	3
_character0FallSpeed:
	DS	3
_character0JumpSpeed:
	DS	3
_character0JumpHeight:
	DS	3
_character0WeaponSpeed:
	DS	3
_character0WeaponKnockback:
	DS	3
_character0WeaponKnockbackStrength:
	DS	3
_character1MoveSpeed:
	DS	3
_character1MoveAnimationSpeed:
	DS	3
_character1FallSpeed:
	DS	3
_character1JumpSpeed:
	DS	3
_character1JumpHeight:
	DS	3
_character1WeaponSpeed:
	DS	3
_character1WeaponKnockback:
	DS	3
_character1WeaponKnockbackStrength:
	DS	3
_player:
	DS	3
_playerX:
	DS	3
_playerY:
	DS	3
_playerGrounded:
	DS	3
_playerDeath:
	DS	3
_player1SpawnX:
	DS	3
_player1SpawnY:
	DS	3
_player2SpawnX:
	DS	3
_player2SpawnY:
	DS	3
_player1CharacterSelection:
	DS	3
_player1X:
	DS	3
_player1Y:
	DS	3
_player1Flipped:
	DS	3
_player1MoveSpeed:
	DS	3
_player1FallSpeed:
	DS	3
_player1JumpSpeed:
	DS	3
_player1JumpHeight:
	DS	3
_player1MoveAnimation:
	DS	3
_player1MoveAnimationCount:
	DS	3
_player1MoveAnimationSpeed:
	DS	3
_player1Jumping:
	DS	3
_player1Grounded:
	DS	3
_player1ShieldActive:
	DS	3
_player1XKnockback:
	DS	3
_player1Lifes:
	DS	3
_player1WeaponSpeed:
	DS	3
_player1WeaponKnockback:
	DS	3
_player1WeaponKnockbackStrength:
	DS	3
_player1Weapon1:
	DS	3
_player1Weapon1X:
	DS	3
_player1Weapon1Y:
	DS	3
_player1Weapon1Flipped:
	DS	3
_player1Weapon2:
	DS	3
_player1Weapon2X:
	DS	3
_player1Weapon2Y:
	DS	3
_player1Weapon2Flipped:
	DS	3
_player1Weapon3:
	DS	3
_player1Weapon3X:
	DS	3
_player1Weapon3Y:
	DS	3
_player1Weapon3Flipped:
	DS	3
_player2Jump:
	DS	3
_player2Attack:
	DS	3
_player2Down:
	DS	3
_player2Left:
	DS	3
_player2Right:
	DS	3
_player2AiAttackDelay:
	DS	3
_player2AiAttackDelayCount:
	DS	3
_player2IsAi:
	DS	3
_player2CharacterSelection:
	DS	3
_player2X:
	DS	3
_player2Y:
	DS	3
_player2Flipped:
	DS	3
_player2MoveSpeed:
	DS	3
_player2FallSpeed:
	DS	3
_player2JumpSpeed:
	DS	3
_player2JumpHeight:
	DS	3
_player2MoveAnimation:
	DS	3
_player2MoveAnimationCount:
	DS	3
_player2MoveAnimationSpeed:
	DS	3
_player2Jumping:
	DS	3
_player2Grounded:
	DS	3
_player2ShieldActive:
	DS	3
_player2XKnockback:
	DS	3
_player2Lifes:
	DS	3
_player2WeaponSpeed:
	DS	3
_player2WeaponKnockback:
	DS	3
_player2WeaponKnockbackStrength:
	DS	3
_player2Weapon1:
	DS	3
_player2Weapon1X:
	DS	3
_player2Weapon1Y:
	DS	3
_player2Weapon1Flipped:
	DS	3
_player2Weapon2:
	DS	3
_player2Weapon2X:
	DS	3
_player2Weapon2Y:
	DS	3
_player2Weapon2Flipped:
	DS	3
_player2Weapon3:
	DS	3
_player2Weapon3X:
	DS	3
_player2Weapon3Y:
	DS	3
_player2Weapon3Flipped:
	DS	3
_key:
	DS	1
_player1Character:
	DS	3
_player1CharacterMoving1:
	DS	3
_player1CharacterMoving2:
	DS	3
_player1CharacterNotGrounded:
	DS	3
_player1CharacterFlipped:
	DS	3
_player1CharacterMoving1Flipped:
	DS	3
_player1CharacterMoving2Flipped:
	DS	3
_player1CharacterNotGroundedFlipped:
	DS	3
_player1Weapon:
	DS	3
_player1WeaponFlipped:
	DS	3
_player2Character:
	DS	3
_player2CharacterMoving1:
	DS	3
_player2CharacterMoving2:
	DS	3
_player2CharacterNotGrounded:
	DS	3
_player2CharacterFlipped:
	DS	3
_player2CharacterMoving1Flipped:
	DS	3
_player2CharacterMoving2Flipped:
	DS	3
_player2CharacterNotGroundedFlipped:
	DS	3
_player2Weapon:
	DS	3
_player2WeaponFlipped:
	DS	3
_tilemap:
	DS	18
;    1	#include <fileioc.h>
;    2	#include <fontlibc.h>
;    3	#include "gfx/gfx.h"
;    4	#include <graphx.h>
;    5	#include <keypadc.h>
;    6	#include <stdbool.h>
;    7	#include <stddef.h>
;    8	#include <stdint.h>
;    9	#include <stdio.h>
;   10	#include <stdlib.h>
;   11	#include <string.h>
;   12	#include <tice.h>
;   13	
;   14	extern unsigned char tilemap_map[];
;   15	
;   16	#define TILE_WIDTH          16
;   17	#define TILE_HEIGHT         16
;   18	
;   19	#define TILEMAP_WIDTH       160
;   20	#define TILEMAP_HEIGHT      120
;   21	
;   22	#define TILEMAP_DRAW_WIDTH  20
;   23	#define TILEMAP_DRAW_HEIGHT 15
;   24	
;   25	#define Y_OFFSET            0
;   26	#define X_OFFSET            0
;   27	
;   28	#define BLACK				1
;   29	#define GRAY				3
;   30	#define GREEN				4
;   31	#define RED					gfx_red
;   32	#define TRANSPARENT			0
;   33	#define WHITE				2
;   34	#define YELLOW				gfx_yellow
;   35	
;   36	char version[] = "0.1";
;   37	
;   38	int testMode;
;   39	
;   40	int selection;
;   41	int selecting;
;   42	
;   43	int players;
;   44	int map;
;   45	int mapAnimation;
;   46	int mapAnimationCount;
;   47	int mapAnimationSpeed;
;   48	int mapAnimationState;
;   49	int mapXBlock1;
;   50	int mapYBlock1;
;   51	int mapXBlock2;
;   52	int mapYBlock2;
;   53	int mapXBlock3;
;   54	int mapYBlock3;
;   55	
;   56	int character0MoveSpeed;
;   57	int character0MoveAnimationSpeed;
;   58	int character0FallSpeed;
;   59	int character0JumpSpeed;
;   60	int character0JumpHeight;
;   61	
;   62	int character0WeaponSpeed;
;   63	int character0WeaponKnockback;
;   64	int character0WeaponKnockbackStrength;
;   65	
;   66	int character1MoveSpeed;
;   67	int character1MoveAnimationSpeed;
;   68	int character1FallSpeed;
;   69	int character1JumpSpeed;
;   70	int character1JumpHeight;
;   71	
;   72	int character1WeaponSpeed;
;   73	int character1WeaponKnockback;
;   74	int character1WeaponKnockbackStrength;
;   75	
;   76	int player;
;   77	int playerX;
;   78	int playerY;
;   79	int playerGrounded;
;   80	int playerDeath;
;   81	
;   82	int player1SpawnX;
;   83	int player1SpawnY;
;   84	int player2SpawnX;
;   85	int player2SpawnY;
;   86	
;   87	int player1CharacterSelection;
;   88	int player1X;
;   89	int player1Y;
;   90	int player1Flipped;
;   91	int player1MoveSpeed;
;   92	int player1FallSpeed;
;   93	int player1JumpSpeed;
;   94	int player1JumpHeight;
;   95	int player1MoveAnimation;
;   96	int player1MoveAnimationCount;
;   97	int player1MoveAnimationSpeed;
;   98	int player1Jumping;
;   99	int player1Grounded;
;  100	int player1ShieldActive;
;  101	int player1XKnockback;
;  102	int player1Lifes;
;  103	
;  104	int player1WeaponSpeed;
;  105	int player1WeaponKnockback;
;  106	int player1WeaponKnockbackStrength;
;  107	int player1Weapon1;
;  108	int player1Weapon1X;
;  109	int player1Weapon1Y;
;  110	int player1Weapon1Flipped;
;  111	int player1Weapon2;
;  112	int player1Weapon2X;
;  113	int player1Weapon2Y;
;  114	int player1Weapon2Flipped;
;  115	int player1Weapon3;
;  116	int player1Weapon3X;
;  117	int player1Weapon3Y;
;  118	int player1Weapon3Flipped;
;  119	
;  120	int player2Jump;
;  121	int player2Attack;
;  122	int player2Down;
;  123	int player2Left;
;  124	int player2Right;
;  125	
;  126	int player2AiAttackDelay;
;  127	int player2AiAttackDelayCount;
;  128	
;  129	int player2IsAi;
;  130	int player2CharacterSelection;
;  131	int player2X;
;  132	int player2Y;
;  133	int player2Flipped;
;  134	int player2MoveSpeed;
;  135	int player2FallSpeed;
;  136	int player2JumpSpeed;
;  137	int player2JumpHeight;
;  138	int player2MoveAnimation;
;  139	int player2MoveAnimationCount;
;  140	int player2MoveAnimationSpeed;
;  141	int player2Jumping;
;  142	int player2Grounded;
;  143	int player2ShieldActive;
;  144	int player2XKnockback;
;  145	int player2Lifes;
;  146	
;  147	int player2WeaponSpeed;
;  148	int player2WeaponKnockback;
;  149	int player2WeaponKnockbackStrength;
;  150	int player2Weapon1;
;  151	int player2Weapon1X;
;  152	int player2Weapon1Y;
;  153	int player2Weapon1Flipped;
;  154	int player2Weapon2;
;  155	int player2Weapon2X;
;  156	int player2Weapon2Y;
;  157	int player2Weapon2Flipped;
;  158	int player2Weapon3;
;  159	int player2Weapon3X;
;  160	int player2Weapon3Y;
;  161	int player2Weapon3Flipped;
;  162	
;  163	sk_key_t key;
;  164	
;  165	gfx_sprite_t *player1Character;
;  166	gfx_sprite_t *player1CharacterMoving1;
;  167	gfx_sprite_t *player1CharacterMoving2;
;  168	gfx_sprite_t *player1CharacterNotGrounded;
;  169	gfx_sprite_t *player1CharacterFlipped;
;  170	gfx_sprite_t *player1CharacterMoving1Flipped;
;  171	gfx_sprite_t *player1CharacterMoving2Flipped;
;  172	gfx_sprite_t *player1CharacterNotGroundedFlipped;
;  173	
;  174	gfx_sprite_t *player1Weapon;
;  175	gfx_sprite_t *player1WeaponFlipped;
;  176	
;  177	gfx_sprite_t *player2Character;
;  178	gfx_sprite_t *player2CharacterMoving1;
;  179	gfx_sprite_t *player2CharacterMoving2;
;  180	gfx_sprite_t *player2CharacterNotGrounded;
;  181	gfx_sprite_t *player2CharacterFlipped;
;  182	gfx_sprite_t *player2CharacterMoving1Flipped;
;  183	gfx_sprite_t *player2CharacterMoving2Flipped;
;  184	gfx_sprite_t *player2CharacterNotGroundedFlipped;
;  185	
;  186	gfx_sprite_t *player2Weapon;
;  187	gfx_sprite_t *player2WeaponFlipped;
;  188	
;  189	gfx_tilemap_t tilemap;
	SEGMENT CODE
;  190	
;  191	int getXBlock(int xBlock)
;  192	{
_getXBlock:
	CALL	__frameset0
;  193		return TILE_WIDTH * TILEMAP_DRAW_WIDTH * xBlock;
	LD	BC,320
	LD	HL,(IX+6)
	CALL	__imuls
;  194	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getXBlock ***************************
;Name                         Addr/Register   Size   Type
;xBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  195	
;  196	int getYBlock(int yBlock)
;  197	{
_getYBlock:
	CALL	__frameset0
;  198		return TILE_HEIGHT * TILEMAP_DRAW_HEIGHT * yBlock;
	LD	HL,(IX+6)
	LD	A,240
	CALL	__imul_b
;  199	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getYBlock ***************************
;Name                         Addr/Register   Size   Type
;yBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  200	
;  201	int main(void)
;  202	{
_main:
	LD	HL,-14
	CALL	__frameset
;  203		//initialization
;  204		player1Character = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  205		player1CharacterMoving1 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1Character),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  206		player1CharacterMoving2 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving1),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  207		player1CharacterNotGrounded = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving2),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  208		player1CharacterFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterNotGrounded),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  209		player1CharacterMoving1Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  210		player1CharacterMoving2Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving1Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  211		player1CharacterNotGroundedFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving2Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  212		
;  213		player1Weapon = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player1CharacterNotGroundedFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  214		player1WeaponFlipped = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player1Weapon),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  215		
;  216		player2Character = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1WeaponFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  217		player2CharacterMoving1 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2Character),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  218		player2CharacterMoving2 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving1),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  219		player2CharacterNotGrounded = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving2),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  220		player2CharacterFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterNotGrounded),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  221		player2CharacterMoving1Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  222		player2CharacterMoving2Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving1Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  223		player2CharacterNotGroundedFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving2Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  224		
;  225		player2Weapon = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player2CharacterNotGroundedFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  226		player2WeaponFlipped = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player2Weapon),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_player2WeaponFlipped),HL
;  227		
;  228		tilemap.map         = tilemap_map;
	LD	BC,_tilemap_map
	LD	(_tilemap),BC
;  229	    tilemap.tiles       = tileset_tiles;
	LD	BC,_tileset_tiles_data
	LD	(_tilemap+3),BC
;  230	    tilemap.type_width  = gfx_tile_16_pixel;
	LD	A,4
	LD	(_tilemap+10),A
;  231	    tilemap.type_height = gfx_tile_16_pixel;
	LD	(_tilemap+11),A
;  232	    tilemap.tile_height = TILE_HEIGHT;
	LD	A,16
	LD	(_tilemap+6),A
;  233	    tilemap.tile_width  = TILE_WIDTH;
	LD	(_tilemap+7),A
;  234	    tilemap.draw_height = TILEMAP_DRAW_HEIGHT;
	LD	A,15
	LD	(_tilemap+8),A
;  235	    tilemap.draw_width  = TILEMAP_DRAW_WIDTH;
	LD	A,20
	LD	(_tilemap+9),A
;  236	    tilemap.height      = TILEMAP_HEIGHT;
	LD	A,120
	LD	(_tilemap+12),A
;  237	    tilemap.width       = TILEMAP_WIDTH;
	LD	A,160
	LD	(_tilemap+13),A
;  238	    tilemap.y_loc       = Y_OFFSET;
	XOR	A,A
	LD	(_tilemap+14),A
;  239	    tilemap.x_loc       = X_OFFSET;
	LD	BC,0
	LD	(_tilemap+15),BC
;  240		
;  241		gfx_Begin();
	CALL	_gfx_Begin
;  242		
;  243		gfx_SetPalette(global_palette, sizeof_global_palette, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,264
	PUSH	BC
	LD	BC,_global_palette
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  244		gfx_SetTransparentColor(TRANSPARENT);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;  245	    gfx_SetColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  246		
;  247		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  248		
;  249		gfx_SetMonospaceFont(8);
	LD	BC,8
	PUSH	BC
	CALL	_gfx_SetMonospaceFont
	POP	BC
;  250		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  251	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  252		
;  253		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  254		gfx_PrintStringXY(version, 296, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,_version
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  255		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  256		
;  257		srand(rtc_Time());
	LD	BC,(15925316)
	PUSH	BC
	CALL	_srand
	POP	BC
;  258		
;  259		character0MoveSpeed = 4;
	LD	BC,4
	LD	(_character0MoveSpeed),BC
;  260		character0MoveAnimationSpeed = 3;
	LD	BC,3
	LD	(_character0MoveAnimationSpeed),BC
;  261		character0FallSpeed = 4;
	LD	BC,4
	LD	(_character0FallSpeed),BC
;  262		character0JumpSpeed = 8;
	LD	BC,8
	LD	(_character0JumpSpeed),BC
;  263		character0JumpHeight = 10;
	LD	BC,10
	LD	(_character0JumpHeight),BC
;  264				
;  265		character0WeaponSpeed = 8;
	LD	BC,8
	LD	(_character0WeaponSpeed),BC
;  266		character0WeaponKnockback = 4;
	LD	BC,4
	LD	(_character0WeaponKnockback),BC
;  267		character0WeaponKnockbackStrength = 6;
	LD	BC,6
	LD	(_character0WeaponKnockbackStrength),BC
;  268		
;  269		character1MoveSpeed = 8;
	LD	BC,8
	LD	(_character1MoveSpeed),BC
;  270		character1MoveAnimationSpeed = 2;
	LD	BC,2
	LD	(_character1MoveAnimationSpeed),BC
;  271		character1FallSpeed = 4;
	LD	BC,4
	LD	(_character1FallSpeed),BC
;  272		character1JumpSpeed = 8;
	LD	BC,8
	LD	(_character1JumpSpeed),BC
;  273		character1JumpHeight = 15;
	LD	BC,15
	LD	(_character1JumpHeight),BC
;  274		
;  275		character1WeaponSpeed = 6;
	LD	BC,6
	LD	(_character1WeaponSpeed),BC
;  276		character1WeaponKnockback = 4;
	LD	BC,4
	LD	(_character1WeaponKnockback),BC
;  277		character1WeaponKnockbackStrength = 4;
	LD	(_character1WeaponKnockbackStrength),BC
;  278		
;  279		kb_Scan();
	CALL	_kb_Scan
;  280	    key = kb_Data[7];
	LD	A,(16056350)
	LD	(_key),A
;  281		if(key & kb_Up && key & kb_Down && key & kb_Left && key & kb_Right)
	AND	A,8
	JR	Z,L_6
	LD	A,(_key)
	AND	A,1
	JR	Z,L_6
	LD	A,(_key)
	AND	A,2
	JR	Z,L_6
	LD	A,(_key)
	AND	A,4
	JR	Z,L_6
;  282		{
;  283			testMode = 1;
	LD	BC,1
	LD	(_testMode),BC
;  284		}
L_6:
;  285		
;  286		delay(2000);
	LD	BC,2000
	PUSH	BC
	CALL	_delay
	POP	BC
;  287		
;  288		//---------------------------------------------------------------
;  289		
;  290		//start screen
;  291		startScreen:
L_7:
;  292		
;  293		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  294		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  295	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  296		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  297		if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_9
;  298		{
;  299			gfx_PrintStringXY("TEST MODE", 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  300		}
L_9:
;  301		gfx_PrintStringXY("Press [2nd] to start...", 78, 200);
	LD	BC,200
	PUSH	BC
	LD	BC,78
	PUSH	BC
	LD	BC,L__8
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  302		gfx_PrintStringXY(version, 296, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,_version
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  303		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  304		while(os_GetCSC() != sk_2nd);
L_11:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_11
;  305		
;  306		//---------------------------------------------------------------
;  307		
;  308		//main menu
;  309		mainMenu:
L_12:
;  310		
;  311		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  312		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  313		while(selecting)
	JR	L_35
L_36:
;  314		{
;  315			gfx_Tilemap(&tilemap, getXBlock(1), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  316			gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  317			gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  318			
;  319			key = os_GetCSC();
	CALL	_os_GetCSC
;  320			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_24
;  321			{
;  322				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  323			}
;  324			else if(key == sk_Clear)
	JR	L_27
L_24:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_7
;  325			{
;  326				goto startScreen;
;  327			}
;  328			else if(key == sk_Up && selection != 0)
	LD	A,(_key)
	CP	A,4
	JR	NZ,L_20
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_20
;  329			{
;  330				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  331			}
;  332			else if(key == sk_Down && selection != 1)
	JR	L_27
L_20:
	LD	A,(_key)
	CP	A,1
	JR	NZ,L_27
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_27
;  333			{
;  334				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  335			}
L_27:
;  336			
;  337			if(selection == 0)
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_26
;  338			{
;  339				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  340			}
;  341			else
	JR	L_28
L_26:
;  342			{
;  343				gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  344			}
L_28:
;  345			gfx_PrintStringXY("Singleplayer", 112, 68);
	LD	BC,68
	PUSH	BC
	LD	BC,112
	PUSH	BC
	LD	BC,L__17
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  346			if(selection == -1)
	LD	BC,16777215
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_30
;  347			{
;  348				gfx_SetTextFGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  349			}
;  350			else
	JR	L_31
L_30:
;  351			{
;  352				gfx_SetTextFGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  353			}
L_31:
;  354			gfx_PrintStringXY("Multiplayer", 116, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,116
	PUSH	BC
	LD	BC,L__19
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  355			if(selection == 1)
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_33
;  356			{
;  357				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  358			}
;  359			else
	JR	L_34
L_33:
;  360			{
;  361				gfx_SetTextFGColor(BLACK);
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  362			}
L_34:
;  363			gfx_PrintStringXY("Quit game", 124, 132);
	LD	BC,132
	PUSH	BC
	LD	BC,124
	PUSH	BC
	LD	BC,L__21
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  364			gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  365			gfx_PrintStringXY("Star it on GitHub!", 90, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,90
	PUSH	BC
	LD	BC,L__22
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  366			
;  367			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  368		}
L_35:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_36
;  369		
;  370		switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__24:
	DW	2
	DB	0
	DW24	L_37	

	DB	1
	DW24	L_39	

	DW24	L_44	

;  371		{
;  372			case 0:
L_37:
;  373				players = 1;
	LD	BC,1
	LD	(_players),BC
;  374				break;
;  375			case 1:
;  376				goto quitGame;
;  377				break;
;  378		}
L_44:
;  379		
;  380		if(players == 1)
	LD	HL,(_players)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_43
;  381		{
;  382			player2IsAi = 1;
	LD	(_player2IsAi),BC
;  383		}
;  384		else if(players == 2)
	JR	L_45
L_43:
	LD	BC,2
	LD	HL,(_players)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_45
;  385		{
;  386			player2IsAi = 0;
	LD	BC,0
	LD	(_player2IsAi),BC
;  387		}
;  388		
;  389		goto mapSelector;
L_45:
;  390		
;  391		//---------------------------------------------------------------
;  392		
;  393		//map selector
;  394		mapSelector:
;  395		
;  396		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  397		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  398		while(selecting)
	JR	L_63
L_64:
;  399		{
;  400			gfx_Tilemap(&tilemap, getXBlock(2), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,2
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  401			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  402			gfx_SetTextBGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  403			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  404			gfx_PrintStringXY("Select a map:", 62, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,L__27
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  405			
;  406			key = os_GetCSC();
	CALL	_os_GetCSC
;  407			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_57
;  408			{
;  409				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  410			}
;  411			else if(key == sk_Clear)
	JR	L_61
L_57:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_12
;  412			{
;  413				goto mainMenu;
;  414			}
;  415			else if(key == sk_Left && selection != 0)
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_53
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_53
;  416			{
;  417				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  418			}
;  419			else if(key == sk_Right && selection != 2)
	JR	L_61
L_53:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_61
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_61
;  420			{
;  421				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  422			}
L_61:
;  423			
;  424			switch(selection)
	LD	HL,(_selection)
	CALL	__seqcase
L__34:
	DW	3
	DW	0
	DB	0
	DW24	L_58	

	DW24	L_59	

	DW24	L_60	

	DW24	L_62	

;  425			{
;  426				case 0:
L_58:
;  427					gfx_TransparentSprite(mapHighlighter, 32, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  428					break;
	JR	L_62
;  429				case 1:
L_59:
;  430					gfx_TransparentSprite(mapHighlighter, 96, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  431					break;
	JR	L_62
;  432				case 2:
L_60:
;  433					gfx_TransparentSprite(mapHighlighter, 160, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,160
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  434					break;
;  435			}
L_62:
;  436			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  437		}
L_63:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_64
;  438		
;  439		if(selection == 2)  //random map
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_69
;  440		{
;  441			selection = random();
	CALL	_random
	LD	(_selection),HL
;  442			if(selection < 0.5)
	LD	BC,(_selection)
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,63
	CALL	__fcmp
	JP	P,L_66
;  443			{
;  444				selection = 0;
	LD	(_selection),BC
;  445			}
;  446			else
	JR	L_69
L_66:
;  447			{
;  448				selection = 1;
	LD	BC,1
	LD	(_selection),BC
;  449			}
;  450		}
L_69:
;  451		
;  452		map = selection;
	LD	BC,(_selection)
	LD	(_map),BC
;  453		mapAnimation = 0;
	LD	BC,0
	LD	(_mapAnimation),BC
;  454		switch(map)
	LD	HL,(_map)
	CALL	__case8
L__38:
	DW	2
	DB	0
	DW24	L_70	

	DB	1
	DW24	L_71	

	DW24	L_72	

;  455		{
;  456			case 0:
L_70:
;  457				mapXBlock1 = 3;
	LD	BC,3
	LD	(_mapXBlock1),BC
;  458				mapYBlock1 = 0;
	LD	BC,0
	LD	(_mapYBlock1),BC
;  459				break;
	JR	L_72
;  460			case 1:
L_71:
;  461				mapAnimation = 2;
	LD	BC,2
	LD	(_mapAnimation),BC
;  462				mapAnimationSpeed = 25;
	LD	BC,25
	LD	(_mapAnimationSpeed),BC
;  463				mapXBlock1 = 4;
	LD	BC,4
	LD	(_mapXBlock1),BC
;  464				mapYBlock1 = 0;
	LD	BC,0
	LD	(_mapYBlock1),BC
;  465				mapXBlock2 = 5;
	LD	BC,5
	LD	(_mapXBlock2),BC
;  466				mapYBlock2 = 0;
	LD	BC,0
	LD	(_mapYBlock2),BC
;  467				mapXBlock3 = 6;
	LD	BC,6
	LD	(_mapXBlock3),BC
;  468				mapYBlock3 = 0;
	LD	BC,0
	LD	(_mapYBlock3),BC
;  469				break;
;  470		}
;  471		
;  472		goto characterSelector1;
L_72:
;  473		
;  474		//---------------------------------------------------------------
;  475		
;  476		//character selector 1
;  477		characterSelector1:
;  478		
;  479		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  480		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  481		
;  482		while(selecting)
	JR	L_96
L_97:
;  483		{
;  484			gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  485			gfx_SetColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  486			gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  487			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  488			gfx_SetTextBGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  489			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  490			gfx_PrintStringXY("Select character 1:", 10, 76);
	LD	BC,76
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__39
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  491			gfx_TransparentSprite(characterHighlighter, 138, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,138
	PUSH	BC
	LD	BC,_characterHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  492			
;  493			key = os_GetCSC();
	CALL	_os_GetCSC
;  494			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_90
;  495			{
;  496				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  497			}
;  498			else if(key == sk_Clear)
	JR	L_94
L_90:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_45
;  499			{
;  500				goto mapSelector;
;  501			}
;  502			else if(key == sk_Left && selection != 0)
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_86
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_86
;  503			{
;  504				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  505			}
;  506			else if(key == sk_Left && selection == 0)
	JR	L_94
L_86:
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_84
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_84
;  507			{
;  508				selection = 2;
	LD	BC,2
	LD	(_selection),BC
;  509			}
;  510			else if(key == sk_Right && selection != 2)
	JR	L_94
L_84:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_82
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_82
;  511			{
;  512				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  513			}
;  514			else if(key == sk_Right && selection == 2)
	JR	L_94
L_82:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_94
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_94
;  515			{
;  516				selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  517			}
L_94:
;  518			
;  519			switch(selection)
	LD	HL,(_selection)
	CALL	__seqcase
L__50:
	DW	3
	DW	0
	DB	0
	DW24	L_91	

	DW24	L_92	

	DW24	L_93	

	DW24	L_95	

;  520			{
;  521				case 0:
L_91:
;  522					gfx_TransparentSprite(randomCharacter, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_randomCharacter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  523					gfx_TransparentSprite(character0, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  524					gfx_TransparentSprite(character1, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  525					break;
	JR	L_95
;  526				case 1:
L_92:
;  527					gfx_TransparentSprite(character0, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  528					gfx_TransparentSprite(character1, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  529					gfx_TransparentSprite(randomCharacter, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_randomCharacter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  530					break;
	JR	L_95
;  531				case 2:
L_93:
;  532					gfx_TransparentSprite(character1, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  533					gfx_TransparentSprite(randomCharacter, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_randomCharacter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  534					gfx_TransparentSprite(character0, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  535					break;
;  536			}
L_95:
;  537			
;  538			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  539		}
L_96:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_97
;  540		
;  541		if(selection == 2)  //random character
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_102
;  542		{
;  543			selection = random();
	CALL	_random
	LD	(_selection),HL
;  544			if(selection < 0.5)
	LD	BC,(_selection)
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,63
	CALL	__fcmp
	JP	P,L_99
;  545			{
;  546				selection = 0;
	LD	(_selection),BC
;  547			}
;  548			else
	JR	L_102
L_99:
;  549			{
;  550				selection = 1;
	LD	BC,1
	LD	(_selection),BC
;  551			}
;  552		}
L_102:
;  553		
;  554		player1CharacterSelection = selection;
	LD	BC,(_selection)
	LD	(_player1CharacterSelection),BC
;  555		
;  556		//---------------------------------------------------------------
;  557		
;  558		//character selector 2
;  559		characterSelector2:
L_103:
;  560		
;  561		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  562		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  563		
;  564		while(selecting)
	JR	L_126
L_127:
;  565		{
;  566			gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  567			gfx_SetColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  568			gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  569			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  570			gfx_SetTextBGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  571			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  572			gfx_PrintStringXY("Select character 2:", 10, 76);
	LD	BC,76
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__54
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  573			gfx_TransparentSprite(characterHighlighter, 138, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,138
	PUSH	BC
	LD	BC,_characterHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  574			
;  575			key = os_GetCSC();
	CALL	_os_GetCSC
;  576			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_120
;  577			{
;  578				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  579			}
;  580			else if(key == sk_Clear)
	JR	L_124
L_120:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_72
;  581			{
;  582				goto characterSelector1;
;  583			}
;  584			else if(key == sk_Left && selection != 0)
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_116
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_116
;  585			{
;  586				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  587			}
;  588			else if(key == sk_Left && selection == 0)
	JR	L_124
L_116:
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_114
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_114
;  589			{
;  590				selection = 2;
	LD	BC,2
	LD	(_selection),BC
;  591			}
;  592			else if(key == sk_Right && selection != 2)
	JR	L_124
L_114:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_112
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_112
;  593			{
;  594				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  595			}
;  596			else if(key == sk_Right && selection == 2)
	JR	L_124
L_112:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_124
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_124
;  597			{
;  598				selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  599			}
L_124:
;  600			
;  601			switch(selection)
	LD	HL,(_selection)
	CALL	__seqcase
L__65:
	DW	3
	DW	0
	DB	0
	DW24	L_121	

	DW24	L_122	

	DW24	L_123	

	DW24	L_125	

;  602			{
;  603				case 0:
L_121:
;  604					gfx_TransparentSprite(randomCharacter, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_randomCharacter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  605					gfx_TransparentSprite(character0, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  606					gfx_TransparentSprite(character1, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  607					break;
	JR	L_125
;  608				case 1:
L_122:
;  609					gfx_TransparentSprite(character0, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  610					gfx_TransparentSprite(character1, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  611					gfx_TransparentSprite(randomCharacter, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_randomCharacter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  612					break;
	JR	L_125
;  613				case 2:
L_123:
;  614					gfx_TransparentSprite(character1, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  615					gfx_TransparentSprite(randomCharacter, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_randomCharacter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  616					gfx_TransparentSprite(character0, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  617					break;
;  618			}
L_125:
;  619			
;  620			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  621		}
L_126:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_127
;  622		
;  623		if(selection == 2)  //random character
	LD	BC,2
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_132
;  624		{
;  625			selection = random();
	CALL	_random
	LD	(_selection),HL
;  626			if(selection < 0.5)
	LD	BC,(_selection)
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,0
	LD	A,63
	CALL	__fcmp
	JP	P,L_129
;  627			{
;  628				selection = 0;
	LD	(_selection),BC
;  629			}
;  630			else
	JR	L_132
L_129:
;  631			{
;  632				selection = 1;
	LD	BC,1
	LD	(_selection),BC
;  633			}
;  634		}
L_132:
;  635		
;  636		player2CharacterSelection = selection;
	LD	BC,(_selection)
	LD	(_player2CharacterSelection),BC
;  637		
;  638		if(player2IsAi == 0)
	LD	HL,(_player2IsAi)
	CALL	__icmpzero
	JR	Z,L_133
;  639		{
;  640			goto prepareFight;
;  641		}
;  642		else
;  643		{
;  644			goto aiDifficultySelector;
;  645		}
;  646		
;  647		//---------------------------------------------------------------
;  648		
;  649		//aiDifficultySelector
;  650		aiDifficultySelector:
;  651		
;  652		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  653		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  654		
;  655		while(selecting)
	JR	L_144
L_145:
;  656		{
;  657			gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  658			gfx_SetColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  659			gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  660			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  661			gfx_SetTextBGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  662			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  663			gfx_PrintStringXY("Select a difficulty:", 6, 76);
	LD	BC,76
	PUSH	BC
	LD	BC,6
	PUSH	BC
	LD	BC,L__70
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  664			gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  665			gfx_SetTextFGColor(GREEN);
	LD	BC,4
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  666			gfx_PrintStringXY("1: Easy", 132, 115);
	LD	BC,115
	PUSH	BC
	LD	BC,132
	PUSH	BC
	LD	BC,L__71
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  667			gfx_SetTextFGColor(YELLOW);
	LD	BC,231
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  668			gfx_PrintStringXY("2: Normal", 126, 125);
	LD	BC,125
	PUSH	BC
	LD	BC,126
	PUSH	BC
	LD	BC,L__72
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  669			gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  670			gfx_PrintStringXY("3: Hard", 132, 135);
	LD	BC,135
	PUSH	BC
	LD	BC,132
	PUSH	BC
	LD	BC,L__73
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  671			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  672			gfx_PrintStringXY("4: Random", 126, 145);
	LD	BC,145
	PUSH	BC
	LD	BC,126
	PUSH	BC
	LD	BC,L__74
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  673			
;  674			key = os_GetCSC();
	CALL	_os_GetCSC
;  675			switch(key)
	UEXT	HL
	LD	L,A
	LD	(_key),A
	CALL	__case8
L__75:
	DW	5
	DB	15
	DW24	L_103	

	DB	18
	DW24	L_141	

	DB	26
	DW24	L_140	

	DB	34
	DW24	L_139	

	DB	35
	DW24	L_142	

	DW24	L_143	

;  676			{
;  677				case sk_Clear:
;  678					goto characterSelector2;
;  679					break;
;  680				case sk_1:
L_139:
;  681					selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  682					selecting = 0;
	LD	(_selecting),BC
;  683					break;
	JR	L_143
;  684				case sk_2:
L_140:
;  685					selection = 1;
	LD	BC,1
	LD	(_selection),BC
;  686					selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  687					break;
	JR	L_143
;  688				case sk_3:
L_141:
;  689					selection = 2;
	LD	BC,2
	LD	(_selection),BC
;  690					selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  691					break;
	JR	L_143
;  692				case sk_4:
L_142:
;  693					selection = 3;
	LD	BC,3
	LD	(_selection),BC
;  694					selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  695					break;
;  696			}
L_143:
;  697			
;  698			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  699		}
L_144:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_145
;  700		
;  701		if(selection == 3)  //random difficulty
	LD	BC,3
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_156
;  702		{
;  703			selection = random();
	CALL	_random
	LD	(_selection),HL
;  704			if(selection < 0.3)
	LD	BC,(_selection)
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,10066330
	LD	A,62
	CALL	__fcmp
	JP	P,L_150
;  705			{
;  706				selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  707			}
;  708			else if(selection >= 0.3 && selection < 0.6)
	JR	L_156
L_150:
	LD	BC,(_selection)
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,10066330
	LD	A,62
	CALL	__fcmp
	JP	M,L_148
	LD	BC,(_selection)
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,1677722
	LD	A,63
	CALL	__fcmp
	JP	P,L_148
;  709			{
;  710				selection = 1;
	LD	BC,1
	LD	(_selection),BC
;  711			}
;  712			else
	JR	L_156
L_148:
;  713			{
;  714				selection = 2;
	LD	BC,2
	LD	(_selection),BC
;  715			}
;  716		}
L_156:
;  717		
;  718		switch(selection)
	LD	HL,(_selection)
	CALL	__seqcase
L__81:
	DW	3
	DW	0
	DB	0
	DW24	L_153	

	DW24	L_154	

	DW24	L_155	

	DW24	L_157	

;  719		{
;  720			case 0:
L_153:
;  721				player2AiAttackDelay = 15;
	LD	BC,15
	LD	(_player2AiAttackDelay),BC
;  722				break;
	JR	L_157
;  723			case 1:
L_154:
;  724				player2AiAttackDelay = 10;
	LD	BC,10
	LD	(_player2AiAttackDelay),BC
;  725				break;
	JR	L_157
;  726			case 2:
L_155:
;  727				player2AiAttackDelay = 5;
	LD	BC,5
	LD	(_player2AiAttackDelay),BC
;  728				break;
;  729		}
L_157:
;  730		
;  731		player2AiAttackDelayCount = 0;
	LD	BC,0
	LD	(_player2AiAttackDelayCount),BC
L_133:
;  732		
;  733		goto prepareFight;
;  734		
;  735		//---------------------------------------------------------------
;  736		
;  737		//prepareFight
;  738		prepareFight:
;  739		
;  740		mapAnimationCount = 0;
	LD	BC,0
	LD	(_mapAnimationCount),BC
;  741		mapAnimationState = 0;
	LD	(_mapAnimationState),BC
;  742		
;  743		player1Flipped = 0;
	LD	(_player1Flipped),BC
;  744		player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
;  745		player1Jumping = 0;
	LD	(_player1Jumping),BC
;  746		player1Grounded = 1;
	LD	BC,1
	LD	(_player1Grounded),BC
;  747		player1ShieldActive = 0;
	LD	BC,0
	LD	(_player1ShieldActive),BC
;  748		player1Lifes = 3;
	LD	BC,3
	LD	(_player1Lifes),BC
;  749		
;  750		player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
;  751		player1Weapon2 = 0;
	LD	(_player1Weapon2),BC
;  752		player1Weapon3 = 0;
	LD	(_player1Weapon3),BC
;  753		
;  754		player2Flipped = 1;
	LD	BC,1
	LD	(_player2Flipped),BC
;  755		player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
;  756		player2Jumping = 0;
	LD	(_player2Jumping),BC
;  757		player2Grounded = 1;
	LD	BC,1
	LD	(_player2Grounded),BC
;  758		player2ShieldActive = 0;
	LD	BC,0
	LD	(_player2ShieldActive),BC
;  759		player2Lifes = 3;
	LD	BC,3
	LD	(_player2Lifes),BC
;  760		
;  761		player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
;  762		player2Weapon2 = 0;
	LD	(_player2Weapon2),BC
;  763		player2Weapon3 = 0;
	LD	(_player2Weapon3),BC
;  764		
;  765		switch(map)
	LD	HL,(_map)
	CALL	__case8
L__82:
	DW	2
	DB	0
	DW24	L_158	

	DB	1
	DW24	L_159	

	DW24	L_160	

;  766		{
;  767			case 0:
L_158:
;  768				player1SpawnX = 80;
	LD	BC,80
	LD	(_player1SpawnX),BC
;  769				player1SpawnY = 132;
	LD	BC,132
	LD	(_player1SpawnY),BC
;  770				
;  771				player2SpawnX = 220;
	LD	BC,220
	LD	(_player2SpawnX),BC
;  772				player2SpawnY = 132;
	LD	BC,132
	LD	(_player2SpawnY),BC
;  773				break;
	JR	L_160
;  774			case 1:
L_159:
;  775				player1SpawnX = 32;
	LD	BC,32
	LD	(_player1SpawnX),BC
;  776				player1SpawnY = 96;
	LD	BC,96
	LD	(_player1SpawnY),BC
;  777				
;  778				player2SpawnX = 256;
	LD	BC,256
	LD	(_player2SpawnX),BC
;  779				player2SpawnY = 96;
	LD	BC,96
	LD	(_player2SpawnY),BC
;  780				break;
;  781		}
L_160:
;  782		player1X = player1SpawnX;
	LD	BC,(_player1SpawnX)
	LD	(_player1X),BC
;  783		player1Y = player1SpawnY;
	LD	BC,(_player1SpawnY)
	LD	(_player1Y),BC
;  784		player2X = player2SpawnX;
	LD	BC,(_player2SpawnX)
	LD	(_player2X),BC
;  785		player2Y = player2SpawnY;
	LD	BC,(_player2SpawnY)
	LD	(_player2Y),BC
;  786		
;  787		switch(player1CharacterSelection)
	LD	HL,(_player1CharacterSelection)
	CALL	__case8
L__83:
	DW	2
	DB	0
	DW24	L_161	

	DB	1
	DW24	L_162	

	DW24	L_165	

;  788		{
;  789			case 0:
L_161:
;  790				player1Character = character0;
	LD	BC,_character0_data
	LD	(_player1Character),BC
;  791				player1CharacterMoving1 = character0Moving1;
	LD	BC,_character0Moving1_data
	LD	(_player1CharacterMoving1),BC
;  792				player1CharacterMoving2 = character0Moving2;
	LD	BC,_character0Moving2_data
	LD	(_player1CharacterMoving2),BC
;  793				player1CharacterNotGrounded = character0NotGrounded;
	LD	BC,_character0NotGrounded_data
	LD	(_player1CharacterNotGrounded),BC
;  794				gfx_FlipSpriteY(character0, player1CharacterFlipped);
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  795				gfx_FlipSpriteY(character0Moving1, player1CharacterMoving1Flipped);
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character0Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  796				gfx_FlipSpriteY(character0Moving2, player1CharacterMoving2Flipped);
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character0Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  797				gfx_FlipSpriteY(character0NotGrounded, player1CharacterNotGroundedFlipped);
	LD	BC,(_player1CharacterNotGroundedFlipped)
	PUSH	BC
	LD	BC,_character0NotGrounded_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  798				
;  799				player1Weapon = character0Weapon;
	LD	BC,_character0Weapon_data
	LD	(_player1Weapon),BC
;  800				gfx_FlipSpriteY(character0Weapon, player1WeaponFlipped);
	LD	BC,(_player1WeaponFlipped)
	PUSH	BC
	LD	BC,_character0Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  801				
;  802				player1MoveSpeed = character0MoveSpeed;
	LD	BC,(_character0MoveSpeed)
	LD	(_player1MoveSpeed),BC
;  803				player1MoveAnimationSpeed = character0MoveAnimationSpeed;
	LD	BC,(_character0MoveAnimationSpeed)
	LD	(_player1MoveAnimationSpeed),BC
;  804				player1FallSpeed = character0FallSpeed;
	LD	BC,(_character0FallSpeed)
	LD	(_player1FallSpeed),BC
;  805				player1JumpSpeed = character0JumpSpeed;
	LD	BC,(_character0JumpSpeed)
	LD	(_player1JumpSpeed),BC
;  806				player1JumpHeight = character0JumpHeight;
	LD	BC,(_character0JumpHeight)
	LD	(_player1JumpHeight),BC
;  807				
;  808				player1WeaponSpeed = character0WeaponSpeed;
	LD	BC,(_character0WeaponSpeed)
	LD	(_player1WeaponSpeed),BC
;  809				player1WeaponKnockback = character0WeaponKnockback;
	LD	BC,(_character0WeaponKnockback)
	LD	(_player1WeaponKnockback),BC
;  810				player1WeaponKnockbackStrength = character0WeaponKnockbackStrength;
	LD	BC,(_character0WeaponKnockbackStrength)
	LD	(_player1WeaponKnockbackStrength),BC
;  811				break;
	JR	L_165
;  812			case 1:
L_162:
;  813				player1Character = character1;
	LD	BC,_character1_data
	LD	(_player1Character),BC
;  814				player1CharacterMoving1 = character1Moving1;
	LD	BC,_character1Moving1_data
	LD	(_player1CharacterMoving1),BC
;  815				player1CharacterMoving2 = character1Moving2;
	LD	BC,_character1Moving2_data
	LD	(_player1CharacterMoving2),BC
;  816				player1CharacterNotGrounded = character1NotGrounded;
	LD	BC,_character1NotGrounded_data
	LD	(_player1CharacterNotGrounded),BC
;  817				gfx_FlipSpriteY(character1, player1CharacterFlipped);
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  818				gfx_FlipSpriteY(character1Moving1, player1CharacterMoving1Flipped);
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character1Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  819				gfx_FlipSpriteY(character1Moving2, player1CharacterMoving2Flipped);
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character1Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  820				gfx_FlipSpriteY(character1NotGrounded, player1CharacterNotGroundedFlipped);
	LD	BC,(_player1CharacterNotGroundedFlipped)
	PUSH	BC
	LD	BC,_character1NotGrounded_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  821				
;  822				player1Weapon = character1Weapon;
	LD	BC,_character1Weapon_data
	LD	(_player1Weapon),BC
;  823				gfx_FlipSpriteY(character1Weapon, player1WeaponFlipped);
	LD	BC,(_player1WeaponFlipped)
	PUSH	BC
	LD	BC,_character1Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  824				
;  825				player1MoveSpeed = character1MoveSpeed;
	LD	BC,(_character1MoveSpeed)
	LD	(_player1MoveSpeed),BC
;  826				player1MoveAnimationSpeed = character1MoveAnimationSpeed;
	LD	BC,(_character1MoveAnimationSpeed)
	LD	(_player1MoveAnimationSpeed),BC
;  827				player1FallSpeed = character1FallSpeed;
	LD	BC,(_character1FallSpeed)
	LD	(_player1FallSpeed),BC
;  828				player1JumpSpeed = character1JumpSpeed;
	LD	BC,(_character1JumpSpeed)
	LD	(_player1JumpSpeed),BC
;  829				player1JumpHeight = character1JumpHeight;
	LD	BC,(_character1JumpHeight)
	LD	(_player1JumpHeight),BC
;  830				
;  831				player1WeaponSpeed = character1WeaponSpeed;
	LD	BC,(_character1WeaponSpeed)
	LD	(_player1WeaponSpeed),BC
;  832				player1WeaponKnockback = character1WeaponKnockback;
	LD	BC,(_character1WeaponKnockback)
	LD	(_player1WeaponKnockback),BC
;  833				player1WeaponKnockbackStrength = character1WeaponKnockbackStrength;
	LD	BC,(_character1WeaponKnockbackStrength)
	LD	(_player1WeaponKnockbackStrength),BC
;  834				break;
;  835		}
L_165:
;  836		switch(player2CharacterSelection)
	LD	HL,(_player2CharacterSelection)
	CALL	__case8
L__84:
	DW	2
	DB	0
	DW24	L_163	

	DB	1
	DW24	L_164	

	DW24	L_166	

;  837		{
;  838			case 0:
L_163:
;  839				player2Character = character0;
	LD	BC,_character0_data
	LD	(_player2Character),BC
;  840				player2CharacterMoving1 = character0Moving1;
	LD	BC,_character0Moving1_data
	LD	(_player2CharacterMoving1),BC
;  841				player2CharacterMoving2 = character0Moving2;
	LD	BC,_character0Moving2_data
	LD	(_player2CharacterMoving2),BC
;  842				player2CharacterNotGrounded = character0NotGrounded;
	LD	BC,_character0NotGrounded_data
	LD	(_player2CharacterNotGrounded),BC
;  843				gfx_FlipSpriteY(character0, player2CharacterFlipped);
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  844				gfx_FlipSpriteY(character0Moving1, player2CharacterMoving1Flipped);
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character0Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  845				gfx_FlipSpriteY(character0Moving2, player2CharacterMoving2Flipped);
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character0Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  846				gfx_FlipSpriteY(character0NotGrounded, player2CharacterNotGroundedFlipped);
	LD	BC,(_player2CharacterNotGroundedFlipped)
	PUSH	BC
	LD	BC,_character0NotGrounded_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  847				
;  848				player2Weapon = character0Weapon;
	LD	BC,_character0Weapon_data
	LD	(_player2Weapon),BC
;  849				gfx_FlipSpriteY(character0Weapon, player2WeaponFlipped);
	LD	BC,(_player2WeaponFlipped)
	PUSH	BC
	LD	BC,_character0Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  850				
;  851				player2MoveSpeed = character0MoveSpeed;
	LD	BC,(_character0MoveSpeed)
	LD	(_player2MoveSpeed),BC
;  852				player2MoveAnimationSpeed = character0MoveAnimationSpeed;
	LD	BC,(_character0MoveAnimationSpeed)
	LD	(_player2MoveAnimationSpeed),BC
;  853				player2FallSpeed = character0FallSpeed;
	LD	BC,(_character0FallSpeed)
	LD	(_player2FallSpeed),BC
;  854				player2JumpSpeed = character0JumpSpeed;
	LD	BC,(_character0JumpSpeed)
	LD	(_player2JumpSpeed),BC
;  855				player2JumpHeight = character0JumpHeight;
	LD	BC,(_character0JumpHeight)
	LD	(_player2JumpHeight),BC
;  856				
;  857				player2WeaponSpeed = character0WeaponSpeed;
	LD	BC,(_character0WeaponSpeed)
	LD	(_player2WeaponSpeed),BC
;  858				player2WeaponKnockback = character0WeaponKnockback;
	LD	BC,(_character0WeaponKnockback)
	LD	(_player2WeaponKnockback),BC
;  859				player2WeaponKnockbackStrength = character0WeaponKnockbackStrength;
	LD	BC,(_character0WeaponKnockbackStrength)
	LD	(_player2WeaponKnockbackStrength),BC
;  860				break;
	JR	L_166
;  861			case 1:
L_164:
;  862				player2Character = character1;
	LD	BC,_character1_data
	LD	(_player2Character),BC
;  863				player2CharacterMoving1 = character1Moving1;
	LD	BC,_character1Moving1_data
	LD	(_player2CharacterMoving1),BC
;  864				player2CharacterMoving2 = character1Moving2;
	LD	BC,_character1Moving2_data
	LD	(_player2CharacterMoving2),BC
;  865				player2CharacterNotGrounded = character1NotGrounded;
	LD	BC,_character1NotGrounded_data
	LD	(_player2CharacterNotGrounded),BC
;  866				gfx_FlipSpriteY(character1, player2CharacterFlipped);
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  867				gfx_FlipSpriteY(character1Moving1, player2CharacterMoving1Flipped);
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character1Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  868				gfx_FlipSpriteY(character1Moving2, player2CharacterMoving2Flipped);
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character1Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  869				gfx_FlipSpriteY(character1NotGrounded, player2CharacterNotGroundedFlipped);
	LD	BC,(_player2CharacterNotGroundedFlipped)
	PUSH	BC
	LD	BC,_character1NotGrounded_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  870				
;  871				player2Weapon = character1Weapon;
	LD	BC,_character1Weapon_data
	LD	(_player2Weapon),BC
;  872				gfx_FlipSpriteY(character1Weapon, player2WeaponFlipped);
	LD	BC,(_player2WeaponFlipped)
	PUSH	BC
	LD	BC,_character1Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  873				
;  874				player2MoveSpeed = character1MoveSpeed;
	LD	BC,(_character1MoveSpeed)
	LD	(_player2MoveSpeed),BC
;  875				player2MoveAnimationSpeed = character1MoveAnimationSpeed;
	LD	BC,(_character1MoveAnimationSpeed)
	LD	(_player2MoveAnimationSpeed),BC
;  876				player2FallSpeed = character1FallSpeed;
	LD	BC,(_character1FallSpeed)
	LD	(_player2FallSpeed),BC
;  877				player2JumpSpeed = character1JumpSpeed;
	LD	BC,(_character1JumpSpeed)
	LD	(_player2JumpSpeed),BC
;  878				player2JumpHeight = character1JumpHeight;
	LD	BC,(_character1JumpHeight)
	LD	(_player2JumpHeight),BC
;  879				
;  880				player2WeaponSpeed = character1WeaponSpeed;
	LD	BC,(_character1WeaponSpeed)
	LD	(_player2WeaponSpeed),BC
;  881				player2WeaponKnockback = character1WeaponKnockback;
	LD	BC,(_character1WeaponKnockback)
	LD	(_player2WeaponKnockback),BC
;  882				player2WeaponKnockbackStrength = character1WeaponKnockbackStrength;
	LD	BC,(_character1WeaponKnockbackStrength)
	LD	(_player2WeaponKnockbackStrength),BC
;  883				break;
;  884		}
L_166:
;  885		
;  886		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  887		gfx_TransparentSprite(counter3, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  888		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  889		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  890		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  891		gfx_TransparentSprite(counter2, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  892		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  893		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  894		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  895		gfx_TransparentSprite(counter1, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  896		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  897		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  898		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  899		gfx_TransparentSprite(counterFight, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counterFight_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  900		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  901		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  902		
;  903		goto fight;
L_167:
;  904		
;  905		//---------------------------------------------------------------
;  906		
;  907		//fight
;  908		fight:
;  909		
;  910		gfx_TransparentSprite(statusUi, 128, 208);
	LD	BC,208
	PUSH	BC
	LD	BC,128
	PUSH	BC
	LD	BC,_statusUi_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  911		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  912		gfx_SetTextBGColor(gfx_GetPixel(150, 224));
	LD	BC,224
	PUSH	BC
	LD	BC,150
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  913		
;  914		while(1)
L_702:
;  915		{
;  916			//fight - animate map
;  917			if(mapAnimation > 0)
	LD	BC,(_mapAnimation)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_174
;  918			{
;  919				mapAnimationCount++;
	LD	BC,(_mapAnimationCount)
	INC	BC
	LD	(_mapAnimationCount),BC
;  920			}
L_174:
;  921			
;  922			if(mapAnimationCount == mapAnimationSpeed)
	LD	BC,(_mapAnimationSpeed)
	LD	HL,(_mapAnimationCount)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_181
;  923			{
;  924				mapAnimationCount = 0;
	LD	BC,0
	LD	(_mapAnimationCount),BC
;  925				if(mapAnimationState < mapAnimation)
	LD	BC,(_mapAnimation)
	LD	HL,(_mapAnimationState)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_172
;  926				{
;  927					mapAnimationState++;
	LD	BC,(_mapAnimationState)
	INC	BC
	LD	(_mapAnimationState),BC
;  928				}
;  929				else
	JR	L_181
L_172:
;  930				{
;  931					mapAnimationState = 0;
	LD	BC,0
	LD	(_mapAnimationState),BC
;  932				}
;  933			}
L_181:
;  934			
;  935			//fight - draw map
;  936			if(mapAnimationState == 0)
	LD	HL,(_mapAnimationState)
	CALL	__icmpzero
	JR	NZ,L_180
;  937			{
;  938				gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  939			}
;  940			else if(mapAnimationState == 1 || mapAnimationState == 3)
	JR	L_182
L_180:
	LD	BC,1
	LD	HL,(_mapAnimationState)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_177
	LD	BC,3
	LD	HL,(_mapAnimationState)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_178
L_177:
;  941			{
;  942				gfx_Tilemap(&tilemap, getXBlock(mapXBlock2), getYBlock(mapYBlock2));
	LD	BC,(_mapYBlock2)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock2)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  943			}
;  944			else if(mapAnimationState == 2)
	JR	L_182
L_178:
	LD	BC,2
	LD	HL,(_mapAnimationState)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_182
;  945			{
;  946				gfx_Tilemap(&tilemap, getXBlock(mapXBlock3), getYBlock(mapYBlock3));
	LD	BC,(_mapYBlock3)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock3)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  947			}
L_182:
;  948			
;  949			//fight - get actions from player inputs (player 1)
;  950			kb_Scan();
	CALL	_kb_Scan
;  951	        key = kb_Data[7];
	LD	A,(16056350)
	LD	(_key),A
;  952			if(key & kb_Up)
	AND	A,8
	JR	Z,L_190
;  953			{
;  954				if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_190
;  955				{
;  956					player1Y -= 4;
	LD	IY,(_player1Y)
	LEA	BC,IY+-4
	LD	(_player1Y),BC
;  957				}
;  958			}
L_190:
;  959			if(key & kb_Down)
	LD	A,(_key)
	AND	A,1
	JR	Z,L_189
;  960			{
;  961				if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_186
;  962				{
;  963					player1Y += 4;
	LD	IY,(_player1Y)
	LEA	BC,IY+4
	LD	(_player1Y),BC
;  964				}
L_186:
;  965				player1Jumping = 0;
	LD	BC,0
	LD	(_player1Jumping),BC
;  966				if(player1Grounded == 1)
	LD	HL,(_player1Grounded)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_201
;  967				{
;  968					player1ShieldActive = 1;
	LD	(_player1ShieldActive),BC
;  969				}
;  970			}
;  971			else
	JR	L_201
L_189:
;  972			{
;  973				player1ShieldActive = 0;
	LD	BC,0
	LD	(_player1ShieldActive),BC
;  974			}
L_201:
;  975			if(key & kb_Left && player1ShieldActive == 0)
	LD	A,(_key)
	AND	A,2
	JR	Z,L_212
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_212
;  976			{
;  977				player1X -= player1MoveSpeed;
	LD	HL,(_player1X)
	LD	BC,(_player1MoveSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1X),HL
;  978				if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_194
;  979				{
;  980					player1Flipped = 1;
	LD	BC,1
	LD	(_player1Flipped),BC
;  981					player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  982					player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
;  983				}
L_194:
;  984				player1MoveAnimationCount++;
	LD	BC,(_player1MoveAnimationCount)
	INC	BC
	LD	(_player1MoveAnimationCount),BC
;  985				if(player1MoveAnimationCount == player1MoveAnimationSpeed)
	LD	BC,(_player1MoveAnimationSpeed)
	LD	HL,(_player1MoveAnimationCount)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_212
;  986				{
;  987					if(player1MoveAnimation != 3)
	LD	BC,3
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_197
;  988					{
;  989						player1MoveAnimation++;
	LD	BC,(_player1MoveAnimation)
	INC	BC
	LD	(_player1MoveAnimation),BC
;  990					}
;  991					else
	JR	L_198
L_197:
;  992					{
;  993						player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  994					}
L_198:
;  995					player1MoveAnimationCount = 0;
	LD	BC,0
	LD	(_player1MoveAnimationCount),BC
;  996				}
;  997			}
L_212:
;  998			if(key & kb_Right && player1ShieldActive == 0)
	LD	A,(_key)
	AND	A,4
	JR	Z,L_213
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_213
;  999			{
; 1000				player1X += player1MoveSpeed;
	LD	BC,(_player1MoveSpeed)
	LD	HL,(_player1X)
	ADD	HL,BC
	LD	(_player1X),HL
; 1001				if(player1Flipped == 1)
	LD	HL,(_player1Flipped)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_205
; 1002				{
; 1003					player1Flipped = 0;
	LD	BC,0
	LD	(_player1Flipped),BC
; 1004					player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
; 1005					player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
; 1006				}
L_205:
; 1007				player1MoveAnimationCount++;
	LD	BC,(_player1MoveAnimationCount)
	INC	BC
	LD	(_player1MoveAnimationCount),BC
; 1008				if(player1MoveAnimationCount == player1MoveAnimationSpeed)
	LD	BC,(_player1MoveAnimationSpeed)
	LD	HL,(_player1MoveAnimationCount)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_213
; 1009				{
; 1010					if(player1MoveAnimation != 3)
	LD	BC,3
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_208
; 1011					{
; 1012						player1MoveAnimation++;
	LD	BC,(_player1MoveAnimation)
	INC	BC
	LD	(_player1MoveAnimation),BC
; 1013					}
; 1014					else
	JR	L_209
L_208:
; 1015					{
; 1016						player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
; 1017					}
L_209:
; 1018					player1MoveAnimationCount = 0;
	LD	BC,0
	LD	(_player1MoveAnimationCount),BC
; 1019				}
; 1020			}
L_213:
; 1021			
; 1022			key = os_GetCSC();
	CALL	_os_GetCSC
; 1023			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_231
; 1024			{
; 1025				if(player1Grounded == 1)
	LD	BC,1
	LD	HL,(_player1Grounded)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_231
; 1026				{
; 1027					player1Jumping = player1JumpHeight;
	LD	BC,(_player1JumpHeight)
	LD	(_player1Jumping),BC
; 1028				}
; 1029			}
L_231:
; 1030			if(key == sk_Alpha)
	LD	A,(_key)
	CP	A,48
	JR	NZ,L_234
; 1031			{
; 1032				if(player1Weapon1 == 0)
	LD	HL,(_player1Weapon1)
	CALL	__icmpzero
	JR	NZ,L_229
; 1033				{
; 1034					player1Weapon1 = 1;
	LD	BC,1
	LD	(_player1Weapon1),BC
; 1035					player1Weapon1Flipped = player1Flipped;
	LD	BC,(_player1Flipped)
	LD	(_player1Weapon1Flipped),BC
; 1036					if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_217
; 1037					{
; 1038						player1Weapon1X = player1X + 26;
	LD	IY,(_player1X)
	LEA	BC,IY+26
	LD	(_player1Weapon1X),BC
; 1039					}
; 1040					else
	JR	L_218
L_217:
; 1041					{
; 1042						player1Weapon1X = player1X;
	LD	BC,(_player1X)
	LD	(_player1Weapon1X),BC
; 1043					}
L_218:
; 1044					player1Weapon1Y = player1Y + 17;
	LD	IY,(_player1Y)
	LEA	BC,IY+17
	LD	(_player1Weapon1Y),BC
; 1045				}
; 1046				else if(player1Weapon2 == 0)
	JR	L_234
L_229:
	LD	HL,(_player1Weapon2)
	CALL	__icmpzero
	JR	NZ,L_227
; 1047				{
; 1048					player1Weapon2 = 1;
	LD	BC,1
	LD	(_player1Weapon2),BC
; 1049					player1Weapon2Flipped = player1Flipped;
	LD	BC,(_player1Flipped)
	LD	(_player1Weapon2Flipped),BC
; 1050					if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_220
; 1051					{
; 1052						player1Weapon2X = player1X + 26;
	LD	IY,(_player1X)
	LEA	BC,IY+26
	LD	(_player1Weapon2X),BC
; 1053					}
; 1054					else
	JR	L_221
L_220:
; 1055					{
; 1056						player1Weapon2X = player1X;
	LD	BC,(_player1X)
	LD	(_player1Weapon2X),BC
; 1057					}
L_221:
; 1058					player1Weapon2Y = player1Y + 17;
	LD	IY,(_player1Y)
	LEA	BC,IY+17
	LD	(_player1Weapon2Y),BC
; 1059				}
; 1060				else if(player1Weapon3 == 0)
	JR	L_234
L_227:
	LD	HL,(_player1Weapon3)
	CALL	__icmpzero
	JR	NZ,L_234
; 1061				{
; 1062					player1Weapon3 = 1;
	LD	BC,1
	LD	(_player1Weapon3),BC
; 1063					player1Weapon3Flipped = player1Flipped;
	LD	BC,(_player1Flipped)
	LD	(_player1Weapon3Flipped),BC
; 1064					if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_223
; 1065					{
; 1066						player1Weapon3X = player1X + 26;
	LD	IY,(_player1X)
	LEA	BC,IY+26
	LD	(_player1Weapon3X),BC
; 1067					}
; 1068					else
	JR	L_224
L_223:
; 1069					{
; 1070						player1Weapon3X = player1X;
	LD	BC,(_player1X)
	LD	(_player1Weapon3X),BC
; 1071					}
L_224:
; 1072					player1Weapon3Y = player1Y + 17;
	LD	IY,(_player1Y)
	LEA	BC,IY+17
	LD	(_player1Weapon3Y),BC
; 1073				}
; 1074			}
L_234:
; 1075			if(key == sk_Clear)
	LD	A,(_key)
	CP	A,15
	JR	Z,L_232
; 1076			{
; 1077				goto pause;
; 1078			}
; 1079			
; 1080			//fight - get actions (player 2)
; 1081			player2Down = 0;
	LD	BC,0
	LD	(_player2Down),BC
; 1082			player2Left = 0;
	LD	(_player2Left),BC
; 1083			player2Right = 0;
	LD	(_player2Right),BC
; 1084			player2Jump = 0;
	LD	(_player2Jump),BC
; 1085			player2Attack = 0;
	LD	(_player2Attack),BC
; 1086			
; 1087			if(player2IsAi == 1 && testMode == 0)
	LD	HL,(_player2IsAi)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	Z,L__118
	LD	A,1
	JR	L__119
L__118:
	XOR	A,A
L__119:
	LD	(IX+-8),A
	OR	A,A
	JR	NZ,L_361
	LD	HL,(_testMode)
	CALL	__icmpzero
	JR	NZ,L_361
; 1088			{
; 1089				//fight - get actions - ai if activated
; 1090				if(map == 0)  //map 0
	LD	HL,(_map)
	CALL	__icmpzero
	JR	NZ,L_347
; 1091				{
; 1092					if(player2X <= 48 && player2Y == 132)
	LD	BC,(_player2X)
	LD	HL,48
	OR	A,A
	SBC	HL,BC
	JP	M,L_285
	LD	BC,132
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_285
; 1093					{
; 1094						player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1095						player2Jump = 1;
	LD	(_player2Jump),BC
; 1096					}
; 1097					else if(player2X >= 244 && player2Y == 132)
	JR	L_349
L_285:
	LD	BC,244
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_283
	LD	BC,132
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_283
; 1098					{
; 1099						player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1100						player2Jump = 1;
	LD	(_player2Jump),BC
; 1101					}
; 1102					else if(player1Y == 132 && player2Y <= 64)
	JR	L_349
L_283:
	LD	BC,132
	LD	HL,(_player1Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_281
	LD	BC,(_player2Y)
	LD	HL,64
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_281
; 1103					{
; 1104						if(player2X < 160 && player2X > 60)
	LD	BC,160
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_244
	LD	BC,(_player2X)
	LD	HL,60
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_244
; 1105						{
; 1106							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1107						}
; 1108						else if(player2X >= 160 && player2X < 228)
	JR	L_349
L_244:
	LD	BC,160
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_349
	LD	BC,228
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_349
; 1109						{
; 1110							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1111						}
; 1112					}
; 1113					else if(player1Y <= 64 && player2Y == 132)
	JR	L_349
L_281:
	LD	BC,(_player1Y)
	LD	HL,64
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_279
	LD	BC,132
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_279
; 1114					{
; 1115						player2Jump = 1;
	LD	BC,1
	LD	(_player2Jump),BC
; 1116						if(player1X < player2X)
	LD	BC,(_player2X)
	LD	HL,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_247
; 1117						{
; 1118							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1119						}
; 1120						else
	JR	L_248
L_247:
; 1121						{
; 1122							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1123						}
L_248:
; 1124						player2Attack = 1;
	LD	(_player2Attack),BC
; 1125					}
; 1126					else if(player1Y == 40 && player2Y < 64)
	JR	L_349
L_279:
	LD	BC,40
	LD	HL,(_player1Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_277
	LD	BC,64
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_277
; 1127					{
; 1128						player2Jump = 1;
	LD	BC,1
	LD	(_player2Jump),BC
; 1129						if(player1X < player2X)
	LD	BC,(_player2X)
	LD	HL,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_251
; 1130						{
; 1131							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1132						}
; 1133						else
	JR	L_252
L_251:
; 1134						{
; 1135							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1136						}
L_252:
; 1137						player2Attack = 1;
	LD	(_player2Attack),BC
; 1138					}
; 1139					else if(player1Y < 64 && player2Y == 64)
	JR	L_349
L_277:
	LD	BC,64
	LD	HL,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_275
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_275
; 1140					{
; 1141						if(player1X < 160 && player2X > 84)
	LD	BC,160
	LD	HL,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L__142
	LD	A,1
	JR	L__143
L__142:
	XOR	A,A
L__143:
	LD	(IX+-9),A
	OR	A,A
	JR	NZ,L_261
	LD	BC,(_player2X)
	LD	HL,84
	OR	A,A
	SBC	HL,BC
	JP	P,L_261
; 1142						{
; 1143							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1144						}
; 1145						else if(player1X < 160)
	JR	L_349
L_261:
	LD	A,(IX+-9)
	OR	A,A
	JR	NZ,L_259
; 1146						{
; 1147							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1148							player2Jump = 1;
	LD	(_player2Jump),BC
; 1149						}
; 1150						else if(player1X >= 160 && player2X < 204)
	JR	L_349
L_259:
	LD	BC,160
	LD	HL,(_player1X)
	OR	A,A
	SBC	HL,BC
	JP	M,L_257
	LD	BC,204
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_257
; 1151						{
; 1152							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1153						}
; 1154						else
	JR	L_349
L_257:
; 1155						{
; 1156							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1157							player2Jump = 1;
	LD	(_player2Jump),BC
; 1158						}
; 1159					}
; 1160					else if(player2Y == 40 && player1Y < 40)
	JR	L_349
L_275:
	LD	BC,40
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_273
	LD	HL,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_273
; 1161					{
; 1162						if(player2X < 160)
	LD	BC,160
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_264
; 1163						{
; 1164							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1165						}
; 1166						else
	JR	L_349
L_264:
; 1167						{
; 1168							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1169						}
; 1170					}
; 1171					else
	JR	L_349
L_273:
; 1172					{
; 1173						if(player1X + 20 < player2X)
	LD	IY,(_player1X)
	LEA	HL,IY+20
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_267
; 1174						{
; 1175							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1176						}
; 1177						else if(player1X - 20 > player2X)
	JR	L_269
L_267:
	LD	IY,(_player1X)
	LEA	BC,IY+-20
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_269
; 1178						{
; 1179							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1180						}
L_269:
; 1181						
; 1182						if(player1Y > player2Y)
	LD	BC,(_player1Y)
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_271
; 1183						{
; 1184							player2Jump = 1;
	LD	BC,1
	LD	(_player2Jump),BC
; 1185						}
L_271:
; 1186						
; 1187						if(player1Y == player2Y)
	LD	BC,(_player2Y)
	LD	HL,(_player1Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_349
; 1188						{
; 1189							player2Attack = 1;
	LD	BC,1
	LD	(_player2Attack),BC
; 1190						}
; 1191					}
; 1192				}
; 1193				else if(map == 1)  //map1
	JR	L_349
L_347:
	LD	BC,1
	LD	HL,(_map)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_349
; 1194				{
; 1195					if(player2X < 92 && player2Y == 80)
	LD	BC,92
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_344
	LD	BC,80
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_344
; 1196					{
; 1197						player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1198						player2Jump = 1;
	LD	(_player2Jump),BC
; 1199					}
; 1200					else if(player2X > 192 && player2Y == 80)
	JR	L_349
L_344:
	LD	BC,(_player2X)
	LD	HL,192
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_342
	LD	BC,80
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_342
; 1201					{
; 1202						player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1203						player2Jump = 1;
	LD	(_player2Jump),BC
; 1204					}
; 1205					else if(player2Y == 96 && player1Y <= 80)
	JR	L_349
L_342:
	LD	BC,96
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__162
	LD	A,1
	JR	L__163
L__162:
	XOR	A,A
L__163:
	LD	(IX+-10),A
	OR	A,A
	JR	NZ,L_340
	LD	BC,(_player1Y)
	LD	HL,80
	OR	A,A
	SBC	HL,BC
	JP	M,L_340
; 1206					{
; 1207						if(player2X < 160 && player2X < 48)
	LD	BC,160
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L__167
	LD	A,1
	JR	L__168
L__167:
	XOR	A,A
L__168:
	LD	(IX+-11),A
	OR	A,A
	JR	NZ,L_295
	LD	BC,48
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	JP	P,L_295
; 1208						{
; 1209							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1210						}
; 1211						else if(player2X < 160)
	JR	L_296
L_295:
	LD	A,(IX+-11)
	OR	A,A
	JR	NZ,L_293
; 1212						{
; 1213							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1214							player2Jump = 1;
	LD	(_player2Jump),BC
; 1215						}
; 1216						else if(player2X > 240)
	JR	L_296
L_293:
	LD	BC,(_player2X)
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	JP	P,L_291
; 1217						{
; 1218							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1219						}
; 1220						else
	JR	L_296
L_291:
; 1221						{
; 1222							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1223							player2Jump = 1;
	LD	(_player2Jump),BC
; 1224						}
L_296:
; 1225						player2Attack = 1;
	LD	(_player2Attack),BC
; 1226					}
; 1227					else if(player1Y == 96 && player2Y == 80)
	JR	L_349
L_340:
	LD	BC,96
	LD	HL,(_player1Y)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__174
	LD	A,1
	JR	L__175
L__174:
	XOR	A,A
L__175:
	LD	(IX+-5),A
	OR	A,A
	JR	NZ,L_338
	LD	BC,80
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_338
; 1228					{
; 1229						if(player1X < 160 && player2X > 92)
	LD	BC,160
	LD	HL,(_player1X)
	OR	A,A
	SBC	HL,BC
	JP	M,L__179
	LD	A,1
	JR	L__180
L__179:
	XOR	A,A
L__180:
	LD	(IX+-6),A
	OR	A,A
	JR	NZ,L_304
	LD	BC,(_player2X)
	LD	HL,92
	OR	A,A
	SBC	HL,BC
	JP	P,L_304
; 1230						{
; 1231							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1232						}
; 1233						else if(player1X < 160)
	JR	L_305
L_304:
	LD	A,(IX+-6)
	OR	A,A
	JR	NZ,L_302
; 1234						{
; 1235							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1236							player2Jump = 1;
	LD	(_player2Jump),BC
; 1237						}
; 1238						else if(player2X < 192)
	JR	L_305
L_302:
	LD	BC,192
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	JP	P,L_300
; 1239						{
; 1240							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1241						}
; 1242						else
	JR	L_305
L_300:
; 1243						{
; 1244							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1245							player2Jump = 1;
	LD	(_player2Jump),BC
; 1246						}
L_305:
; 1247						player2Attack = 1;
	LD	(_player2Attack),BC
; 1248					}
; 1249					else if(player1Y <= 16 && player2Y == 80)
	JR	L_349
L_338:
	LD	BC,(_player1Y)
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_336
	LD	BC,80
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_336
; 1250					{
; 1251						if(player1X < player2X)
	LD	BC,(_player2X)
	LD	HL,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_309
; 1252						{
; 1253							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1254							player2Jump = 1;
	LD	(_player2Jump),BC
; 1255							player2Attack = 1;
	LD	(_player2Attack),BC
; 1256						}
; 1257						else if(player2X < player1X)
	JR	L_349
L_309:
	LD	BC,(_player1X)
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_349
; 1258						{
; 1259							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1260							player2Jump = 1;
	LD	(_player2Jump),BC
; 1261							player2Attack = 1;
	LD	(_player2Attack),BC
; 1262						}
; 1263					}
; 1264					else if(player1Y > 16 && player2Y == 16)
	JR	L_349
L_336:
	LD	BC,(_player1Y)
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_334
	LD	BC,16
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_334
; 1265					{
; 1266						if(player2X < 160 && player2X > 96)
	LD	BC,160
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_314
	LD	BC,(_player2X)
	LD	HL,96
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_314
; 1267						{
; 1268							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1269						}
; 1270						else if(player2X < 196)
	JR	L_349
L_314:
	LD	BC,196
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_349
; 1271						{
; 1272							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1273						}
; 1274					}
; 1275					else if(player1Y == 96 && player2Y == 96)
	JR	L_349
L_334:
	LD	A,(IX+-5)
	OR	A,A
	JR	NZ,L_332
	LD	A,(IX+-10)
	OR	A,A
	JR	NZ,L_332
; 1276					{
; 1277						if((player1X - player2X) > 50 || (player1X - player2X) < -50)
	LD	HL,(_player1X)
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-14),HL
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	M,L_325
	LD	BC,16777166
	LD	HL,(IX+-14)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_349
L_325:
; 1278						{
; 1279							if(player2X < 160 && player2X < 48)
	LD	BC,160
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L__199
	LD	A,1
	JR	L__200
L__199:
	XOR	A,A
L__200:
	LD	(IX+-7),A
	OR	A,A
	JR	NZ,L_323
	LD	BC,48
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	JP	P,L_323
; 1280						{
; 1281							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1282						}
; 1283						else if(player2X < 160)
	JR	L_324
L_323:
	LD	A,(IX+-7)
	OR	A,A
	JR	NZ,L_321
; 1284						{
; 1285							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1286							player2Jump = 1;
	LD	(_player2Jump),BC
; 1287						}
; 1288						else if(player2X > 240)
	JR	L_324
L_321:
	LD	BC,(_player2X)
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	JP	P,L_319
; 1289						{
; 1290							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1291						}
; 1292						else
	JR	L_324
L_319:
; 1293						{
; 1294							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1295							player2Jump = 1;
	LD	(_player2Jump),BC
; 1296						}
L_324:
; 1297						player2Attack = 1;
	LD	(_player2Attack),BC
; 1298						}
; 1299					}
; 1300					else
	JR	L_349
L_332:
; 1301					{
; 1302						if(player1X + 20 < player2X)
	LD	IY,(_player1X)
	LEA	HL,IY+20
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_328
; 1303						{
; 1304							player2Left = 1;
	LD	BC,1
	LD	(_player2Left),BC
; 1305						}
; 1306						else if(player1X - 20 > player2X)
	JR	L_330
L_328:
	LD	IY,(_player1X)
	LEA	BC,IY+-20
	LD	HL,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_330
; 1307						{
; 1308							player2Right = 1;
	LD	BC,1
	LD	(_player2Right),BC
; 1309						}
L_330:
; 1310						
; 1311						if(player1Y > player2Y)
	LD	BC,(_player1Y)
	LD	HL,(_player2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_349
; 1312						{
; 1313							player2Jump = 1;
	LD	BC,1
	LD	(_player2Jump),BC
; 1314						}
; 1315					}
; 1316				}
L_349:
; 1317				
; 1318				if(player1Y == player2Y)
	LD	BC,(_player2Y)
	LD	HL,(_player1Y)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_355
; 1319				{
; 1320					player2Attack = 1;
	LD	BC,1
	LD	(_player2Attack),BC
; 1321				}
L_355:
; 1322				
; 1323				if(player2XKnockback < -4 || player2XKnockback > 4)
	LD	BC,16777212
	LD	HL,(_player2XKnockback)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_353
	LD	BC,(_player2XKnockback)
	LD	HL,4
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_354
L_353:
; 1324				{
; 1325					player2Down = 1;
	LD	BC,1
	LD	(_player2Down),BC
; 1326				}
; 1327				else if(player2XKnockback < -2 || player2XKnockback > 2)
	JR	L_361
L_354:
	LD	BC,16777214
	LD	HL,(_player2XKnockback)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_352
	LD	BC,(_player2XKnockback)
	LD	HL,2
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_361
L_352:
; 1328				{
; 1329					player2Left = 0;
	LD	BC,0
	LD	(_player2Left),BC
; 1330					player2Right = 0;
	LD	(_player2Right),BC
; 1331				}
; 1332			}
; 1333			else
; 1334			{
; 1335				//fight - get actions - player inputs
; 1336			}
L_361:
; 1337			
; 1338			if(player2Down == 1)
	LD	BC,1
	LD	HL,(_player2Down)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_360
; 1339			{
; 1340				player2Jumping = 0;
	LD	BC,0
	LD	(_player2Jumping),BC
; 1341				if(player2Grounded == 1)
	LD	HL,(_player2Grounded)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_372
; 1342				{
; 1343					player2ShieldActive = 1;
	LD	(_player2ShieldActive),BC
; 1344				}
; 1345			}
; 1346			else
	JR	L_372
L_360:
; 1347			{
; 1348				player2ShieldActive = 0;
	LD	BC,0
	LD	(_player2ShieldActive),BC
; 1349			}
L_372:
; 1350			if(player2Left == 1 && player2ShieldActive == 0)
	LD	BC,1
	LD	HL,(_player2Left)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_383
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_383
; 1351			{
; 1352				player2X -= player2MoveSpeed;
	LD	HL,(_player2X)
	LD	BC,(_player2MoveSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2X),HL
; 1353				if(player2Flipped == 0)
	LD	HL,(_player2Flipped)
	CALL	__icmpzero
	JR	NZ,L_365
; 1354				{
; 1355					player2Flipped = 1;
	LD	BC,1
	LD	(_player2Flipped),BC
; 1356					player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
; 1357					player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
; 1358				}
L_365:
; 1359				player2MoveAnimationCount++;
	LD	BC,(_player2MoveAnimationCount)
	INC	BC
	LD	(_player2MoveAnimationCount),BC
; 1360				if(player2MoveAnimationCount == player2MoveAnimationSpeed)
	LD	BC,(_player2MoveAnimationSpeed)
	LD	HL,(_player2MoveAnimationCount)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_383
; 1361				{
; 1362					if(player2MoveAnimation != 3)
	LD	BC,3
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_368
; 1363					{
; 1364						player2MoveAnimation++;
	LD	BC,(_player2MoveAnimation)
	INC	BC
	LD	(_player2MoveAnimation),BC
; 1365					}
; 1366					else
	JR	L_369
L_368:
; 1367					{
; 1368						player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
; 1369					}
L_369:
; 1370					player2MoveAnimationCount = 0;
	LD	BC,0
	LD	(_player2MoveAnimationCount),BC
; 1371				}
; 1372			}
L_383:
; 1373			if(player2Right == 1 && player2ShieldActive == 0)
	LD	BC,1
	LD	HL,(_player2Right)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_386
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_386
; 1374			{
; 1375				player2X += player2MoveSpeed;
	LD	BC,(_player2MoveSpeed)
	LD	HL,(_player2X)
	ADD	HL,BC
	LD	(_player2X),HL
; 1376				if(player2Flipped == 1)
	LD	HL,(_player2Flipped)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_376
; 1377				{
; 1378					player2Flipped = 0;
	LD	BC,0
	LD	(_player2Flipped),BC
; 1379					player2MoveAnimation = 0;
	LD	(_player2MoveAnimation),BC
; 1380					player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
; 1381				}
L_376:
; 1382				player2MoveAnimationCount++;
	LD	BC,(_player2MoveAnimationCount)
	INC	BC
	LD	(_player2MoveAnimationCount),BC
; 1383				if(player2MoveAnimationCount == player2MoveAnimationSpeed)
	LD	BC,(_player2MoveAnimationSpeed)
	LD	HL,(_player2MoveAnimationCount)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_386
; 1384				{
; 1385					if(player2MoveAnimation != 3)
	LD	BC,3
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_379
; 1386					{
; 1387						player2MoveAnimation++;
	LD	BC,(_player2MoveAnimation)
	INC	BC
	LD	(_player2MoveAnimation),BC
; 1388					}
; 1389					else
	JR	L_380
L_379:
; 1390					{
; 1391						player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
; 1392					}
L_380:
; 1393					player2MoveAnimationCount = 0;
	LD	BC,0
	LD	(_player2MoveAnimationCount),BC
; 1394				}
; 1395			}
L_386:
; 1396			
; 1397			if(player2Jump == 1)
	LD	BC,1
	LD	HL,(_player2Jump)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_407
; 1398			{
; 1399				if(player2Grounded == 1)
	LD	HL,(_player2Grounded)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_407
; 1400				{
; 1401					player2Jumping = player2JumpHeight;
	LD	BC,(_player2JumpHeight)
	LD	(_player2Jumping),BC
; 1402				}
; 1403			}
L_407:
; 1404			if(player2Attack)
	LD	HL,(_player2Attack)
	CALL	__icmpzero
	JR	Z,L_465
; 1405			{
; 1406				if(player2IsAi == 1)
	LD	A,(IX+-8)
	OR	A,A
	JR	NZ,L_405
; 1407				{
; 1408					player2AiAttackDelayCount--;
	LD	BC,(_player2AiAttackDelayCount)
	DEC	BC
	LD	(_player2AiAttackDelayCount),BC
; 1409				}
L_405:
; 1410				if(player2IsAi == 0 || player2AiAttackDelayCount <= 0)
	LD	HL,(_player2IsAi)
	CALL	__icmpzero
	JR	Z,L_404
	LD	BC,(_player2AiAttackDelayCount)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	M,L_465
L_404:
; 1411				{
; 1412					player2AiAttackDelayCount = player2AiAttackDelay;
	LD	BC,(_player2AiAttackDelay)
	LD	(_player2AiAttackDelayCount),BC
; 1413					if(player2Weapon1 == 0)
	LD	HL,(_player2Weapon1)
	CALL	__icmpzero
	JR	NZ,L_403
; 1414					{
; 1415						player2Weapon1 = 1;
	LD	BC,1
	LD	(_player2Weapon1),BC
; 1416						player2Weapon1Flipped = player2Flipped;
	LD	BC,(_player2Flipped)
	LD	(_player2Weapon1Flipped),BC
; 1417						if(player2Flipped == 0)
	LD	HL,(_player2Flipped)
	CALL	__icmpzero
	JR	NZ,L_391
; 1418						{
; 1419							player2Weapon1X = player2X + 26;
	LD	IY,(_player2X)
	LEA	BC,IY+26
	LD	(_player2Weapon1X),BC
; 1420						}
; 1421						else
	JR	L_392
L_391:
; 1422						{
; 1423							player2Weapon1X = player2X;
	LD	BC,(_player2X)
	LD	(_player2Weapon1X),BC
; 1424						}
L_392:
; 1425						player2Weapon1Y = player2Y + 17;
	LD	IY,(_player2Y)
	LEA	BC,IY+17
	LD	(_player2Weapon1Y),BC
; 1426					}
; 1427					else if(player2Weapon2 == 0)
	JR	L_465
L_403:
	LD	HL,(_player2Weapon2)
	CALL	__icmpzero
	JR	NZ,L_401
; 1428					{
; 1429						player2Weapon2 = 1;
	LD	BC,1
	LD	(_player2Weapon2),BC
; 1430						player2Weapon2Flipped = player2Flipped;
	LD	BC,(_player2Flipped)
	LD	(_player2Weapon2Flipped),BC
; 1431						if(player2Flipped == 0)
	LD	HL,(_player2Flipped)
	CALL	__icmpzero
	JR	NZ,L_394
; 1432						{
; 1433							player2Weapon2X = player2X + 26;
	LD	IY,(_player2X)
	LEA	BC,IY+26
	LD	(_player2Weapon2X),BC
; 1434						}
; 1435						else
	JR	L_395
L_394:
; 1436						{
; 1437							player2Weapon2X = player2X;
	LD	BC,(_player2X)
	LD	(_player2Weapon2X),BC
; 1438						}
L_395:
; 1439						player2Weapon2Y = player2Y + 17;
	LD	IY,(_player2Y)
	LEA	BC,IY+17
	LD	(_player2Weapon2Y),BC
; 1440					}
; 1441					else if(player2Weapon3 == 0)
	JR	L_465
L_401:
	LD	HL,(_player2Weapon3)
	CALL	__icmpzero
	JR	NZ,L_465
; 1442					{
; 1443						player2Weapon3 = 1;
	LD	BC,1
	LD	(_player2Weapon3),BC
; 1444						player2Weapon3Flipped = player2Flipped;
	LD	BC,(_player2Flipped)
	LD	(_player2Weapon3Flipped),BC
; 1445						if(player2Flipped == 0)
	LD	HL,(_player2Flipped)
	CALL	__icmpzero
	JR	NZ,L_397
; 1446						{
; 1447							player2Weapon3X = player2X + 26;
	LD	IY,(_player2X)
	LEA	BC,IY+26
	LD	(_player2Weapon3X),BC
; 1448						}
; 1449						else
	JR	L_398
L_397:
; 1450						{
; 1451							player2Weapon3X = player2X;
	LD	BC,(_player2X)
	LD	(_player2Weapon3X),BC
; 1452						}
L_398:
; 1453						player2Weapon3Y = player2Y + 17;
	LD	IY,(_player2Y)
	LEA	BC,IY+17
	LD	(_player2Weapon3Y),BC
; 1454					}
; 1455				}
; 1456			}
L_465:
; 1457			
; 1458			//fight - check for grounded and death
; 1459			for(player = 1; player < 3; ++player)
	LD	BC,1
	LD	(_player),BC
	JR	L_464
L_462:
; 1460			{
; 1461				switch(player)
	LD	HL,(_player)
	CALL	__case8
L__237:
	DW	2
	DB	1
	DW24	L_408	

	DB	2
	DW24	L_409	

	DW24	L_410	

; 1462				{
; 1463					case 1:
L_408:
; 1464						playerX = player1X;
	LD	BC,(_player1X)
	LD	(_playerX),BC
; 1465						playerY = player1Y;
	LD	BC,(_player1Y)
	LD	(_playerY),BC
; 1466						break;
	JR	L_410
; 1467					case 2:
L_409:
; 1468						playerX = player2X;
	LD	BC,(_player2X)
	LD	(_playerX),BC
; 1469						playerY = player2Y;
	LD	BC,(_player2Y)
	LD	(_playerY),BC
; 1470						break;
; 1471				}
L_410:
; 1472				
; 1473				playerGrounded = 0;
	LD	BC,0
	LD	(_playerGrounded),BC
; 1474				playerDeath = 0;
	LD	(_playerDeath),BC
; 1475				
; 1476				if(map == 0)
	LD	HL,(_map)
	CALL	__icmpzero
	JR	NZ,L_447
; 1477				{
; 1478					if(playerX >= 24 && playerX <= 264 && playerY == 132)
	LD	BC,24
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_427
	LD	BC,(_playerX)
	LD	HL,264
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_427
	LD	BC,132
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_427
; 1479					{
; 1480						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
; 1481					}
; 1482					else if(playerX >= 72 && playerX <= 216 && playerY == 64)
	JR	L_450
L_427:
	LD	BC,72
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_425
	LD	BC,(_playerX)
	LD	HL,216
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_425
	LD	BC,64
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_425
; 1483					{
; 1484						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
; 1485					}
; 1486					else if(playerX >= -8 && playerX <= 40 && playerY == 40)
	JR	L_450
L_425:
	LD	BC,16777208
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_423
	LD	BC,(_playerX)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_423
	LD	BC,40
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_423
; 1487					{
; 1488						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
; 1489					}
; 1490					else if(playerX >= 248 && playerX <= 296 && playerY == 40)
	JR	L_450
L_423:
	LD	BC,248
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_421
	LD	BC,(_playerX)
	LD	HL,296
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_421
	LD	BC,40
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_421
; 1491					{
; 1492						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
; 1493					}
; 1494					else if(playerY >= 240)
	JR	L_450
L_421:
	LD	BC,240
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_450
; 1495					{
; 1496						playerDeath = 1;
	LD	BC,1
	LD	(_playerDeath),BC
; 1497					}
; 1498				}
; 1499				else if(map == 1)
	JR	L_450
L_447:
	LD	BC,1
	LD	HL,(_map)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_450
; 1500				{
; 1501					if(playerX >= -8 && playerX <= 56 && playerY == 96)
	LD	BC,16777208
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_444
	LD	BC,(_playerX)
	LD	HL,56
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_444
	LD	BC,96
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_444
; 1502					{
; 1503						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
; 1504					}
; 1505					else if(playerX >= 232 && playerX <= 296 && playerY == 96)
	JR	L_450
L_444:
	LD	BC,232
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_442
	LD	BC,(_playerX)
	LD	HL,296
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_442
	LD	BC,96
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_442
; 1506					{
; 1507						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
; 1508					}
; 1509					else if(playerX >= 88 && playerX <= 200 && playerY == 80)
	JR	L_450
L_442:
	LD	BC,88
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_440
	LD	BC,(_playerX)
	LD	HL,200
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_440
	LD	BC,80
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_440
; 1510					{
; 1511						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
; 1512					}
; 1513					else if(playerX >= 104 && playerX <= 184 && playerY == 16)
	JR	L_450
L_440:
	LD	BC,104
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_438
	LD	BC,(_playerX)
	LD	HL,184
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_438
	LD	BC,16
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_438
; 1514					{
; 1515						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
; 1516					}
; 1517					else if(playerY > 160)
	JR	L_450
L_438:
	LD	BC,(_playerY)
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_450
; 1518					{
; 1519						playerDeath = 1;
	LD	BC,1
	LD	(_playerDeath),BC
; 1520					}
; 1521				}
L_450:
; 1522				
; 1523				switch(player)
	LD	HL,(_player)
	CALL	__case8
L__266:
	DW	2
	DB	1
	DW24	L_448	

	DB	2
	DW24	L_449	

	DW24	L_461	

; 1524				{
; 1525					case 1:
L_448:
; 1526						player1Grounded = playerGrounded;
	LD	BC,(_playerGrounded)
	LD	(_player1Grounded),BC
; 1527						break;
	JR	L_461
; 1528					case 2:
L_449:
; 1529						player2Grounded = playerGrounded;
	LD	BC,(_playerGrounded)
	LD	(_player2Grounded),BC
; 1530						break;
; 1531				}
L_461:
; 1532				
; 1533				if(playerDeath == 1)
	LD	BC,1
	LD	HL,(_playerDeath)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_463
; 1534				{
; 1535					switch(player)
	LD	HL,(_player)
	CALL	__case8
L__268:
	DW	2
	DB	1
	DW24	L_451	

	DB	2
	DW24	L_456	

	DW24	L_463	

; 1536					{
; 1537						case 1:
L_451:
; 1538							player1Lifes--;
	LD	BC,(_player1Lifes)
	DEC	BC
	LD	(_player1Lifes),BC
; 1539							if(player1Lifes <= 0)
	OR	A,A
	OR	A,A
	SBC	HL,HL
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_453
; 1540							{
; 1541								goto gameOver;
; 1542							}
; 1543							player1X = player1SpawnX;
	LD	BC,(_player1SpawnX)
	LD	(_player1X),BC
; 1544							player1Y = player1SpawnY;
	LD	BC,(_player1SpawnY)
	LD	(_player1Y),BC
; 1545							player1Flipped = 0;
	LD	BC,0
	LD	(_player1Flipped),BC
; 1546							player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
; 1547							player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
; 1548							player1ShieldActive = 0;
	LD	(_player1ShieldActive),BC
; 1549							player1Grounded = 1;
	LD	BC,1
	LD	(_player1Grounded),BC
; 1550							break;
	JR	L_463
; 1551						case 2:
L_456:
; 1552							player2Lifes--;
	LD	BC,(_player2Lifes)
	DEC	BC
	LD	(_player2Lifes),BC
; 1553							if(player2Lifes <= 0)
	OR	A,A
	OR	A,A
	SBC	HL,HL
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_453
; 1554							{
; 1555								goto gameOver;
; 1556							}
; 1557							player2X = player2SpawnX;
	LD	BC,(_player2SpawnX)
	LD	(_player2X),BC
; 1558							player2Y = player2SpawnY;
	LD	BC,(_player2SpawnY)
	LD	(_player2Y),BC
; 1559							player2Flipped = 1;
	LD	BC,1
	LD	(_player2Flipped),BC
; 1560							player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
; 1561							player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
; 1562							player2ShieldActive = 0;
	LD	(_player2ShieldActive),BC
; 1563							player2Grounded = 1;
	LD	BC,1
	LD	(_player2Grounded),BC
; 1564							break;
; 1565					}
; 1566				}
; 1567			}
L_463:
	LD	BC,(_player)
	INC	BC
	LD	(_player),BC
L_464:
	LD	BC,3
	LD	HL,(_player)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_462
; 1568			
; 1569			//fight - player 1 always grounded in test mode
; 1570			if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_472
; 1571			{
; 1572				player1Grounded = 1;
	LD	(_player1Grounded),BC
; 1573			}
L_472:
; 1574			
; 1575			//fight - calculate jumps (player 1)
; 1576			if(player1Jumping > 0)
	LD	BC,(_player1Jumping)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_471
; 1577			{
; 1578				player1Jumping--;
	LD	BC,(_player1Jumping)
	DEC	BC
	LD	(_player1Jumping),BC
; 1579				player1Y -= player1JumpSpeed;
	LD	HL,(_player1Y)
	LD	BC,(_player1JumpSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Y),HL
; 1580			}
; 1581			else if(player1Grounded == 0)
	JR	L_477
L_471:
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_477
; 1582			{
; 1583				player1Y += player1FallSpeed;
	LD	BC,(_player1FallSpeed)
	LD	HL,(_player1Y)
	ADD	HL,BC
	LD	(_player1Y),HL
; 1584			}
L_477:
; 1585			
; 1586			//fight - calculate jumps (player 2)
; 1587			if(player2Jumping > 0)
	LD	BC,(_player2Jumping)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_476
; 1588			{
; 1589				player2Jumping--;
	LD	BC,(_player2Jumping)
	DEC	BC
	LD	(_player2Jumping),BC
; 1590				player2Y -= player2JumpSpeed;
	LD	HL,(_player2Y)
	LD	BC,(_player2JumpSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Y),HL
; 1591			}
; 1592			else if(player2Grounded == 0)
	JR	L_483
L_476:
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_483
; 1593			{
; 1594				player2Y += player2FallSpeed;
	LD	BC,(_player2FallSpeed)
	LD	HL,(_player2Y)
	ADD	HL,BC
	LD	(_player2Y),HL
; 1595			}
L_483:
; 1596			
; 1597			//fight - calculate knockback (player 1)
; 1598			if(player1XKnockback < 0)
	LD	HL,(_player1XKnockback)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_482
; 1599			{
; 1600				player1XKnockback++;
	LD	BC,(_player1XKnockback)
	INC	BC
	LD	(_player1XKnockback),BC
; 1601				player1X -= player2WeaponKnockbackStrength;
	LD	HL,(_player1X)
	LD	BC,(_player2WeaponKnockbackStrength)
	OR	A,A
	SBC	HL,BC
	LD	(_player1X),HL
; 1602			}
; 1603			else if(player1XKnockback > 0)
	JR	L_489
L_482:
	LD	BC,(_player1XKnockback)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_489
; 1604			{
; 1605				player1XKnockback--;
	LD	BC,(_player1XKnockback)
	DEC	BC
	LD	(_player1XKnockback),BC
; 1606				player1X += player2WeaponKnockbackStrength;
	LD	BC,(_player2WeaponKnockbackStrength)
	LD	HL,(_player1X)
	ADD	HL,BC
	LD	(_player1X),HL
; 1607			}
L_489:
; 1608			
; 1609			//fight - calculate knockback (player 2)
; 1610			if(player2XKnockback < 0)
	LD	HL,(_player2XKnockback)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_488
; 1611			{
; 1612				player2XKnockback++;
	LD	BC,(_player2XKnockback)
	INC	BC
	LD	(_player2XKnockback),BC
; 1613				player2X -= player1WeaponKnockbackStrength;
	LD	HL,(_player2X)
	LD	BC,(_player1WeaponKnockbackStrength)
	OR	A,A
	SBC	HL,BC
	LD	(_player2X),HL
; 1614			}
; 1615			else if(player2XKnockback > 0)
	JR	L_496
L_488:
	LD	BC,(_player2XKnockback)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_496
; 1616			{
; 1617				player2XKnockback--;
	LD	BC,(_player2XKnockback)
	DEC	BC
	LD	(_player2XKnockback),BC
; 1618				player2X += player1WeaponKnockbackStrength;
	LD	BC,(_player1WeaponKnockbackStrength)
	LD	HL,(_player2X)
	ADD	HL,BC
	LD	(_player2X),HL
; 1619			}
L_496:
; 1620			
; 1621			//fight - calculate weapons (player 1)
; 1622			if(player1Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_503
; 1623			{
; 1624				if(player1Weapon1Flipped == 0)
	LD	HL,(_player1Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_491
; 1625				{
; 1626					player1Weapon1X += player1WeaponSpeed;
	LD	BC,(_player1WeaponSpeed)
	LD	HL,(_player1Weapon1X)
	ADD	HL,BC
	LD	(_player1Weapon1X),HL
; 1627				}
; 1628				else
	JR	L_494
L_491:
; 1629				{
; 1630					player1Weapon1X -= player1WeaponSpeed;
	LD	HL,(_player1Weapon1X)
	LD	BC,(_player1WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Weapon1X),HL
; 1631				}
L_494:
; 1632				
; 1633				if(player1Weapon1X <= -8 || player1Weapon1X >= 320)
	LD	BC,(_player1Weapon1X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_493
	LD	BC,320
	LD	HL,(_player1Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_503
L_493:
; 1634				{
; 1635					player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
; 1636				}
; 1637			}
L_503:
; 1638			if(player1Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_510
; 1639			{
; 1640				if(player1Weapon2Flipped == 0)
	LD	HL,(_player1Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_498
; 1641				{
; 1642					player1Weapon2X += player1WeaponSpeed;
	LD	BC,(_player1WeaponSpeed)
	LD	HL,(_player1Weapon2X)
	ADD	HL,BC
	LD	(_player1Weapon2X),HL
; 1643				}
; 1644				else
	JR	L_501
L_498:
; 1645				{
; 1646					player1Weapon2X -= player1WeaponSpeed;
	LD	HL,(_player1Weapon2X)
	LD	BC,(_player1WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Weapon2X),HL
; 1647				}
L_501:
; 1648				
; 1649				if(player1Weapon2X <= -8 || player1Weapon2X >= 320)
	LD	BC,(_player1Weapon2X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_500
	LD	BC,320
	LD	HL,(_player1Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_510
L_500:
; 1650				{
; 1651					player1Weapon2 = 0;
	LD	BC,0
	LD	(_player1Weapon2),BC
; 1652				}
; 1653			}
L_510:
; 1654			if(player1Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_517
; 1655			{
; 1656				if(player1Weapon3Flipped == 0)
	LD	HL,(_player1Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_505
; 1657				{
; 1658					player1Weapon3X += player1WeaponSpeed;
	LD	BC,(_player1WeaponSpeed)
	LD	HL,(_player1Weapon3X)
	ADD	HL,BC
	LD	(_player1Weapon3X),HL
; 1659				}
; 1660				else
	JR	L_508
L_505:
; 1661				{
; 1662					player1Weapon3X -= player1WeaponSpeed;
	LD	HL,(_player1Weapon3X)
	LD	BC,(_player1WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Weapon3X),HL
; 1663				}
L_508:
; 1664				
; 1665				if(player1Weapon3X <= -8 || player1Weapon3X >= 320)
	LD	BC,(_player1Weapon3X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_507
	LD	BC,320
	LD	HL,(_player1Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_517
L_507:
; 1666				{
; 1667					player1Weapon3 = 0;
	LD	BC,0
	LD	(_player1Weapon3),BC
; 1668				}
; 1669			}
L_517:
; 1670			
; 1671			//fight - calculate weapons (player 2)
; 1672			if(player2Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_524
; 1673			{
; 1674				if(player2Weapon1Flipped == 0)
	LD	HL,(_player2Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_512
; 1675				{
; 1676					player2Weapon1X += player2WeaponSpeed;
	LD	BC,(_player2WeaponSpeed)
	LD	HL,(_player2Weapon1X)
	ADD	HL,BC
	LD	(_player2Weapon1X),HL
; 1677				}
; 1678				else
	JR	L_515
L_512:
; 1679				{
; 1680					player2Weapon1X -= player2WeaponSpeed;
	LD	HL,(_player2Weapon1X)
	LD	BC,(_player2WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Weapon1X),HL
; 1681				}
L_515:
; 1682				
; 1683				if(player2Weapon1X <= -8 || player2Weapon1X >= 320)
	LD	BC,(_player2Weapon1X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_514
	LD	BC,320
	LD	HL,(_player2Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_524
L_514:
; 1684				{
; 1685					player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
; 1686				}
; 1687			}
L_524:
; 1688			if(player2Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_531
; 1689			{
; 1690				if(player2Weapon2Flipped == 0)
	LD	HL,(_player2Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_519
; 1691				{
; 1692					player2Weapon2X += player2WeaponSpeed;
	LD	BC,(_player2WeaponSpeed)
	LD	HL,(_player2Weapon2X)
	ADD	HL,BC
	LD	(_player2Weapon2X),HL
; 1693				}
; 1694				else
	JR	L_522
L_519:
; 1695				{
; 1696					player2Weapon2X -= player2WeaponSpeed;
	LD	HL,(_player2Weapon2X)
	LD	BC,(_player2WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Weapon2X),HL
; 1697				}
L_522:
; 1698				
; 1699				if(player2Weapon2X <= -8 || player2Weapon2X >= 320)
	LD	BC,(_player2Weapon2X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_521
	LD	BC,320
	LD	HL,(_player2Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_531
L_521:
; 1700				{
; 1701					player2Weapon2 = 0;
	LD	BC,0
	LD	(_player2Weapon2),BC
; 1702				}
; 1703			}
L_531:
; 1704			if(player2Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_561
; 1705			{
; 1706				if(player2Weapon3Flipped == 0)
	LD	HL,(_player2Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_526
; 1707				{
; 1708					player2Weapon3X += player2WeaponSpeed;
	LD	BC,(_player2WeaponSpeed)
	LD	HL,(_player2Weapon3X)
	ADD	HL,BC
	LD	(_player2Weapon3X),HL
; 1709				}
; 1710				else
	JR	L_529
L_526:
; 1711				{
; 1712					player2Weapon3X -= player2WeaponSpeed;
	LD	HL,(_player2Weapon3X)
	LD	BC,(_player2WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Weapon3X),HL
; 1713				}
L_529:
; 1714				
; 1715				if(player2Weapon3X <= -8 || player2Weapon3X >= 320)
	LD	BC,(_player2Weapon3X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_528
	LD	BC,320
	LD	HL,(_player2Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_561
L_528:
; 1716				{
; 1717					player2Weapon3 = 0;
	LD	BC,0
	LD	(_player2Weapon3),BC
; 1718				}
; 1719			}
L_561:
; 1720			
; 1721			//fight - draw character (player 1)
; 1722			if(player1Flipped == 0 && player1Grounded == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	Z,L__306
	LD	A,1
	JR	L__307
L__306:
	XOR	A,A
L__307:
	LD	(IX+-1),A
	OR	A,A
	JR	NZ,L_560
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_560
; 1723			{
; 1724				gfx_TransparentSprite(player1CharacterNotGrounded, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterNotGrounded)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1725				player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
; 1726				player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
; 1727			}
; 1728			else if(player1Flipped == 1 && player1Grounded == 0)
	JR	L_563
L_560:
	LD	BC,1
	LD	HL,(_player1Flipped)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__311
	LD	A,1
	JR	L__312
L__311:
	XOR	A,A
L__312:
	LD	(IX+-2),A
	OR	A,A
	JR	NZ,L_558
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_558
; 1729			{
; 1730				gfx_TransparentSprite(player1CharacterNotGroundedFlipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterNotGroundedFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1731				player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
; 1732				player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
; 1733			}
; 1734			else if(player1Flipped == 0 && player1MoveAnimation == 0)
	JR	L_563
L_558:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_556
	LD	HL,(_player1MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_556
; 1735			{
; 1736				gfx_TransparentSprite(player1Character, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1Character)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1737			}
; 1738			else if(player1Flipped == 1 && player1MoveAnimation == 0)
	JR	L_563
L_556:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_554
	LD	HL,(_player1MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_554
; 1739			{
; 1740				gfx_TransparentSprite(player1CharacterFlipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1741			}
; 1742			else if(player1Flipped == 0 && player1MoveAnimation == 1)
	JR	L_563
L_554:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_552
	LD	BC,1
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_552
; 1743			{
; 1744				gfx_TransparentSprite(player1CharacterMoving1, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1745			}
; 1746			else if(player1Flipped == 1 && player1MoveAnimation == 1)
	JR	L_563
L_552:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_550
	LD	BC,1
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_550
; 1747			{
; 1748				gfx_TransparentSprite(player1CharacterMoving1Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1749			}
; 1750			else if(player1Flipped == 0 && player1MoveAnimation == 2)
	JR	L_563
L_550:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_548
	LD	BC,2
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_548
; 1751			{
; 1752				gfx_TransparentSprite(player1CharacterMoving2, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving2)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1753			}
; 1754			else if(player1Flipped == 1 && player1MoveAnimation == 2)
	JR	L_563
L_548:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_546
	LD	BC,2
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_546
; 1755			{
; 1756				gfx_TransparentSprite(player1CharacterMoving2Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1757			}
; 1758			else if(player1Flipped == 0 && player1MoveAnimation == 3)
	JR	L_563
L_546:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_544
	LD	BC,3
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_544
; 1759			{
; 1760				gfx_TransparentSprite(player1CharacterMoving1, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1761			}
; 1762			else if(player1Flipped == 1 && player1MoveAnimation == 3)
	JR	L_563
L_544:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_563
	LD	BC,3
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_563
; 1763			{
; 1764				gfx_TransparentSprite(player1CharacterMoving1Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1765			}
L_563:
; 1766			
; 1767			//fight - draw shield (player 1)
; 1768			if(player1ShieldActive == 1)
	LD	BC,1
	LD	HL,(_player1ShieldActive)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_593
; 1769			{
; 1770				gfx_TransparentSprite(shield, player1X - 12, player1Y - 4);
	LD	IY,(_player1Y)
	LEA	BC,IY+-4
	PUSH	BC
	LD	IY,(_player1X)
	LEA	BC,IY+-12
	PUSH	BC
	LD	BC,_shield_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1771			}
L_593:
; 1772			
; 1773			//fight - draw character (player 2)
; 1774			if(player2Flipped == 0 && player2Grounded == 0)
	LD	HL,(_player2Flipped)
	CALL	__icmpzero
	JR	Z,L__333
	LD	A,1
	JR	L__334
L__333:
	XOR	A,A
L__334:
	LD	(IX+-3),A
	OR	A,A
	JR	NZ,L_592
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_592
; 1775			{
; 1776				gfx_TransparentSprite(player2CharacterNotGrounded, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterNotGrounded)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1777				player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
; 1778				player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
; 1779			}
; 1780			else if(player2Flipped == 1 && player2Grounded == 0)
	JR	L_595
L_592:
	LD	BC,1
	LD	HL,(_player2Flipped)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__338
	LD	A,1
	JR	L__339
L__338:
	XOR	A,A
L__339:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_590
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_590
; 1781			{
; 1782				gfx_TransparentSprite(player2CharacterNotGroundedFlipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterNotGroundedFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1783				player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
; 1784				player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
; 1785			}
; 1786			else if(player2Flipped == 0 && player2MoveAnimation == 0)
	JR	L_595
L_590:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_588
	LD	HL,(_player2MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_588
; 1787			{
; 1788				gfx_TransparentSprite(player2Character, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2Character)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1789			}
; 1790			else if(player2Flipped == 1 && player2MoveAnimation == 0)
	JR	L_595
L_588:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_586
	LD	HL,(_player2MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_586
; 1791			{
; 1792				gfx_TransparentSprite(player2CharacterFlipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1793			}
; 1794			else if(player2Flipped == 0 && player2MoveAnimation == 1)
	JR	L_595
L_586:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_584
	LD	BC,1
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_584
; 1795			{
; 1796				gfx_TransparentSprite(player2CharacterMoving1, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1797			}
; 1798			else if(player2Flipped == 1 && player2MoveAnimation == 1)
	JR	L_595
L_584:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_582
	LD	BC,1
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_582
; 1799			{
; 1800				gfx_TransparentSprite(player2CharacterMoving1Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1801			}
; 1802			else if(player2Flipped == 0 && player2MoveAnimation == 2)
	JR	L_595
L_582:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_580
	LD	BC,2
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_580
; 1803			{
; 1804				gfx_TransparentSprite(player2CharacterMoving2, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving2)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1805			}
; 1806			else if(player2Flipped == 1 && player2MoveAnimation == 2)
	JR	L_595
L_580:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_578
	LD	BC,2
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_578
; 1807			{
; 1808				gfx_TransparentSprite(player2CharacterMoving2Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1809			}
; 1810			else if(player2Flipped == 0 && player2MoveAnimation == 3)
	JR	L_595
L_578:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_576
	LD	BC,3
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_576
; 1811			{
; 1812				gfx_TransparentSprite(player2CharacterMoving1, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1813			}
; 1814			else if(player2Flipped == 1 && player2MoveAnimation == 3)
	JR	L_595
L_576:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_595
	LD	BC,3
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_595
; 1815			{
; 1816				gfx_TransparentSprite(player2CharacterMoving1Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1817			}
L_595:
; 1818			
; 1819			//fight - draw shield (player 2)
; 1820			if(player2ShieldActive == 1)
	LD	BC,1
	LD	HL,(_player2ShieldActive)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_597
; 1821			{
; 1822				gfx_TransparentSprite(shield, player2X - 12, player2Y - 4);
	LD	IY,(_player2Y)
	LEA	BC,IY+-4
	PUSH	BC
	LD	IY,(_player2X)
	LEA	BC,IY+-12
	PUSH	BC
	LD	BC,_shield_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1823			}
L_597:
; 1824			
; 1825			//fight - draw weapons (player 1)
; 1826			if(player1Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_599
; 1827			{
; 1828				gfx_TransparentSprite(player1Weapon, player1Weapon1X, player1Weapon1Y);
	LD	BC,(_player1Weapon1Y)
	PUSH	BC
	LD	BC,(_player1Weapon1X)
	PUSH	BC
	LD	BC,(_player1Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1829			}
L_599:
; 1830			if(player1Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_601
; 1831			{
; 1832				gfx_TransparentSprite(player1Weapon, player1Weapon2X, player1Weapon2Y);
	LD	BC,(_player1Weapon2Y)
	PUSH	BC
	LD	BC,(_player1Weapon2X)
	PUSH	BC
	LD	BC,(_player1Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1833			}
L_601:
; 1834			if(player1Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_603
; 1835			{
; 1836				gfx_TransparentSprite(player1Weapon, player1Weapon3X, player1Weapon3Y);
	LD	BC,(_player1Weapon3Y)
	PUSH	BC
	LD	BC,(_player1Weapon3X)
	PUSH	BC
	LD	BC,(_player1Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1837			}
L_603:
; 1838			
; 1839			//fight - draw weapons (player 2)
; 1840			if(player2Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_605
; 1841			{
; 1842				gfx_TransparentSprite(player2Weapon, player2Weapon1X, player2Weapon1Y);
	LD	BC,(_player2Weapon1Y)
	PUSH	BC
	LD	BC,(_player2Weapon1X)
	PUSH	BC
	LD	BC,(_player2Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1843			}
L_605:
; 1844			if(player2Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_607
; 1845			{
; 1846				gfx_TransparentSprite(player2Weapon, player2Weapon2X, player2Weapon2Y);
	LD	BC,(_player2Weapon2Y)
	PUSH	BC
	LD	BC,(_player2Weapon2X)
	PUSH	BC
	LD	BC,(_player2Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1847			}
L_607:
; 1848			if(player2Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_622
; 1849			{
; 1850				gfx_TransparentSprite(player2Weapon, player2Weapon3X, player2Weapon3Y);
	LD	BC,(_player2Weapon3Y)
	PUSH	BC
	LD	BC,(_player2Weapon3X)
	PUSH	BC
	LD	BC,(_player2Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1851			}
L_622:
; 1852			
; 1853			//fight - check for weapon hits (player 1)
; 1854			if(player1Weapon1 == 1 && player1Weapon1Y + 8 >= player2Y && player1Weapon1Y <= player2Y + 48)
	LD	BC,1
	LD	HL,(_player1Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_637
	LD	IY,(_player1Weapon1Y)
	LEA	HL,IY+8
	LD	BC,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JP	M,L_637
	LD	IY,(_player2Y)
	LEA	HL,IY+48
	LD	BC,(_player1Weapon1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_637
; 1855			{
; 1856				if(player1Weapon1Flipped == 0 && player1Weapon1X + 8 >= player2X && player1Weapon1X <= player2X + 32)
	LD	HL,(_player1Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_620
	LD	IY,(_player1Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_620
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_620
; 1857				{
; 1858					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_613
; 1859					{
; 1860						player2XKnockback += player1WeaponKnockback;
	LD	BC,(_player1WeaponKnockback)
	LD	HL,(_player2XKnockback)
	ADD	HL,BC
	LD	(_player2XKnockback),HL
; 1861					}
L_613:
; 1862					player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
; 1863				}
; 1864				else if(player1Weapon1Flipped == 1 && player1Weapon1X <= player2X + 32 && player1Weapon1X + 8 >= player2X)
	JR	L_637
L_620:
	LD	BC,1
	LD	HL,(_player1Weapon1Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_637
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_637
	LD	IY,(_player1Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_637
; 1865				{
; 1866					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_617
; 1867					{
; 1868						player2XKnockback -= player1WeaponKnockback;
	LD	HL,(_player2XKnockback)
	LD	BC,(_player1WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player2XKnockback),HL
; 1869					}
L_617:
; 1870					player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
; 1871				}
; 1872			}
L_637:
; 1873			if(player1Weapon2 == 1 && player1Weapon2Y + 8 >= player2Y && player1Weapon2Y <= player2Y + 48)
	LD	BC,1
	LD	HL,(_player1Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_652
	LD	IY,(_player1Weapon2Y)
	LEA	HL,IY+8
	LD	BC,(_player2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_652
	LD	IY,(_player2Y)
	LEA	HL,IY+48
	LD	BC,(_player1Weapon2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_652
; 1874			{
; 1875				if(player1Weapon2Flipped == 0 && player1Weapon2X + 8 >= player2X && player1Weapon2X <= player2X + 32)
	LD	HL,(_player1Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_635
	LD	IY,(_player1Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_635
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_635
; 1876				{
; 1877					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_628
; 1878					{
; 1879						player2XKnockback += player1WeaponKnockback;
	LD	BC,(_player1WeaponKnockback)
	LD	HL,(_player2XKnockback)
	ADD	HL,BC
	LD	(_player2XKnockback),HL
; 1880					}
L_628:
; 1881					player1Weapon2 = 0;
	LD	BC,0
	LD	(_player1Weapon2),BC
; 1882				}
; 1883				else if(player1Weapon2Flipped == 1 && player1Weapon2X <= player2X + 32 && player1Weapon2X + 8 >= player2X)
	JR	L_652
L_635:
	LD	BC,1
	LD	HL,(_player1Weapon2Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_652
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_652
	LD	IY,(_player1Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_652
; 1884				{
; 1885					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_632
; 1886					{
; 1887						player2XKnockback -= player1WeaponKnockback;
	LD	HL,(_player2XKnockback)
	LD	BC,(_player1WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player2XKnockback),HL
; 1888					}
L_632:
; 1889					player1Weapon2 = 0;
	LD	BC,0
	LD	(_player1Weapon2),BC
; 1890				}
; 1891			}
L_652:
; 1892			if(player1Weapon3 == 1 && player1Weapon3Y + 8 >= player2Y && player1Weapon3Y <= player2Y + 48)
	LD	BC,1
	LD	HL,(_player1Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_667
	LD	IY,(_player1Weapon3Y)
	LEA	HL,IY+8
	LD	BC,(_player2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_667
	LD	IY,(_player2Y)
	LEA	HL,IY+48
	LD	BC,(_player1Weapon3Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_667
; 1893			{
; 1894				if(player1Weapon3Flipped == 0 && player1Weapon3X + 8 >= player2X && player1Weapon3X <= player2X + 32)
	LD	HL,(_player1Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_650
	LD	IY,(_player1Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_650
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_650
; 1895				{
; 1896					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_643
; 1897					{
; 1898						player2XKnockback += player1WeaponKnockback;
	LD	BC,(_player1WeaponKnockback)
	LD	HL,(_player2XKnockback)
	ADD	HL,BC
	LD	(_player2XKnockback),HL
; 1899					}
L_643:
; 1900					player1Weapon3 = 0;
	LD	BC,0
	LD	(_player1Weapon3),BC
; 1901				}
; 1902				else if(player1Weapon3Flipped == 1 && player1Weapon3X <= player2X + 32 && player1Weapon3X + 8 >= player2X)
	JR	L_667
L_650:
	LD	BC,1
	LD	HL,(_player1Weapon3Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_667
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_667
	LD	IY,(_player1Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_667
; 1903				{
; 1904					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_647
; 1905					{
; 1906						player2XKnockback -= player1WeaponKnockback;
	LD	HL,(_player2XKnockback)
	LD	BC,(_player1WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player2XKnockback),HL
; 1907					}
L_647:
; 1908					player1Weapon3 = 0;
	LD	BC,0
	LD	(_player1Weapon3),BC
; 1909				}
; 1910			}
L_667:
; 1911			
; 1912			//fight - check for weapon hits (player 2)
; 1913			if(player2Weapon1 == 1 && player2Weapon1Y + 8 >= player1Y && player2Weapon1Y <= player1Y + 48)
	LD	BC,1
	LD	HL,(_player2Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_682
	LD	IY,(_player2Weapon1Y)
	LEA	HL,IY+8
	LD	BC,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_682
	LD	IY,(_player1Y)
	LEA	HL,IY+48
	LD	BC,(_player2Weapon1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_682
; 1914			{
; 1915				if(player2Weapon1Flipped == 0 && player2Weapon1X + 8 >= player1X && player2Weapon1X <= player1X + 32)
	LD	HL,(_player2Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_665
	LD	IY,(_player2Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_665
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_665
; 1916				{
; 1917					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_658
; 1918					{
; 1919						player1XKnockback += player2WeaponKnockback;
	LD	BC,(_player2WeaponKnockback)
	LD	HL,(_player1XKnockback)
	ADD	HL,BC
	LD	(_player1XKnockback),HL
; 1920					}
L_658:
; 1921					player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
; 1922				}
; 1923				else if(player2Weapon1Flipped == 1 && player2Weapon1X <= player1X + 32 && player2Weapon1X + 8 >= player1X)
	JR	L_682
L_665:
	LD	BC,1
	LD	HL,(_player2Weapon1Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_682
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_682
	LD	IY,(_player2Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_682
; 1924				{
; 1925					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_662
; 1926					{
; 1927						player1XKnockback -= player2WeaponKnockback;
	LD	HL,(_player1XKnockback)
	LD	BC,(_player2WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player1XKnockback),HL
; 1928					}
L_662:
; 1929					player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
; 1930				}
; 1931			}
L_682:
; 1932			if(player2Weapon2 == 1 && player2Weapon2Y + 8 >= player1Y && player2Weapon2Y <= player1Y + 48)
	LD	BC,1
	LD	HL,(_player2Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_697
	LD	IY,(_player2Weapon2Y)
	LEA	HL,IY+8
	LD	BC,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_697
	LD	IY,(_player1Y)
	LEA	HL,IY+48
	LD	BC,(_player2Weapon2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_697
; 1933			{
; 1934				if(player2Weapon2Flipped == 0 && player2Weapon2X + 8 >= player1X && player2Weapon2X <= player1X + 32)
	LD	HL,(_player2Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_680
	LD	IY,(_player2Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_680
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_680
; 1935				{
; 1936					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_673
; 1937					{
; 1938						player1XKnockback += player2WeaponKnockback;
	LD	BC,(_player2WeaponKnockback)
	LD	HL,(_player1XKnockback)
	ADD	HL,BC
	LD	(_player1XKnockback),HL
; 1939					}
L_673:
; 1940					player2Weapon2 = 0;
	LD	BC,0
	LD	(_player2Weapon2),BC
; 1941				}
; 1942				else if(player2Weapon2Flipped == 1 && player2Weapon2X <= player1X + 32 && player2Weapon2X + 8 >= player1X)
	JR	L_697
L_680:
	LD	BC,1
	LD	HL,(_player2Weapon2Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_697
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_697
	LD	IY,(_player2Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_697
; 1943				{
; 1944					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_677
; 1945					{
; 1946						player1XKnockback -= player2WeaponKnockback;
	LD	HL,(_player1XKnockback)
	LD	BC,(_player2WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player1XKnockback),HL
; 1947					}
L_677:
; 1948					player2Weapon2 = 0;
	LD	BC,0
	LD	(_player2Weapon2),BC
; 1949				}
; 1950			}
L_697:
; 1951			if(player2Weapon3 == 1 && player2Weapon3Y + 8 >= player1Y && player2Weapon3Y <= player1Y + 48)
	LD	BC,1
	LD	HL,(_player2Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_698
	LD	IY,(_player2Weapon3Y)
	LEA	HL,IY+8
	LD	BC,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_698
	LD	IY,(_player1Y)
	LEA	HL,IY+48
	LD	BC,(_player2Weapon3Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_698
; 1952			{
; 1953				if(player2Weapon3Flipped == 0 && player2Weapon3X + 8 >= player1X && player2Weapon3X <= player1X + 32)
	LD	HL,(_player2Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_695
	LD	IY,(_player2Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_695
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_695
; 1954				{
; 1955					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_688
; 1956					{
; 1957						player1XKnockback += player2WeaponKnockback;
	LD	BC,(_player2WeaponKnockback)
	LD	HL,(_player1XKnockback)
	ADD	HL,BC
	LD	(_player1XKnockback),HL
; 1958					}
L_688:
; 1959					player2Weapon3 = 0;
	LD	BC,0
	LD	(_player2Weapon3),BC
; 1960				}
; 1961				else if(player2Weapon3Flipped == 1 && player2Weapon3X <= player1X + 32 && player2Weapon3X + 8 >= player1X)
	JR	L_698
L_695:
	LD	BC,1
	LD	HL,(_player2Weapon3Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_698
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_698
	LD	IY,(_player2Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_698
; 1962				{
; 1963					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_692
; 1964					{
; 1965						player1XKnockback -= player2WeaponKnockback;
	LD	HL,(_player1XKnockback)
	LD	BC,(_player2WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player1XKnockback),HL
; 1966					}
L_692:
; 1967					player2Weapon3 = 0;
	LD	BC,0
	LD	(_player2Weapon3),BC
; 1968				}
; 1969			}
L_698:
; 1970			
; 1971			//fight - draw UI
; 1972			gfx_TransparentSprite(statusUi, 128, 208);
	LD	BC,208
	PUSH	BC
	LD	BC,128
	PUSH	BC
	LD	BC,_statusUi_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1973			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1974			gfx_SetTextXY(134, 216);
	LD	BC,216
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
; 1975			gfx_PrintInt(player1Lifes, 1);
	LD	BC,1
	PUSH	BC
	LD	BC,(_player1Lifes)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1976			gfx_SetTextXY(171, 216);
	LD	BC,216
	PUSH	BC
	LD	BC,171
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
; 1977			gfx_PrintInt(player2Lifes, 1);
	LD	BC,1
	PUSH	BC
	LD	BC,(_player2Lifes)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1978			
; 1979			//fight - draw player 1 position
; 1980			if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_700
; 1981			{
; 1982				gfx_PrintStringXY("TEST MODE", 10, 10);
	LD	BC,10
	PUSH	BC
	PUSH	BC
	LD	BC,L__432
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1983				gfx_SetTextXY(160, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
; 1984				gfx_PrintInt(player1X, 3);
	LD	BC,3
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1985				gfx_PrintString(" ");
	LD	BC,L__433
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
; 1986				gfx_PrintInt(player1Y, 3);
	LD	BC,3
	PUSH	BC
	LD	BC,(_player1Y)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1987			}
L_700:
; 1988			
; 1989			//fight - swap draw
; 1990			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	JR	L_702
L_232:
; 1991		}
; 1992		
; 1993		//---------------------------------------------------------------
; 1994		
; 1995		//pause
; 1996		pause:
; 1997		
; 1998		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
; 1999		gfx_SetColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
; 2000		gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 2001		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
; 2002		gfx_SetTextBGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
; 2003		gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 2004		gfx_PrintStringXY("Pause menu", 80, 90);
	LD	BC,90
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,L__434
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 2005		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 2006		gfx_PrintStringXY("Press [clear] to continue...", 55, 125);
	LD	BC,125
	PUSH	BC
	LD	BC,55
	PUSH	BC
	LD	BC,L__435
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 2007		gfx_PrintStringXY("Press [del] to give up...", 62, 145);
	LD	BC,145
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,L__436
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 2008		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
; 2009		
; 2010		while(1)
L_708:
; 2011		{
; 2012			key = os_GetCSC();
	CALL	_os_GetCSC
; 2013			if(key == sk_Clear)
	CP	A,15
	LD	(_key),A
	JR	Z,L_167
; 2014			{
; 2015				goto fight;
; 2016			}
; 2017			else if(key == sk_Del)
	LD	A,(_key)
	CP	A,56
	JR	NZ,L_708
; 2018			{
; 2019				player1Lifes = 0;
	LD	BC,0
	LD	(_player1Lifes),BC
L_453:
; 2020				goto gameOver;
; 2021			}
; 2022		}
; 2023		
; 2024		//---------------------------------------------------------------
; 2025		
; 2026		//gameOver
; 2027		gameOver:
; 2028		
; 2029		if(player1Lifes > 0)
	LD	BC,(_player1Lifes)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_710
; 2030		{
; 2031			gfx_Tilemap(&tilemap, getXBlock(7), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,7
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
; 2032		}
; 2033		else
	JR	L_712
L_710:
; 2034		{
; 2035			gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(1));
	LD	BC,1
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
; 2036		}
L_712:
; 2037		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
; 2038		gfx_SetTextBGColor(gfx_GetPixel(0, 0));
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
; 2039		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 2040		gfx_PrintStringXY("Press [2nd] to go to the main menu...", 15, 218);
	LD	BC,218
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,L__440
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 2041		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
; 2042		while(os_GetCSC() != sk_2nd);
L_714:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_714
; 2043		goto mainMenu;
	JR	L_12
; 2044		
; 2045		
; 2046		//---------------------------------------------------------------
; 2047		
; 2048		//error
; 2049		error:
; 2050		
; 2051		gfx_FillScreen(RED);
; 2052		gfx_SetTextFGColor(WHITE);
; 2053		gfx_SetTextBGColor(RED);
; 2054		gfx_SetTextScale(1, 1);
; 2055		gfx_PrintStringXY("An error has occurred!", 0, 0);
; 2056		gfx_PrintStringXY("Press [2nd] to go to the main menu...", 0, 10);
; 2057		gfx_SwapDraw();
; 2058		while(os_GetCSC() != sk_2nd);
L_718:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_718
; 2059		goto mainMenu;
	JR	L_12
L_39:
; 2060		
; 2061		//---------------------------------------------------------------
; 2062		
; 2063		//quit game
; 2064		quitGame:
; 2065		
; 2066		gfx_End();
	CALL	_gfx_End
	OR	A,A
; 2067		return 0;
	SBC	HL,HL
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_PrintString                    IMPORT  -----   function
;_gfx_PrintInt                       IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_shield_data                        IMPORT   3138   variable
;_player1XKnockback                  STATIC      3   variable
;_playerDeath                        STATIC      3   variable
;_playerGrounded                     STATIC      3   variable
;_playerY                            STATIC      3   variable
;_playerX                            STATIC      3   variable
;_player                             STATIC      3   variable
;_player2Weapon3Y                    STATIC      3   variable
;_player2Weapon3X                    STATIC      3   variable
;_player2Weapon3Flipped              STATIC      3   variable
;_player2Weapon2Y                    STATIC      3   variable
;_player2Weapon2X                    STATIC      3   variable
;_player2Weapon2Flipped              STATIC      3   variable
;_player2Weapon1Y                    STATIC      3   variable
;_player2Weapon1X                    STATIC      3   variable
;_player2Weapon1Flipped              STATIC      3   variable
;_player2MoveAnimationCount          STATIC      3   variable
;_player2XKnockback                  STATIC      3   variable
;_player2Attack                      STATIC      3   variable
;_player2Jump                        STATIC      3   variable
;_player2Right                       STATIC      3   variable
;_player2Left                        STATIC      3   variable
;_player2Down                        STATIC      3   variable
;_player1Weapon3Y                    STATIC      3   variable
;_player1Weapon3X                    STATIC      3   variable
;_player1Weapon3Flipped              STATIC      3   variable
;_player1Weapon2Y                    STATIC      3   variable
;_player1Weapon2X                    STATIC      3   variable
;_player1Weapon2Flipped              STATIC      3   variable
;_player1Weapon1Y                    STATIC      3   variable
;_player1Weapon1X                    STATIC      3   variable
;_player1Weapon1Flipped              STATIC      3   variable
;_player1MoveAnimationCount          STATIC      3   variable
;_gfx_GetPixel                       IMPORT  -----   function
;_statusUi_data                      IMPORT   2050   variable
;_counterFight_data                  IMPORT   1538   variable
;_counter1_data                      IMPORT   1538   variable
;_counter2_data                      IMPORT   1538   variable
;_counter3_data                      IMPORT   1538   variable
;_player2WeaponKnockbackStrength      STATIC      3   variable
;_player2WeaponKnockback             STATIC      3   variable
;_player2WeaponSpeed                 STATIC      3   variable
;_player2JumpHeight                  STATIC      3   variable
;_player2JumpSpeed                   STATIC      3   variable
;_player2FallSpeed                   STATIC      3   variable
;_player2MoveAnimationSpeed          STATIC      3   variable
;_player2MoveSpeed                   STATIC      3   variable
;_character1Weapon_data              IMPORT     66   variable
;_character1NotGrounded_data         IMPORT   1538   variable
;_character1Moving2_data             IMPORT   1538   variable
;_character1Moving1_data             IMPORT   1538   variable
;_player1WeaponKnockbackStrength      STATIC      3   variable
;_player1WeaponKnockback             STATIC      3   variable
;_player1WeaponSpeed                 STATIC      3   variable
;_player1JumpHeight                  STATIC      3   variable
;_player1JumpSpeed                   STATIC      3   variable
;_player1FallSpeed                   STATIC      3   variable
;_player1MoveAnimationSpeed          STATIC      3   variable
;_player1MoveSpeed                   STATIC      3   variable
;_character0Weapon_data              IMPORT     66   variable
;_gfx_FlipSpriteY                    IMPORT  -----   function
;_character0NotGrounded_data         IMPORT   1538   variable
;_character0Moving2_data             IMPORT   1538   variable
;_character0Moving1_data             IMPORT   1538   variable
;_player2Y                           STATIC      3   variable
;_player2X                           STATIC      3   variable
;_player1Y                           STATIC      3   variable
;_player1X                           STATIC      3   variable
;_player2SpawnY                      STATIC      3   variable
;_player2SpawnX                      STATIC      3   variable
;_player1SpawnY                      STATIC      3   variable
;_player1SpawnX                      STATIC      3   variable
;_player2Weapon3                     STATIC      3   variable
;_player2Weapon2                     STATIC      3   variable
;_player2Weapon1                     STATIC      3   variable
;_player2Lifes                       STATIC      3   variable
;_player2ShieldActive                STATIC      3   variable
;_player2Grounded                    STATIC      3   variable
;_player2Jumping                     STATIC      3   variable
;_player2MoveAnimation               STATIC      3   variable
;_player2Flipped                     STATIC      3   variable
;_player1Weapon3                     STATIC      3   variable
;_player1Weapon2                     STATIC      3   variable
;_player1Weapon1                     STATIC      3   variable
;_player1Lifes                       STATIC      3   variable
;_player1ShieldActive                STATIC      3   variable
;_player1Grounded                    STATIC      3   variable
;_player1Jumping                     STATIC      3   variable
;_player1MoveAnimation               STATIC      3   variable
;_player1Flipped                     STATIC      3   variable
;_mapAnimationState                  STATIC      3   variable
;_mapAnimationCount                  STATIC      3   variable
;_player2AiAttackDelayCount          STATIC      3   variable
;_player2AiAttackDelay               STATIC      3   variable
;_player2CharacterSelection          STATIC      3   variable
;_player1CharacterSelection          STATIC      3   variable
;_character1_data                    IMPORT   1538   variable
;_character0_data                    IMPORT   1538   variable
;_randomCharacter_data               IMPORT   1538   variable
;_characterHighlighter_data          IMPORT   3074   variable
;_gfx_FillRectangle                  IMPORT  -----   function
;_mapYBlock3                         STATIC      3   variable
;_mapXBlock3                         STATIC      3   variable
;_mapYBlock2                         STATIC      3   variable
;_mapXBlock2                         STATIC      3   variable
;_mapAnimationSpeed                  STATIC      3   variable
;_mapYBlock1                         STATIC      3   variable
;_mapXBlock1                         STATIC      3   variable
;_mapAnimation                       STATIC      3   variable
;_map                                STATIC      3   variable
;_random                             IMPORT  -----   function
;_mapHighlighter_data                IMPORT   1026   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_player2IsAi                        STATIC      3   variable
;_players                            STATIC      3   variable
;_selecting                          STATIC      3   variable
;_selection                          STATIC      3   variable
;_os_GetCSC                          IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_delay                              IMPORT  -----   function
;_testMode                           STATIC      3   variable
;_key                                STATIC      1   variable
;_kb_Scan                            IMPORT  -----   function
;_character1WeaponKnockbackStrength      STATIC      3   variable
;_character1WeaponKnockback          STATIC      3   variable
;_character1WeaponSpeed              STATIC      3   variable
;_character1JumpHeight               STATIC      3   variable
;_character1JumpSpeed                STATIC      3   variable
;_character1FallSpeed                STATIC      3   variable
;_character1MoveAnimationSpeed       STATIC      3   variable
;_character1MoveSpeed                STATIC      3   variable
;_character0WeaponKnockbackStrength      STATIC      3   variable
;_character0WeaponKnockback          STATIC      3   variable
;_character0WeaponSpeed              STATIC      3   variable
;_character0JumpHeight               STATIC      3   variable
;_character0JumpSpeed                STATIC      3   variable
;_character0FallSpeed                STATIC      3   variable
;_character0MoveAnimationSpeed       STATIC      3   variable
;_character0MoveSpeed                STATIC      3   variable
;_srand                              IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_version                            STATIC      4   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_Tilemap                        IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetMonospaceFont               IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_global_palette                     IMPORT    264   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_tileset_tiles_data                 IMPORT    240   variable
;_tilemap                            STATIC     18   variable
;_tilemap_map                        IMPORT  unknown variable
;_player2WeaponFlipped               STATIC      3   variable
;_player2Weapon                      STATIC      3   variable
;_player2CharacterNotGroundedFlipped      STATIC      3   variable
;_player2CharacterMoving2Flipped      STATIC      3   variable
;_player2CharacterMoving1Flipped      STATIC      3   variable
;_player2CharacterFlipped            STATIC      3   variable
;_player2CharacterNotGrounded        STATIC      3   variable
;_player2CharacterMoving2            STATIC      3   variable
;_player2CharacterMoving1            STATIC      3   variable
;_player2Character                   STATIC      3   variable
;_player1WeaponFlipped               STATIC      3   variable
;_player1Weapon                      STATIC      3   variable
;_player1CharacterNotGroundedFlipped      STATIC      3   variable
;_player1CharacterMoving2Flipped      STATIC      3   variable
;_player1CharacterMoving1Flipped      STATIC      3   variable
;_player1CharacterFlipped            STATIC      3   variable
;_player1CharacterNotGrounded        STATIC      3   variable
;_player1CharacterMoving2            STATIC      3   variable
;_player1CharacterMoving1            STATIC      3   variable
;_player1Character                   STATIC      3   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;G_5                                  IX-14      3   variable
;G_1                                  IX-11      1   variable
;G_4                                  IX-10      1   variable
;G_0                                   IX-9      1   variable
;G_7                                   IX-8      1   variable
;G_6                                   IX-7      1   variable
;G_2                                   IX-6      1   variable
;G_3                                   IX-5      1   variable
;G_17                                  IX-4      1   variable
;G_16                                  IX-3      1   variable
;G_9                                   IX-2      1   variable
;G_8                                   IX-1      1   variable


; Stack Frame Size: 20 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__7:
	DB	"TEST MODE"
	DB	0
L__8:
	DB	"Press [2nd] to start..."
	DB	0
L__17:
	DB	"Singleplayer"
	DB	0
L__19:
	DB	"Multiplayer"
	DB	0
L__21:
	DB	"Quit game"
	DB	0
L__22:
	DB	"Star it on GitHub!"
	DB	0
L__27:
	DB	"Select a map:"
	DB	0
L__39:
	DB	"Select character 1:"
	DB	0
L__54:
	DB	"Select character 2:"
	DB	0
L__70:
	DB	"Select a difficulty:"
	DB	0
L__71:
	DB	"1: Easy"
	DB	0
L__72:
	DB	"2: Normal"
	DB	0
L__73:
	DB	"3: Hard"
	DB	0
L__74:
	DB	"4: Random"
	DB	0
L__432:
	DB	"TEST MODE"
	DB	0
L__433:
	DB	" "
	DB	0
L__434:
	DB	"Pause menu"
	DB	0
L__435:
	DB	"Press [clear] to continue..."
	DB	0
L__436:
	DB	"Press [del] to give up..."
	DB	0
L__440:
	DB	"Press [2nd] to go to the main menu..."
	DB	0
	XREF _tilemap_map:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_SetMonospaceFont:ROM
	XREF _gfx_FlipSpriteY:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintString:ROM
	XREF _gfx_PrintInt:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_GetPixel:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _statusUi_data:ROM
	XREF _shield_data:ROM
	XREF _randomCharacter_data:ROM
	XREF _mapHighlighter_data:ROM
	XREF _counterFight_data:ROM
	XREF _counter3_data:ROM
	XREF _counter2_data:ROM
	XREF _counter1_data:ROM
	XREF _characterHighlighter_data:ROM
	XREF _character1Weapon_data:ROM
	XREF _character1NotGrounded_data:ROM
	XREF _character1Moving2_data:ROM
	XREF _character1Moving1_data:ROM
	XREF _character1_data:ROM
	XREF _character0Weapon_data:ROM
	XREF _character0NotGrounded_data:ROM
	XREF _character0Moving2_data:ROM
	XREF _character0Moving1_data:ROM
	XREF _character0_data:ROM
	XREF _tileset_tiles_data:ROM
	XREF _global_palette:ROM
	XREF _os_GetCSC:ROM
	XREF _delay:ROM
	XREF _random:ROM
	XREF _srand:ROM
	XREF _malloc:ROM
	XREF __imuls:ROM
	XREF __fcmp:ROM
	XREF __ltof:ROM
	XREF __itol:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _main
	XDEF _getYBlock
	XDEF _getXBlock
	XDEF _tilemap
	XDEF _player2WeaponFlipped
	XDEF _player2Weapon
	XDEF _player2CharacterNotGroundedFlipped
	XDEF _player2CharacterMoving2Flipped
	XDEF _player2CharacterMoving1Flipped
	XDEF _player2CharacterFlipped
	XDEF _player2CharacterNotGrounded
	XDEF _player2CharacterMoving2
	XDEF _player2CharacterMoving1
	XDEF _player2Character
	XDEF _player1WeaponFlipped
	XDEF _player1Weapon
	XDEF _player1CharacterNotGroundedFlipped
	XDEF _player1CharacterMoving2Flipped
	XDEF _player1CharacterMoving1Flipped
	XDEF _player1CharacterFlipped
	XDEF _player1CharacterNotGrounded
	XDEF _player1CharacterMoving2
	XDEF _player1CharacterMoving1
	XDEF _player1Character
	XDEF _key
	XDEF _player2Weapon3Flipped
	XDEF _player2Weapon3Y
	XDEF _player2Weapon3X
	XDEF _player2Weapon3
	XDEF _player2Weapon2Flipped
	XDEF _player2Weapon2Y
	XDEF _player2Weapon2X
	XDEF _player2Weapon2
	XDEF _player2Weapon1Flipped
	XDEF _player2Weapon1Y
	XDEF _player2Weapon1X
	XDEF _player2Weapon1
	XDEF _player2WeaponKnockbackStrength
	XDEF _player2WeaponKnockback
	XDEF _player2WeaponSpeed
	XDEF _player2Lifes
	XDEF _player2XKnockback
	XDEF _player2ShieldActive
	XDEF _player2Grounded
	XDEF _player2Jumping
	XDEF _player2MoveAnimationSpeed
	XDEF _player2MoveAnimationCount
	XDEF _player2MoveAnimation
	XDEF _player2JumpHeight
	XDEF _player2JumpSpeed
	XDEF _player2FallSpeed
	XDEF _player2MoveSpeed
	XDEF _player2Flipped
	XDEF _player2Y
	XDEF _player2X
	XDEF _player2CharacterSelection
	XDEF _player2IsAi
	XDEF _player2AiAttackDelayCount
	XDEF _player2AiAttackDelay
	XDEF _player2Right
	XDEF _player2Left
	XDEF _player2Down
	XDEF _player2Attack
	XDEF _player2Jump
	XDEF _player1Weapon3Flipped
	XDEF _player1Weapon3Y
	XDEF _player1Weapon3X
	XDEF _player1Weapon3
	XDEF _player1Weapon2Flipped
	XDEF _player1Weapon2Y
	XDEF _player1Weapon2X
	XDEF _player1Weapon2
	XDEF _player1Weapon1Flipped
	XDEF _player1Weapon1Y
	XDEF _player1Weapon1X
	XDEF _player1Weapon1
	XDEF _player1WeaponKnockbackStrength
	XDEF _player1WeaponKnockback
	XDEF _player1WeaponSpeed
	XDEF _player1Lifes
	XDEF _player1XKnockback
	XDEF _player1ShieldActive
	XDEF _player1Grounded
	XDEF _player1Jumping
	XDEF _player1MoveAnimationSpeed
	XDEF _player1MoveAnimationCount
	XDEF _player1MoveAnimation
	XDEF _player1JumpHeight
	XDEF _player1JumpSpeed
	XDEF _player1FallSpeed
	XDEF _player1MoveSpeed
	XDEF _player1Flipped
	XDEF _player1Y
	XDEF _player1X
	XDEF _player1CharacterSelection
	XDEF _player2SpawnY
	XDEF _player2SpawnX
	XDEF _player1SpawnY
	XDEF _player1SpawnX
	XDEF _playerDeath
	XDEF _playerGrounded
	XDEF _playerY
	XDEF _playerX
	XDEF _player
	XDEF _character1WeaponKnockbackStrength
	XDEF _character1WeaponKnockback
	XDEF _character1WeaponSpeed
	XDEF _character1JumpHeight
	XDEF _character1JumpSpeed
	XDEF _character1FallSpeed
	XDEF _character1MoveAnimationSpeed
	XDEF _character1MoveSpeed
	XDEF _character0WeaponKnockbackStrength
	XDEF _character0WeaponKnockback
	XDEF _character0WeaponSpeed
	XDEF _character0JumpHeight
	XDEF _character0JumpSpeed
	XDEF _character0FallSpeed
	XDEF _character0MoveAnimationSpeed
	XDEF _character0MoveSpeed
	XDEF _mapYBlock3
	XDEF _mapXBlock3
	XDEF _mapYBlock2
	XDEF _mapXBlock2
	XDEF _mapYBlock1
	XDEF _mapXBlock1
	XDEF _mapAnimationState
	XDEF _mapAnimationSpeed
	XDEF _mapAnimationCount
	XDEF _mapAnimation
	XDEF _map
	XDEF _players
	XDEF _selecting
	XDEF _selection
	XDEF _testMode
	XDEF _version
	END
