; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_version:
	DB	49
	DB	46
	DB	48
	DB	0
	SEGMENT BSS
_selection:
	DS	3
_selecting:
	DS	3
_players:
	DS	3
_map:
	DS	3
_mapXBlock:
	DS	3
_mapYBlock:
	DS	3
_fighting:
	DS	3
_player:
	DS	3
_playerX:
	DS	3
_playerY:
	DS	3
_playerGrounded:
	DS	3
_player1CharacterSelection:
	DS	3
_player1X:
	DS	3
_player1Y:
	DS	3
_player1Flipped:
	DS	3
_player1MoveSpeed:
	DS	3
_player1FallSpeed:
	DS	3
_player1JumpSpeed:
	DS	3
_player1JumpHeight:
	DS	3
_player1MoveAnimation:
	DS	3
_player1MoveAnimationCount:
	DS	3
_player1Jumping:
	DS	3
_player1Grounded:
	DS	3
_player1ShieldActive:
	DS	3
_player1Lifes:
	DS	3
_player2IsAi:
	DS	3
_player2CharacterSelection:
	DS	3
_player2X:
	DS	3
_player2Y:
	DS	3
_player2Flipped:
	DS	3
_player2MoveSpeed:
	DS	3
_player2FallSpeed:
	DS	3
_player2JumpSpeed:
	DS	3
_player2JumpHeight:
	DS	3
_player2MoveAnimation:
	DS	3
_player2MoveAnimationCount:
	DS	3
_player2Jumping:
	DS	3
_player2Grounded:
	DS	3
_player2ShieldActive:
	DS	3
_player2Lifes:
	DS	3
_key:
	DS	1
_player1Character:
	DS	3
_player1CharacterMoving1:
	DS	3
_player1CharacterMoving2:
	DS	3
_player1CharacterJumping:
	DS	3
_player1CharacterFlipped:
	DS	3
_player1CharacterMoving1Flipped:
	DS	3
_player1CharacterMoving2Flipped:
	DS	3
_player1CharacterJumpingFlipped:
	DS	3
_player2Character:
	DS	3
_player2CharacterMoving1:
	DS	3
_player2CharacterMoving2:
	DS	3
_player2CharacterJumping:
	DS	3
_player2CharacterFlipped:
	DS	3
_player2CharacterMoving1Flipped:
	DS	3
_player2CharacterMoving2Flipped:
	DS	3
_player2CharacterJumpingFlipped:
	DS	3
_tilemap:
	DS	18
;    1	#include <fileioc.h>
;    2	#include <fontlibc.h>
;    3	#include "gfx/gfx.h"
;    4	#include <graphx.h>
;    5	#include <keypadc.h>
;    6	#include <stdbool.h>
;    7	#include <stddef.h>
;    8	#include <stdint.h>
;    9	#include <stdio.h>
;   10	#include <stdlib.h>
;   11	#include <string.h>
;   12	#include <tice.h>
;   13	
;   14	extern unsigned char tilemap_map[];
;   15	
;   16	#define TILE_WIDTH          16
;   17	#define TILE_HEIGHT         16
;   18	
;   19	#define TILEMAP_WIDTH       160
;   20	#define TILEMAP_HEIGHT      120
;   21	
;   22	#define TILEMAP_DRAW_WIDTH  20
;   23	#define TILEMAP_DRAW_HEIGHT 15
;   24	
;   25	#define Y_OFFSET            0
;   26	#define X_OFFSET            0
;   27	
;   28	#define BLACK				1
;   29	#define GRAY				3
;   30	#define RED					gfx_red
;   31	#define TRANSPARENT			0
;   32	#define WHITE				2
;   33	
;   34	char version[] = "1.0";
;   35	
;   36	int selection;
;   37	int selecting;
;   38	
;   39	int players;
;   40	int map;
;   41	int mapXBlock;
;   42	int mapYBlock;
;   43	int fighting;
;   44	
;   45	int player;
;   46	int playerX;
;   47	int playerY;
;   48	int playerGrounded;
;   49	
;   50	int player1CharacterSelection;
;   51	int player1X;
;   52	int player1Y;
;   53	int player1Flipped;
;   54	int player1MoveSpeed;
;   55	int player1FallSpeed;
;   56	int player1JumpSpeed;
;   57	int player1JumpHeight;
;   58	int player1MoveAnimation;
;   59	int player1MoveAnimationCount;
;   60	int player1Jumping;
;   61	int player1Grounded;
;   62	int player1ShieldActive;
;   63	int player1Lifes;
;   64	
;   65	int player2IsAi;
;   66	int player2CharacterSelection;
;   67	int player2X;
;   68	int player2Y;
;   69	int player2Flipped;
;   70	int player2MoveSpeed;
;   71	int player2FallSpeed;
;   72	int player2JumpSpeed;
;   73	int player2JumpHeight;
;   74	int player2MoveAnimation;
;   75	int player2MoveAnimationCount;
;   76	int player2Jumping;
;   77	int player2Grounded;
;   78	int player2ShieldActive;
;   79	int player2Lifes;
;   80	
;   81	sk_key_t key;
;   82	
;   83	gfx_sprite_t *player1Character;
;   84	gfx_sprite_t *player1CharacterMoving1;
;   85	gfx_sprite_t *player1CharacterMoving2;
;   86	gfx_sprite_t *player1CharacterJumping;
;   87	gfx_sprite_t *player1CharacterFlipped;
;   88	gfx_sprite_t *player1CharacterMoving1Flipped;
;   89	gfx_sprite_t *player1CharacterMoving2Flipped;
;   90	gfx_sprite_t *player1CharacterJumpingFlipped;
;   91	
;   92	gfx_sprite_t *player2Character;
;   93	gfx_sprite_t *player2CharacterMoving1;
;   94	gfx_sprite_t *player2CharacterMoving2;
;   95	gfx_sprite_t *player2CharacterJumping;
;   96	gfx_sprite_t *player2CharacterFlipped;
;   97	gfx_sprite_t *player2CharacterMoving1Flipped;
;   98	gfx_sprite_t *player2CharacterMoving2Flipped;
;   99	gfx_sprite_t *player2CharacterJumpingFlipped;
;  100	
;  101	gfx_tilemap_t tilemap;
	SEGMENT CODE
;  102	
;  103	int getXBlock(int xBlock)
;  104	{
_getXBlock:
	CALL	__frameset0
;  105		return TILE_WIDTH * TILEMAP_DRAW_WIDTH * xBlock;
	LD	BC,320
	LD	HL,(IX+6)
	CALL	__imuls
;  106	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getXBlock ***************************
;Name                         Addr/Register   Size   Type
;xBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  107	
;  108	int getYBlock(int yBlock)
;  109	{
_getYBlock:
	CALL	__frameset0
;  110		return TILE_HEIGHT * TILEMAP_DRAW_HEIGHT * yBlock;
	LD	HL,(IX+6)
	LD	A,240
	CALL	__imul_b
;  111	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getYBlock ***************************
;Name                         Addr/Register   Size   Type
;yBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  112	
;  113	int main(void)
;  114	{
_main:
	LD	HL,-4
	CALL	__frameset
;  115		//initialization
;  116		player1Character = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  117		player1CharacterMoving1 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1Character),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  118		player1CharacterMoving2 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving1),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  119		player1CharacterJumping = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving2),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  120		player1CharacterFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterJumping),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  121		player1CharacterMoving1Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  122		player1CharacterMoving2Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving1Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  123		player1CharacterJumpingFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving2Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  124		
;  125		player2Character = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterJumpingFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  126		player2CharacterMoving1 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2Character),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  127		player2CharacterMoving2 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving1),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  128		player2CharacterJumping = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving2),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  129		player2CharacterFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterJumping),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  130		player2CharacterMoving1Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  131		player2CharacterMoving2Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving1Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  132		player2CharacterJumpingFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving2Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_player2CharacterJumpingFlipped),HL
;  133		
;  134		tilemap.map         = tilemap_map;
	LD	BC,_tilemap_map
	LD	(_tilemap),BC
;  135	    tilemap.tiles       = tileset_tiles;
	LD	BC,_tileset_tiles_data
	LD	(_tilemap+3),BC
;  136	    tilemap.type_width  = gfx_tile_16_pixel;
	LD	A,4
	LD	(_tilemap+10),A
;  137	    tilemap.type_height = gfx_tile_16_pixel;
	LD	(_tilemap+11),A
;  138	    tilemap.tile_height = TILE_HEIGHT;
	LD	A,16
	LD	(_tilemap+6),A
;  139	    tilemap.tile_width  = TILE_WIDTH;
	LD	(_tilemap+7),A
;  140	    tilemap.draw_height = TILEMAP_DRAW_HEIGHT;
	LD	A,15
	LD	(_tilemap+8),A
;  141	    tilemap.draw_width  = TILEMAP_DRAW_WIDTH;
	LD	A,20
	LD	(_tilemap+9),A
;  142	    tilemap.height      = TILEMAP_HEIGHT;
	LD	A,120
	LD	(_tilemap+12),A
;  143	    tilemap.width       = TILEMAP_WIDTH;
	LD	A,160
	LD	(_tilemap+13),A
;  144	    tilemap.y_loc       = Y_OFFSET;
	XOR	A,A
	LD	(_tilemap+14),A
;  145	    tilemap.x_loc       = X_OFFSET;
	LD	BC,0
	LD	(_tilemap+15),BC
;  146		
;  147		gfx_Begin();
	CALL	_gfx_Begin
;  148		
;  149		gfx_SetPalette(global_palette, sizeof_global_palette, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,272
	PUSH	BC
	LD	BC,_global_palette
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  150		gfx_SetTransparentColor(TRANSPARENT);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;  151	    gfx_SetColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  152		
;  153		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  154		
;  155		gfx_SetMonospaceFont(8);
	LD	BC,8
	PUSH	BC
	CALL	_gfx_SetMonospaceFont
	POP	BC
;  156		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  157	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  158		
;  159		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  160		gfx_PrintStringXY(version, 296, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,_version
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  161		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  162		
;  163		delay(2000);
	LD	BC,2000
	PUSH	BC
	CALL	_delay
	POP	BC
;  164		
;  165		//---------------------------------------------------------------
;  166		
;  167		//start screen
;  168		startScreen:
L_2:
;  169		
;  170		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  171		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  172	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  173		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  174		gfx_PrintStringXY("Press [2nd] to start...", 78, 200);
	LD	BC,200
	PUSH	BC
	LD	BC,78
	PUSH	BC
	LD	BC,L__2
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  175		gfx_PrintStringXY(version, 296, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,_version
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  176		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  177		while(os_GetCSC() != sk_2nd);
L_4:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_4
;  178		
;  179		//---------------------------------------------------------------
;  180		
;  181		//main menu
;  182		mainMenu:
L_5:
;  183		
;  184		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  185		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  186		while(selecting)
	JR	L_25
L_26:
;  187		{
;  188			gfx_Tilemap(&tilemap, getXBlock(1), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  189			gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  190			gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  191			
;  192			key = os_GetCSC();
	CALL	_os_GetCSC
;  193			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_17
;  194			{
;  195				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  196			}
;  197			else if(key == sk_Clear)
	JR	L_20
L_17:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_2
;  198			{
;  199				goto startScreen;
;  200			}
;  201			else if(key == sk_Up && selection != 0)
	LD	A,(_key)
	CP	A,4
	JR	NZ,L_13
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_13
;  202			{
;  203				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  204			}
;  205			else if(key == sk_Down && selection != 1)
	JR	L_20
L_13:
	LD	A,(_key)
	CP	A,1
	JR	NZ,L_20
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_20
;  206			{
;  207				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  208			}
L_20:
;  209			
;  210			if(selection == 0)
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_19
;  211			{
;  212				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  213			}
;  214			else
	JR	L_21
L_19:
;  215			{
;  216				gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  217			}
L_21:
;  218			gfx_PrintStringXY("Singleplayer", 112, 68);
	LD	BC,68
	PUSH	BC
	LD	BC,112
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  219			if(selection == 1)
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_23
;  220			{
;  221				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  222			}
;  223			else
	JR	L_24
L_23:
;  224			{
;  225				gfx_SetTextFGColor(BLACK);
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  226			}
L_24:
;  227			gfx_PrintStringXY("Quit game", 124, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,124
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  228			gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  229			gfx_PrintStringXY("Star it on GitHub!", 90, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,90
	PUSH	BC
	LD	BC,L__14
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  230			
;  231			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  232		}
L_25:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_26
;  233		
;  234		switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__16:
	DW	2
	DB	0
	DW24	L_27	

	DB	1
	DW24	L_30	

	DW24	L_32	

;  235		{
;  236			case 0:
L_27:
;  237				players = 1;
	LD	BC,1
	LD	(_players),BC
;  238				goto mapSelector;
L_28:
;  239				break;
;  240			case 1:
;  241				goto quitGame;
;  242				break;
;  243		}
;  244		
;  245		goto error;
;  246		
;  247		//---------------------------------------------------------------
;  248		
;  249		//map selector
;  250		mapSelector:
;  251		
;  252		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  253		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  254		while(selecting)
	JR	L_49
L_50:
;  255		{
;  256			gfx_Tilemap(&tilemap, getXBlock(2), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,2
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  257			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  258			gfx_SetTextBGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  259			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  260			gfx_PrintStringXY("Select a map:", 62, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,L__17
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  261			
;  262			key = os_GetCSC();
	CALL	_os_GetCSC
;  263			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_44
;  264			{
;  265				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  266			}
;  267			else if(key == sk_Clear)
	JR	L_47
L_44:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_5
;  268			{
;  269				goto mainMenu;
;  270			}
;  271			else if(key == sk_Left && selection != 0)
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_40
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_40
;  272			{
;  273				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  274			}
;  275			else if(key == sk_Right && selection != 1)
	JR	L_47
L_40:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_47
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_47
;  276			{
;  277				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  278			}
L_47:
;  279			
;  280			switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__24:
	DW	2
	DB	0
	DW24	L_45	

	DB	1
	DW24	L_46	

	DW24	L_48	

;  281			{
;  282				case 0:
L_45:
;  283					gfx_TransparentSprite(mapHighlighter, 32, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  284					break;
	JR	L_48
;  285				case 1:
L_46:
;  286					gfx_TransparentSprite(mapHighlighter, 96, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  287					break;
;  288			}
L_48:
;  289			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  290		}
L_49:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_50
;  291		map = selection;
	LD	BC,(_selection)
	LD	(_map),BC
;  292		switch(map)
	LD	HL,(_map)
	CALL	__case8
L__26:
	DW	2
	DB	0
	DW24	L_52	

	DB	1
	DW24	L_55	

	DW24	L_54	

;  293		{
;  294			case 0:
L_52:
;  295				mapXBlock = 3;
	LD	BC,3
	LD	(_mapXBlock),BC
;  296				mapYBlock = 0;
	LD	BC,0
	LD	(_mapYBlock),BC
;  297				break;
;  298			case 1:
;  299				break;
;  300		}
L_55:
;  301		
;  302		goto characterSelector;
L_54:
;  303		
;  304		//---------------------------------------------------------------
;  305		
;  306		//character selector
;  307		characterSelector:
;  308		
;  309		selection = 0;
	LD	(_selection),BC
;  310		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  311		
;  312		while(selecting)
	JR	L_80
L_81:
;  313		{
;  314			switch(map)
	LD	HL,(_map)
	CALL	__case8
L__27:
	DW	2
	DB	0
	DW24	L_56	

	DB	1
	DW24	L_32	

	DW24	L_58	

;  315			{
;  316				case 0:
L_56:
;  317					gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  318					break;
;  319				case 1:
;  320					goto error;
;  321					break;
;  322			}
L_58:
;  323			gfx_SetColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  324			gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  325			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  326			gfx_SetTextBGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  327			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  328			gfx_PrintStringXY("Select a character:", 10, 76);
	LD	BC,76
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__28
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  329			gfx_TransparentSprite(characterHighlighter, 138, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,138
	PUSH	BC
	LD	BC,_characterHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  330			
;  331			key = os_GetCSC();
	CALL	_os_GetCSC
;  332			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_75
;  333			{
;  334				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  335			}
;  336			else if(key == sk_Clear)
	JR	L_78
L_75:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_28
;  337			{
;  338				goto mapSelector;
;  339			}
;  340			else if(key == sk_Left && selection != 0)
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_71
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_71
;  341			{
;  342				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  343			}
;  344			else if(key == sk_Left && selection == 0)
	JR	L_78
L_71:
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_69
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_69
;  345			{
;  346				selection = 1;
	LD	BC,1
	LD	(_selection),BC
;  347			}
;  348			else if(key == sk_Right && selection != 1)
	JR	L_78
L_69:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_67
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_67
;  349			{
;  350				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  351			}
;  352			else if(key == sk_Right && selection == 1)
	JR	L_78
L_67:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_78
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_78
;  353			{
;  354				selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  355			}
L_78:
;  356			
;  357			switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__39:
	DW	2
	DB	0
	DW24	L_76	

	DB	1
	DW24	L_77	

	DW24	L_79	

;  358			{
;  359				case 0:
L_76:
;  360					gfx_TransparentSprite(character1, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  361					gfx_TransparentSprite(character0, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  362					gfx_TransparentSprite(character1, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  363					break;
	JR	L_79
;  364				case 1:
L_77:
;  365					gfx_TransparentSprite(character0, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  366					gfx_TransparentSprite(character1, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  367					gfx_TransparentSprite(character0, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  368					break;
;  369			}
L_79:
;  370			
;  371			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  372		}
L_80:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_81
;  373		player1CharacterSelection = selection;
	LD	BC,(_selection)
	LD	(_player1CharacterSelection),BC
;  374		
;  375		goto prepareFight;
;  376		
;  377		//---------------------------------------------------------------
;  378		
;  379		//prepareFight
;  380		prepareFight:
;  381		
;  382		fighting = 1;
	LD	BC,1
	LD	(_fighting),BC
;  383		player1Flipped = 0;
	LD	BC,0
	LD	(_player1Flipped),BC
;  384		player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
;  385		player1Jumping = 0;
	LD	(_player1Jumping),BC
;  386		player1Grounded = 1;
	LD	BC,1
	LD	(_player1Grounded),BC
;  387		player1ShieldActive = 0;
	LD	BC,0
	LD	(_player1ShieldActive),BC
;  388		player1Lifes = 3;
	LD	BC,3
	LD	(_player1Lifes),BC
;  389		player2Flipped = 1;
	LD	BC,1
	LD	(_player2Flipped),BC
;  390		player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
;  391		player2Jumping = 0;
	LD	(_player2Jumping),BC
;  392		player2Grounded = 1;
	LD	BC,1
	LD	(_player2Grounded),BC
;  393		player2ShieldActive = 0;
	LD	BC,0
	LD	(_player2ShieldActive),BC
;  394		player2Lifes = 3;
	LD	BC,3
	LD	(_player2Lifes),BC
;  395		switch(map)
	LD	HL,(_map)
	CALL	__case8
L__41:
	DW	2
	DB	0
	DW24	L_84	

	DB	1
	DW24	L_92	

	DW24	L_92	

;  396		{
;  397			case 0:
L_84:
;  398				player1X = 80;
	LD	BC,80
	LD	(_player1X),BC
;  399				player1Y = 132;
	LD	BC,132
	LD	(_player1Y),BC
;  400				if(players == 1)
	LD	HL,(_players)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_87
;  401				{
;  402					player2IsAi = 1;
	LD	(_player2IsAi),BC
;  403				}
;  404				else if(players == 2)
	JR	L_88
L_87:
	LD	BC,2
	LD	HL,(_players)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_88
;  405				{
;  406					player2IsAi = 0;
	LD	BC,0
	LD	(_player2IsAi),BC
;  407				}
L_88:
;  408				player2X = 220;
	LD	BC,220
	LD	(_player2X),BC
;  409				player2Y = 132;
	LD	BC,132
	LD	(_player2Y),BC
;  410				break;
;  411			case 1:
;  412				break;
;  413		}
L_92:
;  414		
;  415		switch(player1CharacterSelection)
	LD	HL,(_player1CharacterSelection)
	CALL	__case8
L__44:
	DW	2
	DB	0
	DW24	L_90	

	DB	1
	DW24	L_91	

	DW24	L_95	

;  416		{
;  417			case 0:
L_90:
;  418				player1Character = character0;
	LD	BC,_character0_data
	LD	(_player1Character),BC
;  419				player1CharacterMoving1 = character0Moving1;
	LD	BC,_character0Moving1_data
	LD	(_player1CharacterMoving1),BC
;  420				player1CharacterMoving2 = character0Moving2;
	LD	BC,_character0Moving2_data
	LD	(_player1CharacterMoving2),BC
;  421				player1CharacterJumping = character0Jumping;
	LD	BC,_character0Jumping_data
	LD	(_player1CharacterJumping),BC
;  422				gfx_FlipSpriteY(character0, player1CharacterFlipped);
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  423				gfx_FlipSpriteY(character0Moving1, player1CharacterMoving1Flipped);
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character0Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  424				gfx_FlipSpriteY(character0Moving2, player1CharacterMoving2Flipped);
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character0Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  425				gfx_FlipSpriteY(character0Jumping, player1CharacterJumpingFlipped);
	LD	BC,(_player1CharacterJumpingFlipped)
	PUSH	BC
	LD	BC,_character0Jumping_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  426				player1MoveSpeed = 4;
	LD	BC,4
	LD	(_player1MoveSpeed),BC
;  427				player1FallSpeed = 4;
	LD	(_player1FallSpeed),BC
;  428				player1JumpSpeed = 8;
	LD	BC,8
	LD	(_player1JumpSpeed),BC
;  429				player1JumpHeight = 10;
	LD	BC,10
	LD	(_player1JumpHeight),BC
;  430				break;
	JR	L_95
;  431			case 1:
L_91:
;  432				player1Character = character1;
	LD	BC,_character1_data
	LD	(_player1Character),BC
;  433				player1CharacterMoving1 = character1Moving1;
	LD	BC,_character1Moving1_data
	LD	(_player1CharacterMoving1),BC
;  434				player1CharacterMoving2 = character1Moving2;
	LD	BC,_character1Moving2_data
	LD	(_player1CharacterMoving2),BC
;  435				player1CharacterJumping = character1Jumping;
	LD	BC,_character1Jumping_data
	LD	(_player1CharacterJumping),BC
;  436				gfx_FlipSpriteY(character1, player1CharacterFlipped);
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  437				gfx_FlipSpriteY(character1Moving1, player1CharacterMoving1Flipped);
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character1Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  438				gfx_FlipSpriteY(character1Moving2, player1CharacterMoving2Flipped);
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character1Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  439				gfx_FlipSpriteY(character1Jumping, player1CharacterJumpingFlipped);
	LD	BC,(_player1CharacterJumpingFlipped)
	PUSH	BC
	LD	BC,_character1Jumping_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  440				player1MoveSpeed = 8;
	LD	BC,8
	LD	(_player1MoveSpeed),BC
;  441				player1FallSpeed = 4;
	LD	BC,4
	LD	(_player1FallSpeed),BC
;  442				player1JumpSpeed = 4;
	LD	(_player1JumpSpeed),BC
;  443				player1JumpHeight = 12;
	LD	BC,12
	LD	(_player1JumpHeight),BC
;  444				break;
;  445		}
L_95:
;  446		switch(player2CharacterSelection)
	LD	HL,(_player2CharacterSelection)
	CALL	__case8
L__45:
	DW	2
	DB	0
	DW24	L_93	

	DB	1
	DW24	L_94	

	DW24	L_96	

;  447		{
;  448			case 0:
L_93:
;  449				player2Character = character0;
	LD	BC,_character0_data
	LD	(_player2Character),BC
;  450				player2CharacterMoving1 = character0Moving1;
	LD	BC,_character0Moving1_data
	LD	(_player2CharacterMoving1),BC
;  451				player2CharacterMoving2 = character0Moving2;
	LD	BC,_character0Moving2_data
	LD	(_player2CharacterMoving2),BC
;  452				player2CharacterJumping = character0Jumping;
	LD	BC,_character0Jumping_data
	LD	(_player2CharacterJumping),BC
;  453				gfx_FlipSpriteY(character0, player2CharacterFlipped);
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  454				gfx_FlipSpriteY(character0Moving1, player2CharacterMoving1Flipped);
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character0Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  455				gfx_FlipSpriteY(character0Moving2, player2CharacterMoving2Flipped);
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character0Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  456				gfx_FlipSpriteY(character0Jumping, player2CharacterJumpingFlipped);
	LD	BC,(_player2CharacterJumpingFlipped)
	PUSH	BC
	LD	BC,_character0Jumping_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  457				player2MoveSpeed = 4;
	LD	BC,4
	LD	(_player2MoveSpeed),BC
;  458				player2FallSpeed = 4;
	LD	(_player2FallSpeed),BC
;  459				player2JumpSpeed = 8;
	LD	BC,8
	LD	(_player2JumpSpeed),BC
;  460				player2JumpHeight = 10;
	LD	BC,10
	LD	(_player2JumpHeight),BC
;  461				break;
	JR	L_96
;  462			case 1:
L_94:
;  463				player2Character = character1;
	LD	BC,_character1_data
	LD	(_player2Character),BC
;  464				player2CharacterMoving1 = character1Moving1;
	LD	BC,_character1Moving1_data
	LD	(_player2CharacterMoving1),BC
;  465				player2CharacterMoving2 = character1Moving2;
	LD	BC,_character1Moving2_data
	LD	(_player2CharacterMoving2),BC
;  466				player2CharacterJumping = character1Jumping;
	LD	BC,_character1Jumping_data
	LD	(_player2CharacterJumping),BC
;  467				gfx_FlipSpriteY(character1, player2CharacterFlipped);
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  468				gfx_FlipSpriteY(character1Moving1, player2CharacterMoving1Flipped);
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character1Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  469				gfx_FlipSpriteY(character1Moving2, player2CharacterMoving2Flipped);
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character1Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  470				gfx_FlipSpriteY(character1Jumping, player2CharacterJumpingFlipped);
	LD	BC,(_player2CharacterJumpingFlipped)
	PUSH	BC
	LD	BC,_character1Jumping_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  471				player2MoveSpeed = 8;
	LD	BC,8
	LD	(_player2MoveSpeed),BC
;  472				player2FallSpeed = 4;
	LD	BC,4
	LD	(_player2FallSpeed),BC
;  473				player2JumpSpeed = 4;
	LD	(_player2JumpSpeed),BC
;  474				player2JumpHeight = 12;
	LD	BC,12
	LD	(_player2JumpHeight),BC
;  475				break;
;  476		}
L_96:
;  477		
;  478		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  479		gfx_TransparentSprite(counter3, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  480		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  481		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  482		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  483		gfx_TransparentSprite(counter2, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  484		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  485		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  486		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  487		gfx_TransparentSprite(counter1, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  488		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  489		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  490		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  491		gfx_TransparentSprite(counterFight, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counterFight_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  492		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  493		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  494		
;  495		goto fight;
L_97:
;  496		
;  497		//---------------------------------------------------------------
;  498		
;  499		//fight
;  500		fight:
;  501		
;  502		gfx_TransparentSprite(statusUi, 128, 208);
	LD	BC,208
	PUSH	BC
	LD	BC,128
	PUSH	BC
	LD	BC,_statusUi_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  503		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  504		gfx_SetTextBGColor(gfx_GetPixel(150, 224));
	LD	BC,224
	PUSH	BC
	LD	BC,150
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  505		
;  506		while(fighting)
	JR	L_229
L_230:
;  507		{
;  508			gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  509			
;  510			key = os_GetCSC();
	CALL	_os_GetCSC
;  511			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_104
;  512			{
;  513				if(player1Grounded == 1)
	LD	BC,1
	LD	HL,(_player1Grounded)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_104
;  514				{
;  515					player1Jumping = player1JumpHeight;
	LD	BC,(_player1JumpHeight)
	LD	(_player1Jumping),BC
;  516				}
;  517			}
;  518			if(key == sk_Alpha)
;  519			{
;  520				//shoot
;  521			}
L_104:
;  522			if(key == sk_Clear)
	LD	A,(_key)
	CP	A,15
	JR	Z,L_102
;  523			{
;  524				goto pause;
;  525			}
;  526			
;  527			kb_Scan();
	CALL	_kb_Scan
;  528	        key = kb_Data[7];
	LD	A,(16056350)
	LD	(_key),A
;  529			if(key & kb_Up)
;  530			{
;  531				
;  532			}
;  533			if(key & kb_Down)
	AND	A,1
	JR	Z,L_109
;  534			{
;  535				player1Jumping = 0;
	LD	BC,0
	LD	(_player1Jumping),BC
;  536				if(player1Grounded == 1)
	LD	HL,(_player1Grounded)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_120
;  537				{
;  538					player1ShieldActive = 1;
	LD	(_player1ShieldActive),BC
;  539				}
;  540			}
;  541			else
	JR	L_120
L_109:
;  542			{
;  543				player1ShieldActive = 0;
	LD	BC,0
	LD	(_player1ShieldActive),BC
;  544			}
L_120:
;  545			if(key & kb_Left)
	LD	A,(_key)
	AND	A,2
	JR	Z,L_130
;  546			{
;  547				player1X -= player1MoveSpeed;
	LD	HL,(_player1X)
	LD	BC,(_player1MoveSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1X),HL
;  548				if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_113
;  549				{
;  550					player1Flipped = 1;
	LD	BC,1
	LD	(_player1Flipped),BC
;  551					player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  552					player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
;  553				}
L_113:
;  554				player1MoveAnimationCount++;
	LD	BC,(_player1MoveAnimationCount)
	INC	BC
	LD	(_player1MoveAnimationCount),BC
;  555				if(player1MoveAnimationCount == 3)
	LD	HL,(_player1MoveAnimationCount)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_130
;  556				{
;  557					if(player1MoveAnimation != 3)
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_116
;  558					{
;  559						player1MoveAnimation++;
	LD	BC,(_player1MoveAnimation)
	INC	BC
	LD	(_player1MoveAnimation),BC
;  560					}
;  561					else
	JR	L_117
L_116:
;  562					{
;  563						player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  564					}
L_117:
;  565					player1MoveAnimationCount = 0;
	LD	BC,0
	LD	(_player1MoveAnimationCount),BC
;  566				}
;  567			}
L_130:
;  568			if(key & kb_Right)
	LD	A,(_key)
	AND	A,4
	JR	Z,L_157
;  569			{
;  570				player1X += player1MoveSpeed;
	LD	BC,(_player1MoveSpeed)
	LD	HL,(_player1X)
	ADD	HL,BC
	LD	(_player1X),HL
;  571				if(player1Flipped == 1)
	LD	HL,(_player1Flipped)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_123
;  572				{
;  573					player1Flipped = 0;
	LD	BC,0
	LD	(_player1Flipped),BC
;  574					player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
;  575					player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
;  576				}
L_123:
;  577				player1MoveAnimationCount++;
	LD	BC,(_player1MoveAnimationCount)
	INC	BC
	LD	(_player1MoveAnimationCount),BC
;  578				if(player1MoveAnimationCount == 3)
	LD	HL,(_player1MoveAnimationCount)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_157
;  579				{
;  580					if(player1MoveAnimation != 3)
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_126
;  581					{
;  582						player1MoveAnimation++;
	LD	BC,(_player1MoveAnimation)
	INC	BC
	LD	(_player1MoveAnimation),BC
;  583					}
;  584					else
	JR	L_127
L_126:
;  585					{
;  586						player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  587					}
L_127:
;  588					player1MoveAnimationCount = 0;
	LD	BC,0
	LD	(_player1MoveAnimationCount),BC
;  589				}
;  590			}
L_157:
;  591			
;  592			for(player = 1; player < 3; ++player)
	LD	BC,1
	LD	(_player),BC
	JR	L_156
L_154:
;  593			{
;  594				switch(player)
	LD	HL,(_player)
	CALL	__case8
L__59:
	DW	2
	DB	1
	DW24	L_131	

	DB	2
	DW24	L_132	

	DW24	L_150	

;  595				{
;  596					case 1:
L_131:
;  597						playerX = player1X;
	LD	BC,(_player1X)
	LD	(_playerX),BC
;  598						playerY = player1Y;
	LD	BC,(_player1Y)
	LD	(_playerY),BC
;  599						break;
	JR	L_150
;  600					case 2:
L_132:
;  601						playerX = player2X;
	LD	BC,(_player2X)
	LD	(_playerX),BC
;  602						playerY = player2Y;
	LD	BC,(_player2Y)
	LD	(_playerY),BC
;  603						break;
;  604				}
L_150:
;  605				
;  606				if(map == 0)
	LD	HL,(_map)
	CALL	__icmpzero
	JR	NZ,L_153
;  607				{
;  608					if(playerX >= 24 && playerX <= 264 && playerY == 132)
	LD	BC,24
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	JP	M,L_148
	LD	BC,(_playerX)
	LD	HL,264
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_148
	LD	BC,132
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_148
;  609					{
;  610						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  611					}
;  612					else if(playerX >= 72 && playerX <= 216 && playerY == 64)
	JR	L_153
L_148:
	LD	BC,72
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_146
	LD	BC,(_playerX)
	LD	HL,216
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_146
	LD	BC,64
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_146
;  613					{
;  614						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  615					}
;  616					else if(playerX >= -8 && playerX <= 40 && playerY == 40)
	JR	L_153
L_146:
	LD	BC,16777208
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_144
	LD	BC,(_playerX)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_144
	LD	BC,40
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_144
;  617					{
;  618						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  619					}
;  620					else if(playerX >= 248 && playerX <= 296 && playerY == 40)
	JR	L_153
L_144:
	LD	BC,248
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_142
	LD	BC,(_playerX)
	LD	HL,296
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_142
	LD	BC,40
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_142
;  621					{
;  622						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  623					}
;  624					else
	JR	L_153
L_142:
;  625					{
;  626						playerGrounded = 0;
	LD	BC,0
	LD	(_playerGrounded),BC
;  627					}
;  628				}
L_153:
;  629				
;  630				switch(player)
	LD	HL,(_player)
	CALL	__case8
L__73:
	DW	2
	DB	1
	DW24	L_151	

	DB	2
	DW24	L_152	

	DW24	L_155	

;  631				{
;  632					case 1:
L_151:
;  633						player1Grounded = playerGrounded;
	LD	BC,(_playerGrounded)
	LD	(_player1Grounded),BC
;  634						break;
	JR	L_155
;  635					case 2:
L_152:
;  636						player2Grounded = playerGrounded;
	LD	BC,(_playerGrounded)
	LD	(_player2Grounded),BC
;  637						break;
;  638				}
;  639			}
L_155:
	LD	BC,(_player)
	INC	BC
	LD	(_player),BC
L_156:
	LD	BC,3
	LD	HL,(_player)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_154
;  640			
;  641			if(player1Jumping > 0)
	LD	BC,(_player1Jumping)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_161
;  642			{
;  643				player1Jumping--;
	LD	BC,(_player1Jumping)
	DEC	BC
	LD	(_player1Jumping),BC
;  644				player1Y -= player1JumpSpeed;
	LD	HL,(_player1Y)
	LD	BC,(_player1JumpSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Y),HL
;  645			}
;  646			else if(player1Grounded == 0)
	JR	L_167
L_161:
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_167
;  647			{
;  648				player1Y += player1FallSpeed;
	LD	BC,(_player1FallSpeed)
	LD	HL,(_player1Y)
	ADD	HL,BC
	LD	(_player1Y),HL
;  649			}
L_167:
;  650			
;  651			if(player2Jumping > 0)
	LD	BC,(_player2Jumping)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_166
;  652			{
;  653				player2Jumping--;
	LD	BC,(_player2Jumping)
	DEC	BC
	LD	(_player2Jumping),BC
;  654				player2Y -= player2JumpSpeed;
	LD	HL,(_player2Y)
	LD	BC,(_player2JumpSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Y),HL
;  655			}
;  656			else if(player2Grounded == 0)
	JR	L_197
L_166:
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_197
;  657			{
;  658				player2Y += player2FallSpeed;
	LD	BC,(_player2FallSpeed)
	LD	HL,(_player2Y)
	ADD	HL,BC
	LD	(_player2Y),HL
;  659			}
L_197:
;  660			
;  661			if(player1Flipped == 0 && player1Grounded == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	Z,L__80
	LD	A,1
	JR	L__81
L__80:
	XOR	A,A
L__81:
	LD	(IX+-1),A
	OR	A,A
	JR	NZ,L_196
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_196
;  662			{
;  663				gfx_TransparentSprite(player1CharacterJumping, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterJumping)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  664				player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  665				player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
;  666			}
;  667			else if(player1Flipped == 1 && player1Grounded == 0)
	JR	L_227
L_196:
	LD	BC,1
	LD	HL,(_player1Flipped)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__85
	LD	A,1
	JR	L__86
L__85:
	XOR	A,A
L__86:
	LD	(IX+-2),A
	OR	A,A
	JR	NZ,L_194
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_194
;  668			{
;  669				gfx_TransparentSprite(player1CharacterJumpingFlipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterJumpingFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  670				player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  671				player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
;  672			}
;  673			else if(player1Flipped == 0 && player1MoveAnimation == 0)
	JR	L_227
L_194:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_192
	LD	HL,(_player1MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_192
;  674			{
;  675				gfx_TransparentSprite(player1Character, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1Character)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  676			}
;  677			else if(player1Flipped == 1 && player1MoveAnimation == 0)
	JR	L_227
L_192:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_190
	LD	HL,(_player1MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_190
;  678			{
;  679				gfx_TransparentSprite(player1CharacterFlipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  680			}
;  681			else if(player1Flipped == 0 && player1MoveAnimation == 1)
	JR	L_227
L_190:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_188
	LD	BC,1
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_188
;  682			{
;  683				gfx_TransparentSprite(player1CharacterMoving1, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  684			}
;  685			else if(player1Flipped == 1 && player1MoveAnimation == 1)
	JR	L_227
L_188:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_186
	LD	BC,1
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_186
;  686			{
;  687				gfx_TransparentSprite(player1CharacterMoving1Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  688			}
;  689			else if(player1Flipped == 0 && player1MoveAnimation == 2)
	JR	L_227
L_186:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_184
	LD	BC,2
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_184
;  690			{
;  691				gfx_TransparentSprite(player1CharacterMoving2, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving2)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  692			}
;  693			else if(player1Flipped == 1 && player1MoveAnimation == 2)
	JR	L_227
L_184:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_182
	LD	BC,2
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_182
;  694			{
;  695				gfx_TransparentSprite(player1CharacterMoving2Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  696			}
;  697			else if(player1Flipped == 0 && player1MoveAnimation == 3)
	JR	L_227
L_182:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_180
	LD	BC,3
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_180
;  698			{
;  699				gfx_TransparentSprite(player1CharacterMoving1, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  700			}
;  701			else if(player1Flipped == 1 && player1MoveAnimation == 3)
	JR	L_227
L_180:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_227
	LD	BC,3
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_227
;  702			{
;  703				gfx_TransparentSprite(player1CharacterMoving1Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  704			}
L_227:
;  705			
;  706			
;  707			if(player2Flipped == 0 && player2Grounded == 0)
	LD	HL,(_player2Flipped)
	CALL	__icmpzero
	JR	Z,L__106
	LD	A,1
	JR	L__107
L__106:
	XOR	A,A
L__107:
	LD	(IX+-3),A
	OR	A,A
	JR	NZ,L_226
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_226
;  708			{
;  709				gfx_TransparentSprite(player2CharacterJumping, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterJumping)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  710				player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
;  711				player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
;  712			}
;  713			else if(player2Flipped == 1 && player2Grounded == 0)
	JR	L_228
L_226:
	LD	BC,1
	LD	HL,(_player2Flipped)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__111
	LD	A,1
	JR	L__112
L__111:
	XOR	A,A
L__112:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_224
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_224
;  714			{
;  715				gfx_TransparentSprite(player2CharacterJumpingFlipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterJumpingFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  716				player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
;  717				player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
;  718			}
;  719			else if(player2Flipped == 0 && player2MoveAnimation == 0)
	JR	L_228
L_224:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_222
	LD	HL,(_player2MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_222
;  720			{
;  721				gfx_TransparentSprite(player2Character, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2Character)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  722			}
;  723			else if(player2Flipped == 1 && player2MoveAnimation == 0)
	JR	L_228
L_222:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_220
	LD	HL,(_player2MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_220
;  724			{
;  725				gfx_TransparentSprite(player2CharacterFlipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  726			}
;  727			else if(player2Flipped == 0 && player2MoveAnimation == 1)
	JR	L_228
L_220:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_218
	LD	BC,1
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_218
;  728			{
;  729				gfx_TransparentSprite(player2CharacterMoving1, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  730			}
;  731			else if(player2Flipped == 1 && player2MoveAnimation == 1)
	JR	L_228
L_218:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_216
	LD	BC,1
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_216
;  732			{
;  733				gfx_TransparentSprite(player2CharacterMoving1Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  734			}
;  735			else if(player2Flipped == 0 && player2MoveAnimation == 2)
	JR	L_228
L_216:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_214
	LD	BC,2
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_214
;  736			{
;  737				gfx_TransparentSprite(player2CharacterMoving2, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving2)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  738			}
;  739			else if(player2Flipped == 1 && player2MoveAnimation == 2)
	JR	L_228
L_214:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_212
	LD	BC,2
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_212
;  740			{
;  741				gfx_TransparentSprite(player2CharacterMoving2Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  742			}
;  743			else if(player2Flipped == 0 && player2MoveAnimation == 3)
	JR	L_228
L_212:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_210
	LD	BC,3
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_210
;  744			{
;  745				gfx_TransparentSprite(player2CharacterMoving1, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  746			}
;  747			else if(player2Flipped == 1 && player2MoveAnimation == 3)
	JR	L_228
L_210:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_228
	LD	BC,3
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_228
;  748			{
;  749				gfx_TransparentSprite(player2CharacterMoving1Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  750			}
L_228:
;  751			
;  752			gfx_TransparentSprite(statusUi, 128, 208);
	LD	BC,208
	PUSH	BC
	LD	BC,128
	PUSH	BC
	LD	BC,_statusUi_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  753			gfx_SetTextXY(10, 10);
	LD	BC,10
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  754			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  755			gfx_PrintInt(player1X, 3);
	LD	BC,3
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
;  756			gfx_PrintString(" ");
	LD	BC,L__131
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  757			gfx_PrintInt(player1Y, 3);
	LD	BC,3
	PUSH	BC
	LD	BC,(_player1Y)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
;  758			
;  759			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  760		}
L_229:
	LD	HL,(_fighting)
	CALL	__icmpzero
	JR	NZ,L_230
;  761		
;  762		goto error;
	JR	L_32
L_102:
;  763		
;  764		//---------------------------------------------------------------
;  765		
;  766		//pause
;  767		pause:
;  768		
;  769		gfx_Tilemap(&tilemap, getXBlock(mapXBlock), getYBlock(mapYBlock));
	LD	BC,(_mapYBlock)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  770		gfx_SetColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  771		gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  772		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  773		gfx_SetTextBGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  774		gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  775		gfx_PrintStringXY("Pause menu", 80, 90);
	LD	BC,90
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,L__133
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  776		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  777		gfx_PrintStringXY("Press [clear] to continue...", 55, 125);
	LD	BC,125
	PUSH	BC
	LD	BC,55
	PUSH	BC
	LD	BC,L__134
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  778		gfx_PrintStringXY("Press [del] to give up...", 62, 145);
	LD	BC,145
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,L__135
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  779		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  780		
;  781		while(1)
L_237:
;  782		{
;  783			key = os_GetCSC();
	CALL	_os_GetCSC
;  784			if(key == sk_Clear)
	CP	A,15
	LD	(_key),A
	JR	Z,L_97
;  785			{
;  786				goto fight;
;  787			}
;  788			else if(key == sk_Del)
	LD	A,(_key)
	CP	A,56
	JR	NZ,L_237
;  789			{
;  790				goto gameOver;
;  791			}
;  792		}
;  793		
;  794		//---------------------------------------------------------------
;  795		
;  796		//gameOver
;  797		gameOver:
;  798		
;  799		gfx_Tilemap(&tilemap, getXBlock(4), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,4
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  800		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  801		gfx_SetTextBGColor(gfx_GetPixel(0, 0));
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  802		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  803		gfx_PrintStringXY("Press [2nd] to go to the main menu...", 15, 218);
	LD	BC,218
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,L__138
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  804		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  805		while(os_GetCSC() != sk_2nd);
L_240:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_240
;  806		goto mainMenu;
	JR	L_5
L_32:
;  807		
;  808		
;  809		//---------------------------------------------------------------
;  810		
;  811		//error
;  812		error:
;  813		
;  814		gfx_FillScreen(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  815		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  816		gfx_SetTextBGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  817		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  818		gfx_PrintStringXY("An error has occurred!", 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,L__140
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  819		gfx_PrintStringXY("Press [2nd] to go to the main menu...", 0, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,L__141
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  820		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  821		while(os_GetCSC() != sk_2nd);
L_243:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_243
;  822		goto mainMenu;
	JR	L_5
L_30:
;  823		
;  824		//---------------------------------------------------------------
;  825		
;  826		//quit game
;  827		quitGame:
;  828		
;  829		gfx_End();
	CALL	_gfx_End
	OR	A,A
;  830		return 0;
	SBC	HL,HL
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_gfx_PrintString                    IMPORT  -----   function
;_gfx_PrintInt                       IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_player2MoveAnimationCount          STATIC      3   variable
;_playerGrounded                     STATIC      3   variable
;_playerY                            STATIC      3   variable
;_playerX                            STATIC      3   variable
;_player                             STATIC      3   variable
;_player1MoveAnimationCount          STATIC      3   variable
;_kb_Scan                            IMPORT  -----   function
;_gfx_GetPixel                       IMPORT  -----   function
;_statusUi_data                      IMPORT   2050   variable
;_counterFight_data                  IMPORT   1538   variable
;_counter1_data                      IMPORT   1538   variable
;_counter2_data                      IMPORT   1538   variable
;_counter3_data                      IMPORT   1538   variable
;_player2JumpHeight                  STATIC      3   variable
;_player2JumpSpeed                   STATIC      3   variable
;_player2FallSpeed                   STATIC      3   variable
;_player2MoveSpeed                   STATIC      3   variable
;_player2CharacterSelection          STATIC      3   variable
;_character1Jumping_data             IMPORT   1538   variable
;_character1Moving2_data             IMPORT   1538   variable
;_character1Moving1_data             IMPORT   1538   variable
;_player1JumpHeight                  STATIC      3   variable
;_player1JumpSpeed                   STATIC      3   variable
;_player1FallSpeed                   STATIC      3   variable
;_player1MoveSpeed                   STATIC      3   variable
;_gfx_FlipSpriteY                    IMPORT  -----   function
;_character0Jumping_data             IMPORT   1538   variable
;_character0Moving2_data             IMPORT   1538   variable
;_character0Moving1_data             IMPORT   1538   variable
;_player2Y                           STATIC      3   variable
;_player2X                           STATIC      3   variable
;_player2IsAi                        STATIC      3   variable
;_player1Y                           STATIC      3   variable
;_player1X                           STATIC      3   variable
;_player2Lifes                       STATIC      3   variable
;_player2ShieldActive                STATIC      3   variable
;_player2Grounded                    STATIC      3   variable
;_player2Jumping                     STATIC      3   variable
;_player2MoveAnimation               STATIC      3   variable
;_player2Flipped                     STATIC      3   variable
;_player1Lifes                       STATIC      3   variable
;_player1ShieldActive                STATIC      3   variable
;_player1Grounded                    STATIC      3   variable
;_player1Jumping                     STATIC      3   variable
;_player1MoveAnimation               STATIC      3   variable
;_player1Flipped                     STATIC      3   variable
;_fighting                           STATIC      3   variable
;_player1CharacterSelection          STATIC      3   variable
;_character0_data                    IMPORT   1538   variable
;_character1_data                    IMPORT   1538   variable
;_characterHighlighter_data          IMPORT   3074   variable
;_gfx_FillRectangle                  IMPORT  -----   function
;_mapYBlock                          STATIC      3   variable
;_mapXBlock                          STATIC      3   variable
;_map                                STATIC      3   variable
;_mapHighlighter_data                IMPORT   1026   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_players                            STATIC      3   variable
;_key                                STATIC      1   variable
;_selecting                          STATIC      3   variable
;_selection                          STATIC      3   variable
;_os_GetCSC                          IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_delay                              IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_version                            STATIC      4   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_Tilemap                        IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetMonospaceFont               IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_global_palette                     IMPORT    272   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_tileset_tiles_data                 IMPORT    180   variable
;_tilemap                            STATIC     18   variable
;_tilemap_map                        IMPORT  unknown variable
;_player2CharacterJumpingFlipped      STATIC      3   variable
;_player2CharacterMoving2Flipped      STATIC      3   variable
;_player2CharacterMoving1Flipped      STATIC      3   variable
;_player2CharacterFlipped            STATIC      3   variable
;_player2CharacterJumping            STATIC      3   variable
;_player2CharacterMoving2            STATIC      3   variable
;_player2CharacterMoving1            STATIC      3   variable
;_player2Character                   STATIC      3   variable
;_player1CharacterJumpingFlipped      STATIC      3   variable
;_player1CharacterMoving2Flipped      STATIC      3   variable
;_player1CharacterMoving1Flipped      STATIC      3   variable
;_player1CharacterFlipped            STATIC      3   variable
;_player1CharacterJumping            STATIC      3   variable
;_player1CharacterMoving2            STATIC      3   variable
;_player1CharacterMoving1            STATIC      3   variable
;_player1Character                   STATIC      3   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;G_9                                   IX-4      1   variable
;G_8                                   IX-3      1   variable
;G_1                                   IX-2      1   variable
;G_0                                   IX-1      1   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__2:
	DB	"Press [2nd] to start..."
	DB	0
L__11:
	DB	"Singleplayer"
	DB	0
L__13:
	DB	"Quit game"
	DB	0
L__14:
	DB	"Star it on GitHub!"
	DB	0
L__17:
	DB	"Select a map:"
	DB	0
L__28:
	DB	"Select a character:"
	DB	0
L__131:
	DB	" "
	DB	0
L__133:
	DB	"Pause menu"
	DB	0
L__134:
	DB	"Press [clear] to continue..."
	DB	0
L__135:
	DB	"Press [del] to give up..."
	DB	0
L__138:
	DB	"Press [2nd] to go to the main menu..."
	DB	0
L__140:
	DB	"An error has occurred!"
	DB	0
L__141:
	DB	"Press [2nd] to go to the main menu..."
	DB	0
	XREF _tilemap_map:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_SetMonospaceFont:ROM
	XREF _gfx_FlipSpriteY:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintString:ROM
	XREF _gfx_PrintInt:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_GetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _statusUi_data:ROM
	XREF _mapHighlighter_data:ROM
	XREF _counterFight_data:ROM
	XREF _counter3_data:ROM
	XREF _counter2_data:ROM
	XREF _counter1_data:ROM
	XREF _characterHighlighter_data:ROM
	XREF _character1Moving2_data:ROM
	XREF _character1Moving1_data:ROM
	XREF _character1Jumping_data:ROM
	XREF _character1_data:ROM
	XREF _character0Moving2_data:ROM
	XREF _character0Moving1_data:ROM
	XREF _character0Jumping_data:ROM
	XREF _character0_data:ROM
	XREF _tileset_tiles_data:ROM
	XREF _global_palette:ROM
	XREF _os_GetCSC:ROM
	XREF _delay:ROM
	XREF _malloc:ROM
	XREF __imuls:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __imul_b:ROM
	XDEF _main
	XDEF _getYBlock
	XDEF _getXBlock
	XDEF _tilemap
	XDEF _player2CharacterJumpingFlipped
	XDEF _player2CharacterMoving2Flipped
	XDEF _player2CharacterMoving1Flipped
	XDEF _player2CharacterFlipped
	XDEF _player2CharacterJumping
	XDEF _player2CharacterMoving2
	XDEF _player2CharacterMoving1
	XDEF _player2Character
	XDEF _player1CharacterJumpingFlipped
	XDEF _player1CharacterMoving2Flipped
	XDEF _player1CharacterMoving1Flipped
	XDEF _player1CharacterFlipped
	XDEF _player1CharacterJumping
	XDEF _player1CharacterMoving2
	XDEF _player1CharacterMoving1
	XDEF _player1Character
	XDEF _key
	XDEF _player2Lifes
	XDEF _player2ShieldActive
	XDEF _player2Grounded
	XDEF _player2Jumping
	XDEF _player2MoveAnimationCount
	XDEF _player2MoveAnimation
	XDEF _player2JumpHeight
	XDEF _player2JumpSpeed
	XDEF _player2FallSpeed
	XDEF _player2MoveSpeed
	XDEF _player2Flipped
	XDEF _player2Y
	XDEF _player2X
	XDEF _player2CharacterSelection
	XDEF _player2IsAi
	XDEF _player1Lifes
	XDEF _player1ShieldActive
	XDEF _player1Grounded
	XDEF _player1Jumping
	XDEF _player1MoveAnimationCount
	XDEF _player1MoveAnimation
	XDEF _player1JumpHeight
	XDEF _player1JumpSpeed
	XDEF _player1FallSpeed
	XDEF _player1MoveSpeed
	XDEF _player1Flipped
	XDEF _player1Y
	XDEF _player1X
	XDEF _player1CharacterSelection
	XDEF _playerGrounded
	XDEF _playerY
	XDEF _playerX
	XDEF _player
	XDEF _fighting
	XDEF _mapYBlock
	XDEF _mapXBlock
	XDEF _map
	XDEF _players
	XDEF _selecting
	XDEF _selection
	XDEF _version
	END
