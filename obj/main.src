; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_version:
	DB	49
	DB	46
	DB	48
	DB	0
_testMode:
	DW	0
	DB	0
	SEGMENT BSS
_selection:
	DS	3
_selecting:
	DS	3
_players:
	DS	3
_map:
	DS	3
_mapAnimation:
	DS	3
_mapAnimationCount:
	DS	3
_mapAnimationSpeed:
	DS	3
_mapAnimationState:
	DS	3
_mapXBlock1:
	DS	3
_mapYBlock1:
	DS	3
_mapXBlock2:
	DS	3
_mapYBlock2:
	DS	3
_mapXBlock3:
	DS	3
_mapYBlock3:
	DS	3
_character0MoveSpeed:
	DS	3
_character0FallSpeed:
	DS	3
_character0JumpSpeed:
	DS	3
_character0JumpHeight:
	DS	3
_character0WeaponSpeed:
	DS	3
_character0WeaponKnockback:
	DS	3
_character0WeaponKnockbackStrength:
	DS	3
_character1MoveSpeed:
	DS	3
_character1FallSpeed:
	DS	3
_character1JumpSpeed:
	DS	3
_character1JumpHeight:
	DS	3
_character1WeaponSpeed:
	DS	3
_character1WeaponKnockback:
	DS	3
_character1WeaponKnockbackStrength:
	DS	3
_player:
	DS	3
_playerX:
	DS	3
_playerY:
	DS	3
_playerGrounded:
	DS	3
_playerDeath:
	DS	3
_player1SpawnX:
	DS	3
_player1SpawnY:
	DS	3
_player2SpawnX:
	DS	3
_player2SpawnY:
	DS	3
_player1CharacterSelection:
	DS	3
_player1X:
	DS	3
_player1Y:
	DS	3
_player1Flipped:
	DS	3
_player1MoveSpeed:
	DS	3
_player1FallSpeed:
	DS	3
_player1JumpSpeed:
	DS	3
_player1JumpHeight:
	DS	3
_player1MoveAnimation:
	DS	3
_player1MoveAnimationCount:
	DS	3
_player1Jumping:
	DS	3
_player1Grounded:
	DS	3
_player1ShieldActive:
	DS	3
_player1XKnockback:
	DS	3
_player1Lifes:
	DS	3
_player1WeaponSpeed:
	DS	3
_player1WeaponKnockback:
	DS	3
_player1WeaponKnockbackStrength:
	DS	3
_player1Weapon1:
	DS	3
_player1Weapon1X:
	DS	3
_player1Weapon1Y:
	DS	3
_player1Weapon1Flipped:
	DS	3
_player1Weapon2:
	DS	3
_player1Weapon2X:
	DS	3
_player1Weapon2Y:
	DS	3
_player1Weapon2Flipped:
	DS	3
_player1Weapon3:
	DS	3
_player1Weapon3X:
	DS	3
_player1Weapon3Y:
	DS	3
_player1Weapon3Flipped:
	DS	3
_player2IsAi:
	DS	3
_player2CharacterSelection:
	DS	3
_player2X:
	DS	3
_player2Y:
	DS	3
_player2Flipped:
	DS	3
_player2MoveSpeed:
	DS	3
_player2FallSpeed:
	DS	3
_player2JumpSpeed:
	DS	3
_player2JumpHeight:
	DS	3
_player2MoveAnimation:
	DS	3
_player2MoveAnimationCount:
	DS	3
_player2Jumping:
	DS	3
_player2Grounded:
	DS	3
_player2ShieldActive:
	DS	3
_player2XKnockback:
	DS	3
_player2Lifes:
	DS	3
_player2WeaponSpeed:
	DS	3
_player2WeaponKnockback:
	DS	3
_player2WeaponKnockbackStrength:
	DS	3
_player2Weapon1:
	DS	3
_player2Weapon1X:
	DS	3
_player2Weapon1Y:
	DS	3
_player2Weapon1Flipped:
	DS	3
_player2Weapon2:
	DS	3
_player2Weapon2X:
	DS	3
_player2Weapon2Y:
	DS	3
_player2Weapon2Flipped:
	DS	3
_player2Weapon3:
	DS	3
_player2Weapon3X:
	DS	3
_player2Weapon3Y:
	DS	3
_player2Weapon3Flipped:
	DS	3
_key:
	DS	1
_player1Character:
	DS	3
_player1CharacterMoving1:
	DS	3
_player1CharacterMoving2:
	DS	3
_player1CharacterNotGrounded:
	DS	3
_player1CharacterFlipped:
	DS	3
_player1CharacterMoving1Flipped:
	DS	3
_player1CharacterMoving2Flipped:
	DS	3
_player1CharacterNotGroundedFlipped:
	DS	3
_player1Weapon:
	DS	3
_player1WeaponFlipped:
	DS	3
_player2Character:
	DS	3
_player2CharacterMoving1:
	DS	3
_player2CharacterMoving2:
	DS	3
_player2CharacterNotGrounded:
	DS	3
_player2CharacterFlipped:
	DS	3
_player2CharacterMoving1Flipped:
	DS	3
_player2CharacterMoving2Flipped:
	DS	3
_player2CharacterNotGroundedFlipped:
	DS	3
_player2Weapon:
	DS	3
_player2WeaponFlipped:
	DS	3
_tilemap:
	DS	18
;    1	#include <fileioc.h>
;    2	#include <fontlibc.h>
;    3	#include "gfx/gfx.h"
;    4	#include <graphx.h>
;    5	#include <keypadc.h>
;    6	#include <stdbool.h>
;    7	#include <stddef.h>
;    8	#include <stdint.h>
;    9	#include <stdio.h>
;   10	#include <stdlib.h>
;   11	#include <string.h>
;   12	#include <tice.h>
;   13	
;   14	extern unsigned char tilemap_map[];
;   15	
;   16	#define TILE_WIDTH          16
;   17	#define TILE_HEIGHT         16
;   18	
;   19	#define TILEMAP_WIDTH       160
;   20	#define TILEMAP_HEIGHT      120
;   21	
;   22	#define TILEMAP_DRAW_WIDTH  20
;   23	#define TILEMAP_DRAW_HEIGHT 15
;   24	
;   25	#define Y_OFFSET            0
;   26	#define X_OFFSET            0
;   27	
;   28	#define BLACK				1
;   29	#define GRAY				3
;   30	#define RED					gfx_red
;   31	#define TRANSPARENT			0
;   32	#define WHITE				2
;   33	
;   34	char version[] = "1.0";
;   35	int testMode = 0;
;   36	
;   37	int selection;
;   38	int selecting;
;   39	
;   40	int players;
;   41	int map;
;   42	int mapAnimation;
;   43	int mapAnimationCount;
;   44	int mapAnimationSpeed;
;   45	int mapAnimationState;
;   46	int mapXBlock1;
;   47	int mapYBlock1;
;   48	int mapXBlock2;
;   49	int mapYBlock2;
;   50	int mapXBlock3;
;   51	int mapYBlock3;
;   52	
;   53	int character0MoveSpeed;
;   54	int character0FallSpeed;
;   55	int character0JumpSpeed;
;   56	int character0JumpHeight;
;   57	
;   58	int character0WeaponSpeed;
;   59	int character0WeaponKnockback;
;   60	int character0WeaponKnockbackStrength;
;   61	
;   62	int character1MoveSpeed;
;   63	int character1FallSpeed;
;   64	int character1JumpSpeed;
;   65	int character1JumpHeight;
;   66	
;   67	int character1WeaponSpeed;
;   68	int character1WeaponKnockback;
;   69	int character1WeaponKnockbackStrength;
;   70	
;   71	int player;
;   72	int playerX;
;   73	int playerY;
;   74	int playerGrounded;
;   75	int playerDeath;
;   76	
;   77	int player1SpawnX;
;   78	int player1SpawnY;
;   79	int player2SpawnX;
;   80	int player2SpawnY;
;   81	
;   82	int player1CharacterSelection;
;   83	int player1X;
;   84	int player1Y;
;   85	int player1Flipped;
;   86	int player1MoveSpeed;
;   87	int player1FallSpeed;
;   88	int player1JumpSpeed;
;   89	int player1JumpHeight;
;   90	int player1MoveAnimation;
;   91	int player1MoveAnimationCount;
;   92	int player1Jumping;
;   93	int player1Grounded;
;   94	int player1ShieldActive;
;   95	int player1XKnockback;
;   96	int player1Lifes;
;   97	
;   98	int player1WeaponSpeed;
;   99	int player1WeaponKnockback;
;  100	int player1WeaponKnockbackStrength;
;  101	int player1Weapon1;
;  102	int player1Weapon1X;
;  103	int player1Weapon1Y;
;  104	int player1Weapon1Flipped;
;  105	int player1Weapon2;
;  106	int player1Weapon2X;
;  107	int player1Weapon2Y;
;  108	int player1Weapon2Flipped;
;  109	int player1Weapon3;
;  110	int player1Weapon3X;
;  111	int player1Weapon3Y;
;  112	int player1Weapon3Flipped;
;  113	
;  114	int player2IsAi;
;  115	int player2CharacterSelection;
;  116	int player2X;
;  117	int player2Y;
;  118	int player2Flipped;
;  119	int player2MoveSpeed;
;  120	int player2FallSpeed;
;  121	int player2JumpSpeed;
;  122	int player2JumpHeight;
;  123	int player2MoveAnimation;
;  124	int player2MoveAnimationCount;
;  125	int player2Jumping;
;  126	int player2Grounded;
;  127	int player2ShieldActive;
;  128	int player2XKnockback;
;  129	int player2Lifes;
;  130	
;  131	int player2WeaponSpeed;
;  132	int player2WeaponKnockback;
;  133	int player2WeaponKnockbackStrength;
;  134	int player2Weapon1;
;  135	int player2Weapon1X;
;  136	int player2Weapon1Y;
;  137	int player2Weapon1Flipped;
;  138	int player2Weapon2;
;  139	int player2Weapon2X;
;  140	int player2Weapon2Y;
;  141	int player2Weapon2Flipped;
;  142	int player2Weapon3;
;  143	int player2Weapon3X;
;  144	int player2Weapon3Y;
;  145	int player2Weapon3Flipped;
;  146	
;  147	sk_key_t key;
;  148	
;  149	gfx_sprite_t *player1Character;
;  150	gfx_sprite_t *player1CharacterMoving1;
;  151	gfx_sprite_t *player1CharacterMoving2;
;  152	gfx_sprite_t *player1CharacterNotGrounded;
;  153	gfx_sprite_t *player1CharacterFlipped;
;  154	gfx_sprite_t *player1CharacterMoving1Flipped;
;  155	gfx_sprite_t *player1CharacterMoving2Flipped;
;  156	gfx_sprite_t *player1CharacterNotGroundedFlipped;
;  157	
;  158	gfx_sprite_t *player1Weapon;
;  159	gfx_sprite_t *player1WeaponFlipped;
;  160	
;  161	gfx_sprite_t *player2Character;
;  162	gfx_sprite_t *player2CharacterMoving1;
;  163	gfx_sprite_t *player2CharacterMoving2;
;  164	gfx_sprite_t *player2CharacterNotGrounded;
;  165	gfx_sprite_t *player2CharacterFlipped;
;  166	gfx_sprite_t *player2CharacterMoving1Flipped;
;  167	gfx_sprite_t *player2CharacterMoving2Flipped;
;  168	gfx_sprite_t *player2CharacterNotGroundedFlipped;
;  169	
;  170	gfx_sprite_t *player2Weapon;
;  171	gfx_sprite_t *player2WeaponFlipped;
;  172	
;  173	gfx_tilemap_t tilemap;
	SEGMENT CODE
;  174	
;  175	int getXBlock(int xBlock)
;  176	{
_getXBlock:
	CALL	__frameset0
;  177		return TILE_WIDTH * TILEMAP_DRAW_WIDTH * xBlock;
	LD	BC,320
	LD	HL,(IX+6)
	CALL	__imuls
;  178	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getXBlock ***************************
;Name                         Addr/Register   Size   Type
;xBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  179	
;  180	int getYBlock(int yBlock)
;  181	{
_getYBlock:
	CALL	__frameset0
;  182		return TILE_HEIGHT * TILEMAP_DRAW_HEIGHT * yBlock;
	LD	HL,(IX+6)
	LD	A,240
	CALL	__imul_b
;  183	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getYBlock ***************************
;Name                         Addr/Register   Size   Type
;yBlock                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  184	
;  185	int main(void)
;  186	{
_main:
	LD	HL,-4
	CALL	__frameset
;  187		//initialization
;  188		player1Character = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  189		player1CharacterMoving1 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1Character),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  190		player1CharacterMoving2 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving1),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  191		player1CharacterNotGrounded = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving2),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  192		player1CharacterFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterNotGrounded),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  193		player1CharacterMoving1Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  194		player1CharacterMoving2Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving1Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  195		player1CharacterNotGroundedFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1CharacterMoving2Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  196		
;  197		player1Weapon = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player1CharacterNotGroundedFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  198		player1WeaponFlipped = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player1Weapon),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  199		
;  200		player2Character = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player1WeaponFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  201		player2CharacterMoving1 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2Character),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  202		player2CharacterMoving2 = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving1),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  203		player2CharacterNotGrounded = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving2),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  204		player2CharacterFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterNotGrounded),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  205		player2CharacterMoving1Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  206		player2CharacterMoving2Flipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving1Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  207		player2CharacterNotGroundedFlipped = gfx_MallocSprite(32, 48);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,48
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	(_player2CharacterMoving2Flipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  208		
;  209		player2Weapon = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player2CharacterNotGroundedFlipped),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
;  210		player2WeaponFlipped = gfx_MallocSprite(8, 8);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	(_player2Weapon),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(_player2WeaponFlipped),HL
;  211		
;  212		tilemap.map         = tilemap_map;
	LD	BC,_tilemap_map
	LD	(_tilemap),BC
;  213	    tilemap.tiles       = tileset_tiles;
	LD	BC,_tileset_tiles_data
	LD	(_tilemap+3),BC
;  214	    tilemap.type_width  = gfx_tile_16_pixel;
	LD	A,4
	LD	(_tilemap+10),A
;  215	    tilemap.type_height = gfx_tile_16_pixel;
	LD	(_tilemap+11),A
;  216	    tilemap.tile_height = TILE_HEIGHT;
	LD	A,16
	LD	(_tilemap+6),A
;  217	    tilemap.tile_width  = TILE_WIDTH;
	LD	(_tilemap+7),A
;  218	    tilemap.draw_height = TILEMAP_DRAW_HEIGHT;
	LD	A,15
	LD	(_tilemap+8),A
;  219	    tilemap.draw_width  = TILEMAP_DRAW_WIDTH;
	LD	A,20
	LD	(_tilemap+9),A
;  220	    tilemap.height      = TILEMAP_HEIGHT;
	LD	A,120
	LD	(_tilemap+12),A
;  221	    tilemap.width       = TILEMAP_WIDTH;
	LD	A,160
	LD	(_tilemap+13),A
;  222	    tilemap.y_loc       = Y_OFFSET;
	XOR	A,A
	LD	(_tilemap+14),A
;  223	    tilemap.x_loc       = X_OFFSET;
	LD	BC,0
	LD	(_tilemap+15),BC
;  224		
;  225		gfx_Begin();
	CALL	_gfx_Begin
;  226		
;  227		gfx_SetPalette(global_palette, sizeof_global_palette, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,272
	PUSH	BC
	LD	BC,_global_palette
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  228		gfx_SetTransparentColor(TRANSPARENT);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;  229	    gfx_SetColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  230		
;  231		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  232		
;  233		gfx_SetMonospaceFont(8);
	LD	BC,8
	PUSH	BC
	CALL	_gfx_SetMonospaceFont
	POP	BC
;  234		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  235	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  236		
;  237		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  238		gfx_PrintStringXY(version, 296, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,_version
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  239		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  240		
;  241		character0MoveSpeed = 4;
	LD	BC,4
	LD	(_character0MoveSpeed),BC
;  242		character0FallSpeed = 4;
	LD	(_character0FallSpeed),BC
;  243		character0JumpSpeed = 8;
	LD	BC,8
	LD	(_character0JumpSpeed),BC
;  244		character0JumpHeight = 10;
	LD	BC,10
	LD	(_character0JumpHeight),BC
;  245				
;  246		character0WeaponSpeed = 8;
	LD	BC,8
	LD	(_character0WeaponSpeed),BC
;  247		character0WeaponKnockback = 4;
	LD	BC,4
	LD	(_character0WeaponKnockback),BC
;  248		character0WeaponKnockbackStrength = 6;
	LD	BC,6
	LD	(_character0WeaponKnockbackStrength),BC
;  249		
;  250		character1MoveSpeed = 8;
	LD	BC,8
	LD	(_character1MoveSpeed),BC
;  251		character1FallSpeed = 4;
	LD	BC,4
	LD	(_character1FallSpeed),BC
;  252		character1JumpSpeed = 8;
	LD	BC,8
	LD	(_character1JumpSpeed),BC
;  253		character1JumpHeight = 15;
	LD	BC,15
	LD	(_character1JumpHeight),BC
;  254		
;  255		character1WeaponSpeed = 6;
	LD	BC,6
;  256		character1WeaponKnockback = 4;
;  257		character1WeaponKnockbackStrength = 4;
;  258		
;  259		delay(2000);
	LD	DE,2000
	PUSH	DE
	LD	(_character1WeaponSpeed),BC
	LD	BC,4
	LD	(_character1WeaponKnockback),BC
	LD	(_character1WeaponKnockbackStrength),BC
	CALL	_delay
	POP	BC
;  260		
;  261		//---------------------------------------------------------------
;  262		
;  263		//start screen
;  264		startScreen:
L_2:
;  265		
;  266		gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  267		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  268	    gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  269		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  270		gfx_PrintStringXY("Press [2nd] to start...", 78, 200);
	LD	BC,200
	PUSH	BC
	LD	BC,78
	PUSH	BC
	LD	BC,L__2
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  271		gfx_PrintStringXY(version, 296, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,296
	PUSH	BC
	LD	BC,_version
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  272		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  273		while(os_GetCSC() != sk_2nd);
L_4:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_4
;  274		
;  275		//---------------------------------------------------------------
;  276		
;  277		//main menu
;  278		mainMenu:
L_5:
;  279		
;  280		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  281		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  282		while(selecting)
	JR	L_25
L_26:
;  283		{
;  284			gfx_Tilemap(&tilemap, getXBlock(1), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,1
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  285			gfx_SetTextBGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  286			gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  287			
;  288			key = os_GetCSC();
	CALL	_os_GetCSC
;  289			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_17
;  290			{
;  291				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  292			}
;  293			else if(key == sk_Clear)
	JR	L_20
L_17:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_2
;  294			{
;  295				goto startScreen;
;  296			}
;  297			else if(key == sk_Up && selection != 0)
	LD	A,(_key)
	CP	A,4
	JR	NZ,L_13
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_13
;  298			{
;  299				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  300			}
;  301			else if(key == sk_Down && selection != 1)
	JR	L_20
L_13:
	LD	A,(_key)
	CP	A,1
	JR	NZ,L_20
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_20
;  302			{
;  303				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  304			}
L_20:
;  305			
;  306			if(selection == 0)
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_19
;  307			{
;  308				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  309			}
;  310			else
	JR	L_21
L_19:
;  311			{
;  312				gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  313			}
L_21:
;  314			gfx_PrintStringXY("Singleplayer", 112, 68);
	LD	BC,68
	PUSH	BC
	LD	BC,112
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  315			if(selection == 1)
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_23
;  316			{
;  317				gfx_SetTextFGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  318			}
;  319			else
	JR	L_24
L_23:
;  320			{
;  321				gfx_SetTextFGColor(BLACK);
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  322			}
L_24:
;  323			gfx_PrintStringXY("Quit game", 124, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,124
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  324			gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  325			gfx_PrintStringXY("Star it on GitHub!", 90, 220);
	LD	BC,220
	PUSH	BC
	LD	BC,90
	PUSH	BC
	LD	BC,L__14
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  326			
;  327			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  328		}
L_25:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_26
;  329		
;  330		switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__16:
	DW	2
	DB	0
	DW24	L_27	

	DB	1
	DW24	L_30	

	DW24	L_32	

;  331		{
;  332			case 0:
L_27:
;  333				players = 1;
	LD	BC,1
	LD	(_players),BC
;  334				goto mapSelector;
L_28:
;  335				break;
;  336			case 1:
;  337				goto quitGame;
;  338				break;
;  339		}
;  340		
;  341		goto error;
;  342		
;  343		//---------------------------------------------------------------
;  344		
;  345		//map selector
;  346		mapSelector:
;  347		
;  348		selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  349		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  350		while(selecting)
	JR	L_49
L_50:
;  351		{
;  352			gfx_Tilemap(&tilemap, getXBlock(2), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,2
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  353			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  354			gfx_SetTextBGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  355			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  356			gfx_PrintStringXY("Select a map:", 62, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,L__17
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  357			
;  358			key = os_GetCSC();
	CALL	_os_GetCSC
;  359			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_44
;  360			{
;  361				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  362			}
;  363			else if(key == sk_Clear)
	JR	L_47
L_44:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_5
;  364			{
;  365				goto mainMenu;
;  366			}
;  367			else if(key == sk_Left && selection != 0)
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_40
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_40
;  368			{
;  369				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  370			}
;  371			else if(key == sk_Right && selection != 1)
	JR	L_47
L_40:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_47
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_47
;  372			{
;  373				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  374			}
L_47:
;  375			
;  376			switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__24:
	DW	2
	DB	0
	DW24	L_45	

	DB	1
	DW24	L_46	

	DW24	L_48	

;  377			{
;  378				case 0:
L_45:
;  379					gfx_TransparentSprite(mapHighlighter, 32, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  380					break;
	JR	L_48
;  381				case 1:
L_46:
;  382					gfx_TransparentSprite(mapHighlighter, 96, 64);
	LD	BC,64
	PUSH	BC
	LD	BC,96
	PUSH	BC
	LD	BC,_mapHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  383					break;
;  384			}
L_48:
;  385			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  386		}
L_49:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_50
;  387		map = selection;
	LD	BC,(_selection)
	LD	(_map),BC
;  388		mapAnimation = 0;
	LD	BC,0
	LD	(_mapAnimation),BC
;  389		switch(map)
	LD	HL,(_map)
	CALL	__case8
L__26:
	DW	2
	DB	0
	DW24	L_52	

	DB	1
	DW24	L_53	

	DW24	L_54	

;  390		{
;  391			case 0:
L_52:
;  392				mapXBlock1 = 3;
	LD	BC,3
	LD	(_mapXBlock1),BC
;  393				mapYBlock1 = 0;
	LD	BC,0
	LD	(_mapYBlock1),BC
;  394				break;
	JR	L_54
;  395			case 1:
L_53:
;  396				mapAnimation = 2;
	LD	BC,2
	LD	(_mapAnimation),BC
;  397				mapAnimationSpeed = 15;
	LD	BC,15
	LD	(_mapAnimationSpeed),BC
;  398				mapXBlock1 = 4;
	LD	BC,4
	LD	(_mapXBlock1),BC
;  399				mapYBlock1 = 0;
	LD	BC,0
	LD	(_mapYBlock1),BC
;  400				mapXBlock2 = 5;
	LD	BC,5
	LD	(_mapXBlock2),BC
;  401				mapYBlock2 = 0;
	LD	BC,0
	LD	(_mapYBlock2),BC
;  402				mapXBlock3 = 6;
	LD	BC,6
	LD	(_mapXBlock3),BC
;  403				mapYBlock3 = 0;
	LD	BC,0
	LD	(_mapYBlock3),BC
;  404				break;
;  405		}
;  406		
;  407		goto characterSelector;
L_54:
;  408		
;  409		//---------------------------------------------------------------
;  410		
;  411		//character selector
;  412		characterSelector:
;  413		
;  414		selection = 0;
	LD	(_selection),BC
;  415		selecting = 1;
	LD	BC,1
	LD	(_selecting),BC
;  416		
;  417		while(selecting)
	JR	L_77
L_78:
;  418		{
;  419			gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  420			gfx_SetColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  421			gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  422			gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  423			gfx_SetTextBGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  424			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  425			gfx_PrintStringXY("Select a character:", 10, 76);
	LD	BC,76
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__27
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  426			gfx_TransparentSprite(characterHighlighter, 138, 100);
	LD	BC,100
	PUSH	BC
	LD	BC,138
	PUSH	BC
	LD	BC,_characterHighlighter_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  427			
;  428			key = os_GetCSC();
	CALL	_os_GetCSC
;  429			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_72
;  430			{
;  431				selecting = 0;
	LD	BC,0
	LD	(_selecting),BC
;  432			}
;  433			else if(key == sk_Clear)
	JR	L_75
L_72:
	LD	A,(_key)
	CP	A,15
	JR	Z,L_28
;  434			{
;  435				goto mapSelector;
;  436			}
;  437			else if(key == sk_Left && selection != 0)
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_68
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	Z,L_68
;  438			{
;  439				selection--;
	LD	BC,(_selection)
	DEC	BC
	LD	(_selection),BC
;  440			}
;  441			else if(key == sk_Left && selection == 0)
	JR	L_75
L_68:
	LD	A,(_key)
	CP	A,2
	JR	NZ,L_66
	LD	HL,(_selection)
	CALL	__icmpzero
	JR	NZ,L_66
;  442			{
;  443				selection = 1;
	LD	BC,1
	LD	(_selection),BC
;  444			}
;  445			else if(key == sk_Right && selection != 1)
	JR	L_75
L_66:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_64
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_64
;  446			{
;  447				selection++;
	LD	BC,(_selection)
	INC	BC
	LD	(_selection),BC
;  448			}
;  449			else if(key == sk_Right && selection == 1)
	JR	L_75
L_64:
	LD	A,(_key)
	CP	A,3
	JR	NZ,L_75
	LD	BC,1
	LD	HL,(_selection)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_75
;  450			{
;  451				selection = 0;
	LD	BC,0
	LD	(_selection),BC
;  452			}
L_75:
;  453			
;  454			switch(selection)
	LD	HL,(_selection)
	CALL	__case8
L__38:
	DW	2
	DB	0
	DW24	L_73	

	DB	1
	DW24	L_74	

	DW24	L_76	

;  455			{
;  456				case 0:
L_73:
;  457					gfx_TransparentSprite(character1, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  458					gfx_TransparentSprite(character0, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  459					gfx_TransparentSprite(character1, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  460					break;
	JR	L_76
;  461				case 1:
L_74:
;  462					gfx_TransparentSprite(character0, 77, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,77
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  463					gfx_TransparentSprite(character1, 146, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,146
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  464					gfx_TransparentSprite(character0, 215, 108);
	LD	BC,108
	PUSH	BC
	LD	BC,215
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  465					break;
;  466			}
L_76:
;  467			
;  468			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  469		}
L_77:
	LD	HL,(_selecting)
	CALL	__icmpzero
	JR	NZ,L_78
;  470		player1CharacterSelection = selection;
	LD	BC,(_selection)
	LD	(_player1CharacterSelection),BC
;  471		
;  472		goto prepareFight;
;  473		
;  474		//---------------------------------------------------------------
;  475		
;  476		//prepareFight
;  477		prepareFight:
;  478		
;  479		mapAnimationCount = 0;
	LD	BC,0
	LD	(_mapAnimationCount),BC
;  480		mapAnimationState = 0;
	LD	(_mapAnimationState),BC
;  481		
;  482		player1Flipped = 0;
	LD	(_player1Flipped),BC
;  483		player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
;  484		player1Jumping = 0;
	LD	(_player1Jumping),BC
;  485		player1Grounded = 1;
	LD	BC,1
	LD	(_player1Grounded),BC
;  486		player1ShieldActive = 0;
	LD	BC,0
	LD	(_player1ShieldActive),BC
;  487		player1Lifes = 3;
	LD	BC,3
	LD	(_player1Lifes),BC
;  488		player2Flipped = 1;
	LD	BC,1
	LD	(_player2Flipped),BC
;  489		player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
;  490		player2Jumping = 0;
	LD	(_player2Jumping),BC
;  491		player2Grounded = 1;
	LD	BC,1
	LD	(_player2Grounded),BC
;  492		player2ShieldActive = 0;
	LD	BC,0
	LD	(_player2ShieldActive),BC
;  493		player2Lifes = 3;
	LD	BC,3
	LD	(_player2Lifes),BC
;  494		if(players == 1)
	LD	HL,(_players)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_83
;  495		{
;  496			player2IsAi = 1;
	LD	(_player2IsAi),BC
;  497		}
;  498		else if(players == 2)
	JR	L_86
L_83:
	LD	BC,2
	LD	HL,(_players)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_86
;  499		{
;  500			player2IsAi = 0;
	LD	BC,0
	LD	(_player2IsAi),BC
;  501		}
L_86:
;  502		switch(map)
	LD	HL,(_map)
	CALL	__case8
L__42:
	DW	2
	DB	0
	DW24	L_84	

	DB	1
	DW24	L_85	

	DW24	L_87	

;  503		{
;  504			case 0:
L_84:
;  505				player1SpawnX = 80;
	LD	BC,80
	LD	(_player1SpawnX),BC
;  506				player1SpawnY = 132;
	LD	BC,132
	LD	(_player1SpawnY),BC
;  507				
;  508				player2SpawnX = 220;
	LD	BC,220
	LD	(_player2SpawnX),BC
;  509				player2SpawnY = 132;
	LD	BC,132
	LD	(_player2SpawnY),BC
;  510				break;
	JR	L_87
;  511			case 1:
L_85:
;  512				player1SpawnX = 32;
	LD	BC,32
	LD	(_player1SpawnX),BC
;  513				player1SpawnY = 96;
	LD	BC,96
	LD	(_player1SpawnY),BC
;  514				
;  515				player2SpawnX = 256;
	LD	BC,256
	LD	(_player2SpawnX),BC
;  516				player2SpawnY = 96;
	LD	BC,96
	LD	(_player2SpawnY),BC
;  517				break;
;  518		}
L_87:
;  519		player1X = player1SpawnX;
	LD	BC,(_player1SpawnX)
	LD	(_player1X),BC
;  520		player1Y = player1SpawnY;
	LD	BC,(_player1SpawnY)
	LD	(_player1Y),BC
;  521		player2X = player2SpawnX;
	LD	BC,(_player2SpawnX)
	LD	(_player2X),BC
;  522		player2Y = player2SpawnY;
	LD	BC,(_player2SpawnY)
	LD	(_player2Y),BC
;  523		
;  524		switch(player1CharacterSelection)
	LD	HL,(_player1CharacterSelection)
	CALL	__case8
L__43:
	DW	2
	DB	0
	DW24	L_88	

	DB	1
	DW24	L_89	

	DW24	L_92	

;  525		{
;  526			case 0:
L_88:
;  527				player1Character = character0;
	LD	BC,_character0_data
	LD	(_player1Character),BC
;  528				player1CharacterMoving1 = character0Moving1;
	LD	BC,_character0Moving1_data
	LD	(_player1CharacterMoving1),BC
;  529				player1CharacterMoving2 = character0Moving2;
	LD	BC,_character0Moving2_data
	LD	(_player1CharacterMoving2),BC
;  530				player1CharacterNotGrounded = character0NotGrounded;
	LD	BC,_character0NotGrounded_data
	LD	(_player1CharacterNotGrounded),BC
;  531				gfx_FlipSpriteY(character0, player1CharacterFlipped);
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  532				gfx_FlipSpriteY(character0Moving1, player1CharacterMoving1Flipped);
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character0Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  533				gfx_FlipSpriteY(character0Moving2, player1CharacterMoving2Flipped);
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character0Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  534				gfx_FlipSpriteY(character0NotGrounded, player1CharacterNotGroundedFlipped);
	LD	BC,(_player1CharacterNotGroundedFlipped)
	PUSH	BC
	LD	BC,_character0NotGrounded_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  535				
;  536				player1Weapon = character0Weapon;
	LD	BC,_character0Weapon_data
	LD	(_player1Weapon),BC
;  537				gfx_FlipSpriteY(character0Weapon, player1WeaponFlipped);
	LD	BC,(_player1WeaponFlipped)
	PUSH	BC
	LD	BC,_character0Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  538				
;  539				player1MoveSpeed = character0MoveSpeed;
	LD	BC,(_character0MoveSpeed)
	LD	(_player1MoveSpeed),BC
;  540				player1FallSpeed = character0FallSpeed;
	LD	BC,(_character0FallSpeed)
	LD	(_player1FallSpeed),BC
;  541				player1JumpSpeed = character0JumpSpeed;
	LD	BC,(_character0JumpSpeed)
	LD	(_player1JumpSpeed),BC
;  542				player1JumpHeight = character0JumpHeight;
	LD	BC,(_character0JumpHeight)
	LD	(_player1JumpHeight),BC
;  543				
;  544				player1WeaponSpeed = character0WeaponSpeed;
	LD	BC,(_character0WeaponSpeed)
	LD	(_player1WeaponSpeed),BC
;  545				player1WeaponKnockback = character0WeaponKnockback;
	LD	BC,(_character0WeaponKnockback)
	LD	(_player1WeaponKnockback),BC
;  546				player1WeaponKnockbackStrength = character0WeaponKnockbackStrength;
	LD	BC,(_character0WeaponKnockbackStrength)
	LD	(_player1WeaponKnockbackStrength),BC
;  547				break;
	JR	L_92
;  548			case 1:
L_89:
;  549				player1Character = character1;
	LD	BC,_character1_data
	LD	(_player1Character),BC
;  550				player1CharacterMoving1 = character1Moving1;
	LD	BC,_character1Moving1_data
	LD	(_player1CharacterMoving1),BC
;  551				player1CharacterMoving2 = character1Moving2;
	LD	BC,_character1Moving2_data
	LD	(_player1CharacterMoving2),BC
;  552				player1CharacterNotGrounded = character1NotGrounded;
	LD	BC,_character1NotGrounded_data
	LD	(_player1CharacterNotGrounded),BC
;  553				gfx_FlipSpriteY(character1, player1CharacterFlipped);
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  554				gfx_FlipSpriteY(character1Moving1, player1CharacterMoving1Flipped);
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character1Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  555				gfx_FlipSpriteY(character1Moving2, player1CharacterMoving2Flipped);
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character1Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  556				gfx_FlipSpriteY(character1NotGrounded, player1CharacterNotGroundedFlipped);
	LD	BC,(_player1CharacterNotGroundedFlipped)
	PUSH	BC
	LD	BC,_character1NotGrounded_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  557				
;  558				player1Weapon = character1Weapon;
	LD	BC,_character1Weapon_data
	LD	(_player1Weapon),BC
;  559				gfx_FlipSpriteY(character1Weapon, player1WeaponFlipped);
	LD	BC,(_player1WeaponFlipped)
	PUSH	BC
	LD	BC,_character1Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  560				
;  561				player1MoveSpeed = character1MoveSpeed;
	LD	BC,(_character1MoveSpeed)
	LD	(_player1MoveSpeed),BC
;  562				player1FallSpeed = character1FallSpeed;
	LD	BC,(_character1FallSpeed)
	LD	(_player1FallSpeed),BC
;  563				player1JumpSpeed = character1JumpSpeed;
	LD	BC,(_character1JumpSpeed)
	LD	(_player1JumpSpeed),BC
;  564				player1JumpHeight = character1JumpHeight;
	LD	BC,(_character1JumpHeight)
	LD	(_player1JumpHeight),BC
;  565				
;  566				player1WeaponSpeed = character1WeaponSpeed;
	LD	BC,(_character1WeaponSpeed)
	LD	(_player1WeaponSpeed),BC
;  567				player1WeaponKnockback = character1WeaponKnockback;
	LD	BC,(_character1WeaponKnockback)
	LD	(_player1WeaponKnockback),BC
;  568				player1WeaponKnockbackStrength = character1WeaponKnockbackStrength;
	LD	BC,(_character1WeaponKnockbackStrength)
	LD	(_player1WeaponKnockbackStrength),BC
;  569				break;
;  570		}
L_92:
;  571		switch(player2CharacterSelection)
	LD	HL,(_player2CharacterSelection)
	CALL	__case8
L__44:
	DW	2
	DB	0
	DW24	L_90	

	DB	1
	DW24	L_91	

	DW24	L_93	

;  572		{
;  573			case 0:
L_90:
;  574				player2Character = character0;
	LD	BC,_character0_data
	LD	(_player2Character),BC
;  575				player2CharacterMoving1 = character0Moving1;
	LD	BC,_character0Moving1_data
	LD	(_player2CharacterMoving1),BC
;  576				player2CharacterMoving2 = character0Moving2;
	LD	BC,_character0Moving2_data
	LD	(_player2CharacterMoving2),BC
;  577				player2CharacterNotGrounded = character0NotGrounded;
	LD	BC,_character0NotGrounded_data
	LD	(_player2CharacterNotGrounded),BC
;  578				gfx_FlipSpriteY(character0, player2CharacterFlipped);
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	LD	BC,_character0_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  579				gfx_FlipSpriteY(character0Moving1, player2CharacterMoving1Flipped);
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character0Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  580				gfx_FlipSpriteY(character0Moving2, player2CharacterMoving2Flipped);
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character0Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  581				gfx_FlipSpriteY(character0NotGrounded, player2CharacterNotGroundedFlipped);
	LD	BC,(_player2CharacterNotGroundedFlipped)
	PUSH	BC
	LD	BC,_character0NotGrounded_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  582				
;  583				player2Weapon = character0Weapon;
	LD	BC,_character0Weapon_data
	LD	(_player2Weapon),BC
;  584				gfx_FlipSpriteY(character0Weapon, player2WeaponFlipped);
	LD	BC,(_player2WeaponFlipped)
	PUSH	BC
	LD	BC,_character0Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  585				
;  586				player2MoveSpeed = character0MoveSpeed;
	LD	BC,(_character0MoveSpeed)
	LD	(_player2MoveSpeed),BC
;  587				player2FallSpeed = character0FallSpeed;
	LD	BC,(_character0FallSpeed)
	LD	(_player2FallSpeed),BC
;  588				player2JumpSpeed = character0JumpSpeed;
	LD	BC,(_character0JumpSpeed)
	LD	(_player2JumpSpeed),BC
;  589				player2JumpHeight = character0JumpHeight;
	LD	BC,(_character0JumpHeight)
	LD	(_player2JumpHeight),BC
;  590				
;  591				player2WeaponSpeed = character0WeaponSpeed;
	LD	BC,(_character0WeaponSpeed)
	LD	(_player2WeaponSpeed),BC
;  592				player2WeaponKnockback = character0WeaponKnockback;
	LD	BC,(_character0WeaponKnockback)
	LD	(_player2WeaponKnockback),BC
;  593				player2WeaponKnockbackStrength = character0WeaponKnockbackStrength;
	LD	BC,(_character0WeaponKnockbackStrength)
	LD	(_player2WeaponKnockbackStrength),BC
;  594				break;
	JR	L_93
;  595			case 1:
L_91:
;  596				player2Character = character1;
	LD	BC,_character1_data
	LD	(_player2Character),BC
;  597				player2CharacterMoving1 = character1Moving1;
	LD	BC,_character1Moving1_data
	LD	(_player2CharacterMoving1),BC
;  598				player2CharacterMoving2 = character1Moving2;
	LD	BC,_character1Moving2_data
	LD	(_player2CharacterMoving2),BC
;  599				player2CharacterNotGrounded = character1NotGrounded;
	LD	BC,_character1NotGrounded_data
	LD	(_player2CharacterNotGrounded),BC
;  600				gfx_FlipSpriteY(character1, player2CharacterFlipped);
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	LD	BC,_character1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  601				gfx_FlipSpriteY(character1Moving1, player2CharacterMoving1Flipped);
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	LD	BC,_character1Moving1_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  602				gfx_FlipSpriteY(character1Moving2, player2CharacterMoving2Flipped);
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	LD	BC,_character1Moving2_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  603				gfx_FlipSpriteY(character1NotGrounded, player2CharacterNotGroundedFlipped);
	LD	BC,(_player2CharacterNotGroundedFlipped)
	PUSH	BC
	LD	BC,_character1NotGrounded_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  604				
;  605				player2Weapon = character1Weapon;
	LD	BC,_character1Weapon_data
	LD	(_player2Weapon),BC
;  606				gfx_FlipSpriteY(character1Weapon, player2WeaponFlipped);
	LD	BC,(_player2WeaponFlipped)
	PUSH	BC
	LD	BC,_character1Weapon_data
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  607				
;  608				player2MoveSpeed = character1MoveSpeed;
	LD	BC,(_character1MoveSpeed)
	LD	(_player2MoveSpeed),BC
;  609				player2FallSpeed = character1FallSpeed;
	LD	BC,(_character1FallSpeed)
	LD	(_player2FallSpeed),BC
;  610				player2JumpSpeed = character1JumpSpeed;
	LD	BC,(_character1JumpSpeed)
	LD	(_player2JumpSpeed),BC
;  611				player2JumpHeight = character1JumpHeight;
	LD	BC,(_character1JumpHeight)
	LD	(_player2JumpHeight),BC
;  612				
;  613				player2WeaponSpeed = character1WeaponSpeed;
	LD	BC,(_character1WeaponSpeed)
	LD	(_player2WeaponSpeed),BC
;  614				player2WeaponKnockback = character1WeaponKnockback;
	LD	BC,(_character1WeaponKnockback)
	LD	(_player2WeaponKnockback),BC
;  615				player2WeaponKnockbackStrength = character1WeaponKnockbackStrength;
	LD	BC,(_character1WeaponKnockbackStrength)
	LD	(_player2WeaponKnockbackStrength),BC
;  616				break;
;  617		}
L_93:
;  618		
;  619		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  620		gfx_TransparentSprite(counter3, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter3_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  621		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  622		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  623		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  624		gfx_TransparentSprite(counter2, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter2_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  625		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  626		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  627		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  628		gfx_TransparentSprite(counter1, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counter1_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  629		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  630		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  631		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  632		gfx_TransparentSprite(counterFight, 136, 104);
	LD	BC,104
	PUSH	BC
	LD	BC,136
	PUSH	BC
	LD	BC,_counterFight_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  633		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  634		delay(1000);
	LD	BC,1000
	PUSH	BC
	CALL	_delay
	POP	BC
;  635		
;  636		goto fight;
L_94:
;  637		
;  638		//---------------------------------------------------------------
;  639		
;  640		//fight
;  641		fight:
;  642		
;  643		gfx_TransparentSprite(statusUi, 128, 208);
	LD	BC,208
	PUSH	BC
	LD	BC,128
	PUSH	BC
	LD	BC,_statusUi_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  644		gfx_SetTextFGColor(BLACK);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  645		gfx_SetTextBGColor(gfx_GetPixel(150, 224));
	LD	BC,224
	PUSH	BC
	LD	BC,150
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  646		
;  647		while(1)
L_455:
;  648		{
;  649			//fight - animate map
;  650			if(mapAnimation > 0)
	LD	BC,(_mapAnimation)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_101
;  651			{
;  652				mapAnimationCount++;
	LD	BC,(_mapAnimationCount)
	INC	BC
	LD	(_mapAnimationCount),BC
;  653			}
L_101:
;  654			
;  655			if(mapAnimationCount == mapAnimationSpeed)
	LD	BC,(_mapAnimationSpeed)
	LD	HL,(_mapAnimationCount)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_107
;  656			{
;  657				mapAnimationCount = 0;
	LD	BC,0
	LD	(_mapAnimationCount),BC
;  658				if(mapAnimationState < mapAnimation)
	LD	BC,(_mapAnimation)
	LD	HL,(_mapAnimationState)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_99
;  659				{
;  660					mapAnimationState++;
	LD	BC,(_mapAnimationState)
	INC	BC
	LD	(_mapAnimationState),BC
;  661				}
;  662				else
	JR	L_107
L_99:
;  663				{
;  664					mapAnimationState = 0;
	LD	BC,0
	LD	(_mapAnimationState),BC
;  665				}
;  666			}
L_107:
;  667			
;  668			//fight - draw map
;  669			if(mapAnimationState == 0)
	LD	HL,(_mapAnimationState)
	CALL	__icmpzero
	JR	NZ,L_106
;  670			{
;  671				gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  672			}
;  673			else if(mapAnimationState == 1)
	JR	L_108
L_106:
	LD	BC,1
	LD	HL,(_mapAnimationState)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_104
;  674			{
;  675				gfx_Tilemap(&tilemap, getXBlock(mapXBlock2), getYBlock(mapYBlock2));
	LD	BC,(_mapYBlock2)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock2)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  676			}
;  677			else if(mapAnimationState == 2)
	JR	L_108
L_104:
	LD	BC,2
	LD	HL,(_mapAnimationState)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_108
;  678			{
;  679				gfx_Tilemap(&tilemap, getXBlock(mapXBlock3), getYBlock(mapYBlock3));
	LD	BC,(_mapYBlock3)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock3)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;  680			}
L_108:
;  681			
;  682			//fight - get keys (player 1)
;  683			key = os_GetCSC();
	CALL	_os_GetCSC
;  684			if(key == sk_2nd)
	CP	A,54
	LD	(_key),A
	JR	NZ,L_126
;  685			{
;  686				if(player1Grounded == 1)
	LD	BC,1
	LD	HL,(_player1Grounded)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_126
;  687				{
;  688					player1Jumping = player1JumpHeight;
	LD	BC,(_player1JumpHeight)
	LD	(_player1Jumping),BC
;  689				}
;  690			}
L_126:
;  691			if(key == sk_Alpha)
	LD	A,(_key)
	CP	A,48
	JR	NZ,L_129
;  692			{
;  693				if(player1Weapon1 == 0)
	LD	HL,(_player1Weapon1)
	CALL	__icmpzero
	JR	NZ,L_124
;  694				{
;  695					player1Weapon1 = 1;
	LD	BC,1
	LD	(_player1Weapon1),BC
;  696					player1Weapon1Flipped = player1Flipped;
	LD	BC,(_player1Flipped)
	LD	(_player1Weapon1Flipped),BC
;  697					if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_112
;  698					{
;  699						player1Weapon1X = player1X + 26;
	LD	IY,(_player1X)
	LEA	BC,IY+26
	LD	(_player1Weapon1X),BC
;  700					}
;  701					else
	JR	L_113
L_112:
;  702					{
;  703						player1Weapon1X = player1X;
	LD	BC,(_player1X)
	LD	(_player1Weapon1X),BC
;  704					}
L_113:
;  705					player1Weapon1Y = player1Y + 17;
	LD	IY,(_player1Y)
	LEA	BC,IY+17
	LD	(_player1Weapon1Y),BC
;  706				}
;  707				else if(player1Weapon2 == 0)
	JR	L_129
L_124:
	LD	HL,(_player1Weapon2)
	CALL	__icmpzero
	JR	NZ,L_122
;  708				{
;  709					player1Weapon2 = 1;
	LD	BC,1
	LD	(_player1Weapon2),BC
;  710					player1Weapon2Flipped = player1Flipped;
	LD	BC,(_player1Flipped)
	LD	(_player1Weapon2Flipped),BC
;  711					if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_115
;  712					{
;  713						player1Weapon2X = player1X + 26;
	LD	IY,(_player1X)
	LEA	BC,IY+26
	LD	(_player1Weapon2X),BC
;  714					}
;  715					else
	JR	L_116
L_115:
;  716					{
;  717						player1Weapon2X = player1X;
	LD	BC,(_player1X)
	LD	(_player1Weapon2X),BC
;  718					}
L_116:
;  719					player1Weapon2Y = player1Y + 17;
	LD	IY,(_player1Y)
	LEA	BC,IY+17
	LD	(_player1Weapon2Y),BC
;  720				}
;  721				else if(player1Weapon3 == 0)
	JR	L_129
L_122:
	LD	HL,(_player1Weapon3)
	CALL	__icmpzero
	JR	NZ,L_129
;  722				{
;  723					player1Weapon3 = 1;
	LD	BC,1
	LD	(_player1Weapon3),BC
;  724					player1Weapon3Flipped = player1Flipped;
	LD	BC,(_player1Flipped)
	LD	(_player1Weapon3Flipped),BC
;  725					if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_118
;  726					{
;  727						player1Weapon3X = player1X + 26;
	LD	IY,(_player1X)
	LEA	BC,IY+26
	LD	(_player1Weapon3X),BC
;  728					}
;  729					else
	JR	L_119
L_118:
;  730					{
;  731						player1Weapon3X = player1X;
	LD	BC,(_player1X)
	LD	(_player1Weapon3X),BC
;  732					}
L_119:
;  733					player1Weapon3Y = player1Y + 17;
	LD	IY,(_player1Y)
	LEA	BC,IY+17
	LD	(_player1Weapon3Y),BC
;  734				}
;  735			}
L_129:
;  736			if(key == sk_Clear)
	LD	A,(_key)
	CP	A,15
	JR	Z,L_127
;  737			{
;  738				goto pause;
;  739			}
;  740			
;  741			kb_Scan();
	CALL	_kb_Scan
;  742	        key = kb_Data[7];
	LD	A,(16056350)
	LD	(_key),A
;  743			if(key & kb_Up)
	AND	A,8
	JR	Z,L_138
;  744			{
;  745				if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_138
;  746				{
;  747					player1Y -= 4;
	LD	IY,(_player1Y)
	LEA	BC,IY+-4
	LD	(_player1Y),BC
;  748				}
;  749			}
L_138:
;  750			if(key & kb_Down)
	LD	A,(_key)
	AND	A,1
	JR	Z,L_137
;  751			{
;  752				if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_134
;  753				{
;  754					player1Y += 4;
	LD	IY,(_player1Y)
	LEA	BC,IY+4
	LD	(_player1Y),BC
;  755				}
L_134:
;  756				player1Jumping = 0;
	LD	BC,0
	LD	(_player1Jumping),BC
;  757				if(player1Grounded == 1)
	LD	HL,(_player1Grounded)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_149
;  758				{
;  759					player1ShieldActive = 1;
	LD	(_player1ShieldActive),BC
;  760				}
;  761			}
;  762			else
	JR	L_149
L_137:
;  763			{
;  764				player1ShieldActive = 0;
	LD	BC,0
	LD	(_player1ShieldActive),BC
;  765			}
L_149:
;  766			if(key & kb_Left && player1ShieldActive == 0)
	LD	A,(_key)
	AND	A,2
	JR	Z,L_160
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_160
;  767			{
;  768				player1X -= player1MoveSpeed;
	LD	HL,(_player1X)
	LD	BC,(_player1MoveSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1X),HL
;  769				if(player1Flipped == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	NZ,L_142
;  770				{
;  771					player1Flipped = 1;
	LD	BC,1
	LD	(_player1Flipped),BC
;  772					player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  773					player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
;  774				}
L_142:
;  775				player1MoveAnimationCount++;
	LD	BC,(_player1MoveAnimationCount)
	INC	BC
	LD	(_player1MoveAnimationCount),BC
;  776				if(player1MoveAnimationCount == 3)
	LD	HL,(_player1MoveAnimationCount)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_160
;  777				{
;  778					if(player1MoveAnimation != 3)
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_145
;  779					{
;  780						player1MoveAnimation++;
	LD	BC,(_player1MoveAnimation)
	INC	BC
	LD	(_player1MoveAnimation),BC
;  781					}
;  782					else
	JR	L_146
L_145:
;  783					{
;  784						player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  785					}
L_146:
;  786					player1MoveAnimationCount = 0;
	LD	BC,0
	LD	(_player1MoveAnimationCount),BC
;  787				}
;  788			}
L_160:
;  789			if(key & kb_Right && player1ShieldActive == 0)
	LD	A,(_key)
	AND	A,4
	JR	Z,L_218
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_218
;  790			{
;  791				player1X += player1MoveSpeed;
	LD	BC,(_player1MoveSpeed)
	LD	HL,(_player1X)
	ADD	HL,BC
	LD	(_player1X),HL
;  792				if(player1Flipped == 1)
	LD	HL,(_player1Flipped)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_153
;  793				{
;  794					player1Flipped = 0;
	LD	BC,0
	LD	(_player1Flipped),BC
;  795					player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
;  796					player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
;  797				}
L_153:
;  798				player1MoveAnimationCount++;
	LD	BC,(_player1MoveAnimationCount)
	INC	BC
	LD	(_player1MoveAnimationCount),BC
;  799				if(player1MoveAnimationCount == 3)
	LD	HL,(_player1MoveAnimationCount)
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_218
;  800				{
;  801					if(player1MoveAnimation != 3)
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_156
;  802					{
;  803						player1MoveAnimation++;
	LD	BC,(_player1MoveAnimation)
	INC	BC
	LD	(_player1MoveAnimation),BC
;  804					}
;  805					else
	JR	L_157
L_156:
;  806					{
;  807						player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
;  808					}
L_157:
;  809					player1MoveAnimationCount = 0;
	LD	BC,0
	LD	(_player1MoveAnimationCount),BC
;  810				}
;  811			}
L_218:
;  812			
;  813			//fight - check for grounded and death
;  814			for(player = 1; player < 3; ++player)
	LD	BC,1
	LD	(_player),BC
	JR	L_217
L_215:
;  815			{
;  816				switch(player)
	LD	HL,(_player)
	CALL	__case8
L__76:
	DW	2
	DB	1
	DW24	L_161	

	DB	2
	DW24	L_162	

	DW24	L_163	

;  817				{
;  818					case 1:
L_161:
;  819						playerX = player1X;
	LD	BC,(_player1X)
	LD	(_playerX),BC
;  820						playerY = player1Y;
	LD	BC,(_player1Y)
	LD	(_playerY),BC
;  821						break;
	JR	L_163
;  822					case 2:
L_162:
;  823						playerX = player2X;
	LD	BC,(_player2X)
	LD	(_playerX),BC
;  824						playerY = player2Y;
	LD	BC,(_player2Y)
	LD	(_playerY),BC
;  825						break;
;  826				}
L_163:
;  827				
;  828				playerGrounded = 0;
	LD	BC,0
	LD	(_playerGrounded),BC
;  829				playerDeath = 0;
	LD	(_playerDeath),BC
;  830				
;  831				if(map == 0)
	LD	HL,(_map)
	CALL	__icmpzero
	JR	NZ,L_200
;  832				{
;  833					if(playerX >= 24 && playerX <= 264 && playerY == 132)
	LD	BC,24
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	JP	M,L_180
	LD	BC,(_playerX)
	LD	HL,264
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_180
	LD	BC,132
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_180
;  834					{
;  835						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  836					}
;  837					else if(playerX >= 72 && playerX <= 216 && playerY == 64)
	JR	L_203
L_180:
	LD	BC,72
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_178
	LD	BC,(_playerX)
	LD	HL,216
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_178
	LD	BC,64
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_178
;  838					{
;  839						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  840					}
;  841					else if(playerX >= -8 && playerX <= 40 && playerY == 40)
	JR	L_203
L_178:
	LD	BC,16777208
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_176
	LD	BC,(_playerX)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_176
	LD	BC,40
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_176
;  842					{
;  843						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  844					}
;  845					else if(playerX >= 248 && playerX <= 296 && playerY == 40)
	JR	L_203
L_176:
	LD	BC,248
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_174
	LD	BC,(_playerX)
	LD	HL,296
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_174
	LD	BC,40
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_174
;  846					{
;  847						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  848					}
;  849					else if(playerY >= 240)
	JR	L_203
L_174:
	LD	BC,240
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_203
;  850					{
;  851						playerDeath = 1;
	LD	BC,1
	LD	(_playerDeath),BC
;  852					}
;  853				}
;  854				else if(map == 1)
	JR	L_203
L_200:
	LD	BC,1
	LD	HL,(_map)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_203
;  855				{
;  856					if(playerX >= -8 && playerX <= 56 && playerY == 96)
	LD	BC,16777208
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_197
	LD	BC,(_playerX)
	LD	HL,56
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_197
	LD	BC,96
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_197
;  857					{
;  858						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  859					}
;  860					else if(playerX >= 232 && playerX <= 296 && playerY == 96)
	JR	L_203
L_197:
	LD	BC,232
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_195
	LD	BC,(_playerX)
	LD	HL,296
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_195
	LD	BC,96
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_195
;  861					{
;  862						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  863					}
;  864					else if(playerX >= 88 && playerX <= 200 && playerY == 80)
	JR	L_203
L_195:
	LD	BC,88
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_193
	LD	BC,(_playerX)
	LD	HL,200
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_193
	LD	BC,80
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_193
;  865					{
;  866						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  867					}
;  868					else if(playerX >= 104 && playerX <= 184 && playerY == 16)
	JR	L_203
L_193:
	LD	BC,104
	LD	HL,(_playerX)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_191
	LD	BC,(_playerX)
	LD	HL,184
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_191
	LD	BC,16
	LD	HL,(_playerY)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_191
;  869					{
;  870						playerGrounded = 1;
	LD	BC,1
	LD	(_playerGrounded),BC
;  871					}
;  872					else if(playerY > 160)
	JR	L_203
L_191:
	LD	BC,(_playerY)
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_203
;  873					{
;  874						playerDeath = 1;
	LD	BC,1
	LD	(_playerDeath),BC
;  875					}
;  876				}
L_203:
;  877				
;  878				switch(player)
	LD	HL,(_player)
	CALL	__case8
L__105:
	DW	2
	DB	1
	DW24	L_201	

	DB	2
	DW24	L_202	

	DW24	L_214	

;  879				{
;  880					case 1:
L_201:
;  881						player1Grounded = playerGrounded;
	LD	BC,(_playerGrounded)
	LD	(_player1Grounded),BC
;  882						break;
	JR	L_214
;  883					case 2:
L_202:
;  884						player2Grounded = playerGrounded;
	LD	BC,(_playerGrounded)
	LD	(_player2Grounded),BC
;  885						break;
;  886				}
L_214:
;  887				
;  888				if(playerDeath == 1)
	LD	BC,1
	LD	HL,(_playerDeath)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_216
;  889				{
;  890					switch(player)
	LD	HL,(_player)
	CALL	__case8
L__107:
	DW	2
	DB	1
	DW24	L_204	

	DB	2
	DW24	L_209	

	DW24	L_216	

;  891					{
;  892						case 1:
L_204:
;  893							player1Lifes--;
	LD	BC,(_player1Lifes)
	DEC	BC
	LD	(_player1Lifes),BC
;  894							if(player1Lifes <= 0)
	OR	A,A
	OR	A,A
	SBC	HL,HL
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_206
;  895							{
;  896								goto gameOver;
;  897							}
;  898							player1X = player1SpawnX;
	LD	BC,(_player1SpawnX)
	LD	(_player1X),BC
;  899							player1Y = player1SpawnY;
	LD	BC,(_player1SpawnY)
	LD	(_player1Y),BC
;  900							player1Flipped = 0;
	LD	BC,0
	LD	(_player1Flipped),BC
;  901							player1MoveAnimation = 0;
	LD	(_player1MoveAnimation),BC
;  902							player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
;  903							player1ShieldActive = 0;
	LD	(_player1ShieldActive),BC
;  904							player1Grounded = 1;
	LD	BC,1
	LD	(_player1Grounded),BC
;  905							break;
	JR	L_216
;  906						case 2:
L_209:
;  907							player2Lifes--;
	LD	BC,(_player2Lifes)
	DEC	BC
	LD	(_player2Lifes),BC
;  908							if(player2Lifes <= 0)
	OR	A,A
	OR	A,A
	SBC	HL,HL
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_206
;  909							{
;  910								goto gameOver;
;  911							}
;  912							player2X = player2SpawnX;
	LD	BC,(_player2SpawnX)
	LD	(_player2X),BC
;  913							player2Y = player2SpawnY;
	LD	BC,(_player2SpawnY)
	LD	(_player2Y),BC
;  914							player2Flipped = 1;
	LD	BC,1
	LD	(_player2Flipped),BC
;  915							player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
;  916							player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
;  917							player2ShieldActive = 0;
	LD	(_player2ShieldActive),BC
;  918							player2Grounded = 1;
	LD	BC,1
	LD	(_player2Grounded),BC
;  919							break;
;  920					}
;  921				}
;  922			}
L_216:
	LD	BC,(_player)
	INC	BC
	LD	(_player),BC
L_217:
	LD	BC,3
	LD	HL,(_player)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_215
;  923			
;  924			//fight - player 1 always grounded in test mode
;  925			if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_225
;  926			{
;  927				player1Grounded = 1;
	LD	(_player1Grounded),BC
;  928			}
L_225:
;  929			
;  930			//fight - calculate jumps (player 1)
;  931			if(player1Jumping > 0)
	LD	BC,(_player1Jumping)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_224
;  932			{
;  933				player1Jumping--;
	LD	BC,(_player1Jumping)
	DEC	BC
	LD	(_player1Jumping),BC
;  934				player1Y -= player1JumpSpeed;
	LD	HL,(_player1Y)
	LD	BC,(_player1JumpSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Y),HL
;  935			}
;  936			else if(player1Grounded == 0)
	JR	L_230
L_224:
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_230
;  937			{
;  938				player1Y += player1FallSpeed;
	LD	BC,(_player1FallSpeed)
	LD	HL,(_player1Y)
	ADD	HL,BC
	LD	(_player1Y),HL
;  939			}
L_230:
;  940			
;  941			//fight - calculate jumps (player 2)
;  942			if(player2Jumping > 0)
	LD	BC,(_player2Jumping)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_229
;  943			{
;  944				player2Jumping--;
	LD	BC,(_player2Jumping)
	DEC	BC
	LD	(_player2Jumping),BC
;  945				player2Y -= player2JumpSpeed;
	LD	HL,(_player2Y)
	LD	BC,(_player2JumpSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Y),HL
;  946			}
;  947			else if(player2Grounded == 0)
	JR	L_236
L_229:
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_236
;  948			{
;  949				player2Y += player2FallSpeed;
	LD	BC,(_player2FallSpeed)
	LD	HL,(_player2Y)
	ADD	HL,BC
	LD	(_player2Y),HL
;  950			}
L_236:
;  951			
;  952			//fight - calculate knockback (player 1)
;  953			if(player1XKnockback < 0)
	LD	HL,(_player1XKnockback)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_235
;  954			{
;  955				player1XKnockback++;
	LD	BC,(_player1XKnockback)
	INC	BC
	LD	(_player1XKnockback),BC
;  956				player1X -= player2WeaponKnockbackStrength;
	LD	HL,(_player1X)
	LD	BC,(_player2WeaponKnockbackStrength)
	OR	A,A
	SBC	HL,BC
	LD	(_player1X),HL
;  957			}
;  958			else if(player1XKnockback > 0)
	JR	L_242
L_235:
	LD	BC,(_player1XKnockback)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_242
;  959			{
;  960				player1XKnockback--;
	LD	BC,(_player1XKnockback)
	DEC	BC
	LD	(_player1XKnockback),BC
;  961				player1X += player2WeaponKnockbackStrength;
	LD	BC,(_player2WeaponKnockbackStrength)
	LD	HL,(_player1X)
	ADD	HL,BC
	LD	(_player1X),HL
;  962			}
L_242:
;  963			
;  964			//fight - calculate knockback (player 2)
;  965			if(player2XKnockback < 0)
	LD	HL,(_player2XKnockback)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_241
;  966			{
;  967				player2XKnockback++;
	LD	BC,(_player2XKnockback)
	INC	BC
	LD	(_player2XKnockback),BC
;  968				player2X -= player1WeaponKnockbackStrength;
	LD	HL,(_player2X)
	LD	BC,(_player1WeaponKnockbackStrength)
	OR	A,A
	SBC	HL,BC
	LD	(_player2X),HL
;  969			}
;  970			else if(player2XKnockback > 0)
	JR	L_249
L_241:
	LD	BC,(_player2XKnockback)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_249
;  971			{
;  972				player2XKnockback--;
	LD	BC,(_player2XKnockback)
	DEC	BC
	LD	(_player2XKnockback),BC
;  973				player2X += player1WeaponKnockbackStrength;
	LD	BC,(_player1WeaponKnockbackStrength)
	LD	HL,(_player2X)
	ADD	HL,BC
	LD	(_player2X),HL
;  974			}
L_249:
;  975			
;  976			//fight - calculate weapons (player 1)
;  977			if(player1Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_256
;  978			{
;  979				if(player1Weapon1Flipped == 0)
	LD	HL,(_player1Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_244
;  980				{
;  981					player1Weapon1X += player1WeaponSpeed;
	LD	BC,(_player1WeaponSpeed)
	LD	HL,(_player1Weapon1X)
	ADD	HL,BC
	LD	(_player1Weapon1X),HL
;  982				}
;  983				else
	JR	L_247
L_244:
;  984				{
;  985					player1Weapon1X -= player1WeaponSpeed;
	LD	HL,(_player1Weapon1X)
	LD	BC,(_player1WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Weapon1X),HL
;  986				}
L_247:
;  987				
;  988				if(player1Weapon1X <= -8 || player1Weapon1X >= 320)
	LD	BC,(_player1Weapon1X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_246
	LD	BC,320
	LD	HL,(_player1Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_256
L_246:
;  989				{
;  990					player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
;  991				}
;  992			}
L_256:
;  993			if(player1Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_263
;  994			{
;  995				if(player1Weapon2Flipped == 0)
	LD	HL,(_player1Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_251
;  996				{
;  997					player1Weapon2X += player1WeaponSpeed;
	LD	BC,(_player1WeaponSpeed)
	LD	HL,(_player1Weapon2X)
	ADD	HL,BC
	LD	(_player1Weapon2X),HL
;  998				}
;  999				else
	JR	L_254
L_251:
; 1000				{
; 1001					player1Weapon2X -= player1WeaponSpeed;
	LD	HL,(_player1Weapon2X)
	LD	BC,(_player1WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Weapon2X),HL
; 1002				}
L_254:
; 1003				
; 1004				if(player1Weapon2X <= -8 || player1Weapon2X >= 320)
	LD	BC,(_player1Weapon2X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_253
	LD	BC,320
	LD	HL,(_player1Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_263
L_253:
; 1005				{
; 1006					player1Weapon2 = 0;
	LD	BC,0
	LD	(_player1Weapon2),BC
; 1007				}
; 1008			}
L_263:
; 1009			if(player1Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_270
; 1010			{
; 1011				if(player1Weapon3Flipped == 0)
	LD	HL,(_player1Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_258
; 1012				{
; 1013					player1Weapon3X += player1WeaponSpeed;
	LD	BC,(_player1WeaponSpeed)
	LD	HL,(_player1Weapon3X)
	ADD	HL,BC
	LD	(_player1Weapon3X),HL
; 1014				}
; 1015				else
	JR	L_261
L_258:
; 1016				{
; 1017					player1Weapon3X -= player1WeaponSpeed;
	LD	HL,(_player1Weapon3X)
	LD	BC,(_player1WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player1Weapon3X),HL
; 1018				}
L_261:
; 1019				
; 1020				if(player1Weapon3X <= -8 || player1Weapon3X >= 320)
	LD	BC,(_player1Weapon3X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_260
	LD	BC,320
	LD	HL,(_player1Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_270
L_260:
; 1021				{
; 1022					player1Weapon3 = 0;
	LD	BC,0
	LD	(_player1Weapon3),BC
; 1023				}
; 1024			}
L_270:
; 1025			
; 1026			//fight - calculate weapons (player 2)
; 1027			if(player2Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_277
; 1028			{
; 1029				if(player2Weapon1Flipped == 0)
	LD	HL,(_player2Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_265
; 1030				{
; 1031					player2Weapon1X += player2WeaponSpeed;
	LD	BC,(_player2WeaponSpeed)
	LD	HL,(_player2Weapon1X)
	ADD	HL,BC
	LD	(_player2Weapon1X),HL
; 1032				}
; 1033				else
	JR	L_268
L_265:
; 1034				{
; 1035					player2Weapon1X -= player2WeaponSpeed;
	LD	HL,(_player2Weapon1X)
	LD	BC,(_player2WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Weapon1X),HL
; 1036				}
L_268:
; 1037				
; 1038				if(player2Weapon1X <= -8 || player2Weapon1X >= 320)
	LD	BC,(_player2Weapon1X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_267
	LD	BC,320
	LD	HL,(_player2Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_277
L_267:
; 1039				{
; 1040					player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
; 1041				}
; 1042			}
L_277:
; 1043			if(player2Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_284
; 1044			{
; 1045				if(player2Weapon2Flipped == 0)
	LD	HL,(_player2Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_272
; 1046				{
; 1047					player2Weapon2X += player2WeaponSpeed;
	LD	BC,(_player2WeaponSpeed)
	LD	HL,(_player2Weapon2X)
	ADD	HL,BC
	LD	(_player2Weapon2X),HL
; 1048				}
; 1049				else
	JR	L_275
L_272:
; 1050				{
; 1051					player2Weapon2X -= player2WeaponSpeed;
	LD	HL,(_player2Weapon2X)
	LD	BC,(_player2WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Weapon2X),HL
; 1052				}
L_275:
; 1053				
; 1054				if(player2Weapon2X <= -8 || player2Weapon2X >= 320)
	LD	BC,(_player2Weapon2X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_274
	LD	BC,320
	LD	HL,(_player2Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_284
L_274:
; 1055				{
; 1056					player2Weapon2 = 0;
	LD	BC,0
	LD	(_player2Weapon2),BC
; 1057				}
; 1058			}
L_284:
; 1059			if(player2Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_314
; 1060			{
; 1061				if(player2Weapon3Flipped == 0)
	LD	HL,(_player2Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_279
; 1062				{
; 1063					player2Weapon3X += player2WeaponSpeed;
	LD	BC,(_player2WeaponSpeed)
	LD	HL,(_player2Weapon3X)
	ADD	HL,BC
	LD	(_player2Weapon3X),HL
; 1064				}
; 1065				else
	JR	L_282
L_279:
; 1066				{
; 1067					player2Weapon3X -= player2WeaponSpeed;
	LD	HL,(_player2Weapon3X)
	LD	BC,(_player2WeaponSpeed)
	OR	A,A
	SBC	HL,BC
	LD	(_player2Weapon3X),HL
; 1068				}
L_282:
; 1069				
; 1070				if(player2Weapon3X <= -8 || player2Weapon3X >= 320)
	LD	BC,(_player2Weapon3X)
	LD	HL,16777208
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_281
	LD	BC,320
	LD	HL,(_player2Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_314
L_281:
; 1071				{
; 1072					player2Weapon3 = 0;
	LD	BC,0
	LD	(_player2Weapon3),BC
; 1073				}
; 1074			}
L_314:
; 1075			
; 1076			//fight - draw character (player 1)
; 1077			if(player1Flipped == 0 && player1Grounded == 0)
	LD	HL,(_player1Flipped)
	CALL	__icmpzero
	JR	Z,L__145
	LD	A,1
	JR	L__146
L__145:
	XOR	A,A
L__146:
	LD	(IX+-1),A
	OR	A,A
	JR	NZ,L_313
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_313
; 1078			{
; 1079				gfx_TransparentSprite(player1CharacterNotGrounded, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterNotGrounded)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1080				player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
; 1081				player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
; 1082			}
; 1083			else if(player1Flipped == 1 && player1Grounded == 0)
	JR	L_316
L_313:
	LD	BC,1
	LD	HL,(_player1Flipped)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__150
	LD	A,1
	JR	L__151
L__150:
	XOR	A,A
L__151:
	LD	(IX+-2),A
	OR	A,A
	JR	NZ,L_311
	LD	HL,(_player1Grounded)
	CALL	__icmpzero
	JR	NZ,L_311
; 1084			{
; 1085				gfx_TransparentSprite(player1CharacterNotGroundedFlipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterNotGroundedFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1086				player1MoveAnimation = 0;
	LD	BC,0
	LD	(_player1MoveAnimation),BC
; 1087				player1MoveAnimationCount = 0;
	LD	(_player1MoveAnimationCount),BC
; 1088			}
; 1089			else if(player1Flipped == 0 && player1MoveAnimation == 0)
	JR	L_316
L_311:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_309
	LD	HL,(_player1MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_309
; 1090			{
; 1091				gfx_TransparentSprite(player1Character, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1Character)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1092			}
; 1093			else if(player1Flipped == 1 && player1MoveAnimation == 0)
	JR	L_316
L_309:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_307
	LD	HL,(_player1MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_307
; 1094			{
; 1095				gfx_TransparentSprite(player1CharacterFlipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1096			}
; 1097			else if(player1Flipped == 0 && player1MoveAnimation == 1)
	JR	L_316
L_307:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_305
	LD	BC,1
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_305
; 1098			{
; 1099				gfx_TransparentSprite(player1CharacterMoving1, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1100			}
; 1101			else if(player1Flipped == 1 && player1MoveAnimation == 1)
	JR	L_316
L_305:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_303
	LD	BC,1
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_303
; 1102			{
; 1103				gfx_TransparentSprite(player1CharacterMoving1Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1104			}
; 1105			else if(player1Flipped == 0 && player1MoveAnimation == 2)
	JR	L_316
L_303:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_301
	LD	BC,2
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_301
; 1106			{
; 1107				gfx_TransparentSprite(player1CharacterMoving2, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving2)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1108			}
; 1109			else if(player1Flipped == 1 && player1MoveAnimation == 2)
	JR	L_316
L_301:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_299
	LD	BC,2
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_299
; 1110			{
; 1111				gfx_TransparentSprite(player1CharacterMoving2Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving2Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1112			}
; 1113			else if(player1Flipped == 0 && player1MoveAnimation == 3)
	JR	L_316
L_299:
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_297
	LD	BC,3
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_297
; 1114			{
; 1115				gfx_TransparentSprite(player1CharacterMoving1, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1116			}
; 1117			else if(player1Flipped == 1 && player1MoveAnimation == 3)
	JR	L_316
L_297:
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_316
	LD	BC,3
	LD	HL,(_player1MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_316
; 1118			{
; 1119				gfx_TransparentSprite(player1CharacterMoving1Flipped, player1X, player1Y);
	LD	BC,(_player1Y)
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	LD	BC,(_player1CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1120			}
L_316:
; 1121			
; 1122			//fight - draw shield (player 1)
; 1123			if(player1ShieldActive == 1)
	LD	BC,1
	LD	HL,(_player1ShieldActive)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_346
; 1124			{
; 1125				gfx_TransparentSprite(shield, player1X - 12, player1Y - 4);
	LD	IY,(_player1Y)
	LEA	BC,IY+-4
	PUSH	BC
	LD	IY,(_player1X)
	LEA	BC,IY+-12
	PUSH	BC
	LD	BC,_shield_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1126			}
L_346:
; 1127			
; 1128			//fight - draw character (player 2)
; 1129			if(player2Flipped == 0 && player2Grounded == 0)
	LD	HL,(_player2Flipped)
	CALL	__icmpzero
	JR	Z,L__172
	LD	A,1
	JR	L__173
L__172:
	XOR	A,A
L__173:
	LD	(IX+-3),A
	OR	A,A
	JR	NZ,L_345
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_345
; 1130			{
; 1131				gfx_TransparentSprite(player2CharacterNotGrounded, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterNotGrounded)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1132				player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
; 1133				player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
; 1134			}
; 1135			else if(player2Flipped == 1 && player2Grounded == 0)
	JR	L_348
L_345:
	LD	BC,1
	LD	HL,(_player2Flipped)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__177
	LD	A,1
	JR	L__178
L__177:
	XOR	A,A
L__178:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_343
	LD	HL,(_player2Grounded)
	CALL	__icmpzero
	JR	NZ,L_343
; 1136			{
; 1137				gfx_TransparentSprite(player2CharacterNotGroundedFlipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterNotGroundedFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1138				player2MoveAnimation = 0;
	LD	BC,0
	LD	(_player2MoveAnimation),BC
; 1139				player2MoveAnimationCount = 0;
	LD	(_player2MoveAnimationCount),BC
; 1140			}
; 1141			else if(player2Flipped == 0 && player2MoveAnimation == 0)
	JR	L_348
L_343:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_341
	LD	HL,(_player2MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_341
; 1142			{
; 1143				gfx_TransparentSprite(player2Character, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2Character)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1144			}
; 1145			else if(player2Flipped == 1 && player2MoveAnimation == 0)
	JR	L_348
L_341:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_339
	LD	HL,(_player2MoveAnimation)
	CALL	__icmpzero
	JR	NZ,L_339
; 1146			{
; 1147				gfx_TransparentSprite(player2CharacterFlipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterFlipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1148			}
; 1149			else if(player2Flipped == 0 && player2MoveAnimation == 1)
	JR	L_348
L_339:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_337
	LD	BC,1
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_337
; 1150			{
; 1151				gfx_TransparentSprite(player2CharacterMoving1, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1152			}
; 1153			else if(player2Flipped == 1 && player2MoveAnimation == 1)
	JR	L_348
L_337:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_335
	LD	BC,1
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_335
; 1154			{
; 1155				gfx_TransparentSprite(player2CharacterMoving1Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1156			}
; 1157			else if(player2Flipped == 0 && player2MoveAnimation == 2)
	JR	L_348
L_335:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_333
	LD	BC,2
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_333
; 1158			{
; 1159				gfx_TransparentSprite(player2CharacterMoving2, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving2)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1160			}
; 1161			else if(player2Flipped == 1 && player2MoveAnimation == 2)
	JR	L_348
L_333:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_331
	LD	BC,2
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_331
; 1162			{
; 1163				gfx_TransparentSprite(player2CharacterMoving2Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving2Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1164			}
; 1165			else if(player2Flipped == 0 && player2MoveAnimation == 3)
	JR	L_348
L_331:
	LD	A,(IX+-3)
	OR	A,A
	JR	NZ,L_329
	LD	BC,3
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_329
; 1166			{
; 1167				gfx_TransparentSprite(player2CharacterMoving1, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1168			}
; 1169			else if(player2Flipped == 1 && player2MoveAnimation == 3)
	JR	L_348
L_329:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_348
	LD	BC,3
	LD	HL,(_player2MoveAnimation)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_348
; 1170			{
; 1171				gfx_TransparentSprite(player2CharacterMoving1Flipped, player2X, player2Y);
	LD	BC,(_player2Y)
	PUSH	BC
	LD	BC,(_player2X)
	PUSH	BC
	LD	BC,(_player2CharacterMoving1Flipped)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1172			}
L_348:
; 1173			
; 1174			//fight - draw shield (player 2)
; 1175			if(player2ShieldActive == 1)
	LD	BC,1
	LD	HL,(_player2ShieldActive)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_350
; 1176			{
; 1177				gfx_TransparentSprite(shield, player2X - 12, player2Y - 4);
	LD	IY,(_player2Y)
	LEA	BC,IY+-4
	PUSH	BC
	LD	IY,(_player2X)
	LEA	BC,IY+-12
	PUSH	BC
	LD	BC,_shield_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1178			}
L_350:
; 1179			
; 1180			//fight - draw weapons (player 1)
; 1181			if(player1Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_352
; 1182			{
; 1183				gfx_TransparentSprite(player1Weapon, player1Weapon1X, player1Weapon1Y);
	LD	BC,(_player1Weapon1Y)
	PUSH	BC
	LD	BC,(_player1Weapon1X)
	PUSH	BC
	LD	BC,(_player1Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1184			}
L_352:
; 1185			if(player1Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_354
; 1186			{
; 1187				gfx_TransparentSprite(player1Weapon, player1Weapon2X, player1Weapon2Y);
	LD	BC,(_player1Weapon2Y)
	PUSH	BC
	LD	BC,(_player1Weapon2X)
	PUSH	BC
	LD	BC,(_player1Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1188			}
L_354:
; 1189			if(player1Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player1Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_356
; 1190			{
; 1191				gfx_TransparentSprite(player1Weapon, player1Weapon3X, player1Weapon3Y);
	LD	BC,(_player1Weapon3Y)
	PUSH	BC
	LD	BC,(_player1Weapon3X)
	PUSH	BC
	LD	BC,(_player1Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1192			}
L_356:
; 1193			
; 1194			//fight - draw weapons (player 2)
; 1195			if(player2Weapon1 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_358
; 1196			{
; 1197				gfx_TransparentSprite(player2Weapon, player2Weapon1X, player2Weapon1Y);
	LD	BC,(_player2Weapon1Y)
	PUSH	BC
	LD	BC,(_player2Weapon1X)
	PUSH	BC
	LD	BC,(_player2Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1198			}
L_358:
; 1199			if(player2Weapon2 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_360
; 1200			{
; 1201				gfx_TransparentSprite(player2Weapon, player2Weapon2X, player2Weapon2Y);
	LD	BC,(_player2Weapon2Y)
	PUSH	BC
	LD	BC,(_player2Weapon2X)
	PUSH	BC
	LD	BC,(_player2Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1202			}
L_360:
; 1203			if(player2Weapon3 == 1)
	LD	BC,1
	LD	HL,(_player2Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_375
; 1204			{
; 1205				gfx_TransparentSprite(player2Weapon, player2Weapon3X, player2Weapon3Y);
	LD	BC,(_player2Weapon3Y)
	PUSH	BC
	LD	BC,(_player2Weapon3X)
	PUSH	BC
	LD	BC,(_player2Weapon)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1206			}
L_375:
; 1207			
; 1208			//fight - check for weapon hits (player 1)
; 1209			if(player1Weapon1 == 1 && player1Weapon1Y + 8 >= player2Y && player1Weapon1Y <= player2Y + 48)
	LD	BC,1
	LD	HL,(_player1Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_390
	LD	IY,(_player1Weapon1Y)
	LEA	HL,IY+8
	LD	BC,(_player2Y)
	OR	A,A
	SBC	HL,BC
	JP	M,L_390
	LD	IY,(_player2Y)
	LEA	HL,IY+48
	LD	BC,(_player1Weapon1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_390
; 1210			{
; 1211				if(player1Weapon1Flipped == 0 && player1Weapon1X + 8 >= player2X && player1Weapon1X <= player2X + 32)
	LD	HL,(_player1Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_373
	LD	IY,(_player1Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_373
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_373
; 1212				{
; 1213					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_366
; 1214					{
; 1215						player2XKnockback += player1WeaponKnockback;
	LD	BC,(_player1WeaponKnockback)
	LD	HL,(_player2XKnockback)
	ADD	HL,BC
	LD	(_player2XKnockback),HL
; 1216					}
L_366:
; 1217					player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
; 1218				}
; 1219				else if(player1Weapon1Flipped == 1 && player1Weapon1X <= player2X + 32 && player1Weapon1X + 8 >= player2X)
	JR	L_390
L_373:
	LD	BC,1
	LD	HL,(_player1Weapon1Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_390
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_390
	LD	IY,(_player1Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_390
; 1220				{
; 1221					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_370
; 1222					{
; 1223						player2XKnockback -= player1WeaponKnockback;
	LD	HL,(_player2XKnockback)
	LD	BC,(_player1WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player2XKnockback),HL
; 1224					}
L_370:
; 1225					player1Weapon1 = 0;
	LD	BC,0
	LD	(_player1Weapon1),BC
; 1226				}
; 1227			}
L_390:
; 1228			if(player1Weapon2 == 1 && player1Weapon2Y + 8 >= player2Y && player1Weapon2Y <= player2Y + 48)
	LD	BC,1
	LD	HL,(_player1Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_405
	LD	IY,(_player1Weapon2Y)
	LEA	HL,IY+8
	LD	BC,(_player2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_405
	LD	IY,(_player2Y)
	LEA	HL,IY+48
	LD	BC,(_player1Weapon2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_405
; 1229			{
; 1230				if(player1Weapon2Flipped == 0 && player1Weapon2X + 8 >= player2X && player1Weapon2X <= player2X + 32)
	LD	HL,(_player1Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_388
	LD	IY,(_player1Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_388
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_388
; 1231				{
; 1232					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_381
; 1233					{
; 1234						player2XKnockback += player1WeaponKnockback;
	LD	BC,(_player1WeaponKnockback)
	LD	HL,(_player2XKnockback)
	ADD	HL,BC
	LD	(_player2XKnockback),HL
; 1235					}
L_381:
; 1236					player1Weapon2 = 0;
	LD	BC,0
	LD	(_player1Weapon2),BC
; 1237				}
; 1238				else if(player1Weapon2Flipped == 1 && player1Weapon2X <= player2X + 32 && player1Weapon2X + 8 >= player2X)
	JR	L_405
L_388:
	LD	BC,1
	LD	HL,(_player1Weapon2Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_405
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_405
	LD	IY,(_player1Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_405
; 1239				{
; 1240					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_385
; 1241					{
; 1242						player2XKnockback -= player1WeaponKnockback;
	LD	HL,(_player2XKnockback)
	LD	BC,(_player1WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player2XKnockback),HL
; 1243					}
L_385:
; 1244					player1Weapon2 = 0;
	LD	BC,0
	LD	(_player1Weapon2),BC
; 1245				}
; 1246			}
L_405:
; 1247			if(player1Weapon3 == 1 && player1Weapon3Y + 8 >= player2Y && player1Weapon3Y <= player2Y + 48)
	LD	BC,1
	LD	HL,(_player1Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_420
	LD	IY,(_player1Weapon3Y)
	LEA	HL,IY+8
	LD	BC,(_player2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_420
	LD	IY,(_player2Y)
	LEA	HL,IY+48
	LD	BC,(_player1Weapon3Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_420
; 1248			{
; 1249				if(player1Weapon3Flipped == 0 && player1Weapon3X + 8 >= player2X && player1Weapon3X <= player2X + 32)
	LD	HL,(_player1Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_403
	LD	IY,(_player1Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_403
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_403
; 1250				{
; 1251					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_396
; 1252					{
; 1253						player2XKnockback += player1WeaponKnockback;
	LD	BC,(_player1WeaponKnockback)
	LD	HL,(_player2XKnockback)
	ADD	HL,BC
	LD	(_player2XKnockback),HL
; 1254					}
L_396:
; 1255					player1Weapon3 = 0;
	LD	BC,0
	LD	(_player1Weapon3),BC
; 1256				}
; 1257				else if(player1Weapon3Flipped == 1 && player1Weapon3X <= player2X + 32 && player1Weapon3X + 8 >= player2X)
	JR	L_420
L_403:
	LD	BC,1
	LD	HL,(_player1Weapon3Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_420
	LD	IY,(_player2X)
	LEA	HL,IY+32
	LD	BC,(_player1Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_420
	LD	IY,(_player1Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_420
; 1258				{
; 1259					if(player2ShieldActive == 0)
	LD	HL,(_player2ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_400
; 1260					{
; 1261						player2XKnockback -= player1WeaponKnockback;
	LD	HL,(_player2XKnockback)
	LD	BC,(_player1WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player2XKnockback),HL
; 1262					}
L_400:
; 1263					player1Weapon3 = 0;
	LD	BC,0
	LD	(_player1Weapon3),BC
; 1264				}
; 1265			}
L_420:
; 1266			
; 1267			//fight - check for weapon hits (player 2)
; 1268			if(player2Weapon1 == 1 && player2Weapon1Y + 8 >= player1Y && player2Weapon1Y <= player1Y + 48)
	LD	BC,1
	LD	HL,(_player2Weapon1)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_435
	LD	IY,(_player2Weapon1Y)
	LEA	HL,IY+8
	LD	BC,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_435
	LD	IY,(_player1Y)
	LEA	HL,IY+48
	LD	BC,(_player2Weapon1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_435
; 1269			{
; 1270				if(player2Weapon1Flipped == 0 && player2Weapon1X + 8 >= player1X && player2Weapon1X <= player1X + 32)
	LD	HL,(_player2Weapon1Flipped)
	CALL	__icmpzero
	JR	NZ,L_418
	LD	IY,(_player2Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_418
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_418
; 1271				{
; 1272					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_411
; 1273					{
; 1274						player1XKnockback += player2WeaponKnockback;
	LD	BC,(_player2WeaponKnockback)
	LD	HL,(_player1XKnockback)
	ADD	HL,BC
	LD	(_player1XKnockback),HL
; 1275					}
L_411:
; 1276					player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
; 1277				}
; 1278				else if(player2Weapon1Flipped == 1 && player2Weapon1X <= player1X + 32 && player2Weapon1X + 8 >= player1X)
	JR	L_435
L_418:
	LD	BC,1
	LD	HL,(_player2Weapon1Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_435
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_435
	LD	IY,(_player2Weapon1X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_435
; 1279				{
; 1280					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_415
; 1281					{
; 1282						player1XKnockback -= player2WeaponKnockback;
	LD	HL,(_player1XKnockback)
	LD	BC,(_player2WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player1XKnockback),HL
; 1283					}
L_415:
; 1284					player2Weapon1 = 0;
	LD	BC,0
	LD	(_player2Weapon1),BC
; 1285				}
; 1286			}
L_435:
; 1287			if(player2Weapon2 == 1 && player2Weapon2Y + 8 >= player1Y && player2Weapon2Y <= player1Y + 48)
	LD	BC,1
	LD	HL,(_player2Weapon2)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_450
	LD	IY,(_player2Weapon2Y)
	LEA	HL,IY+8
	LD	BC,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_450
	LD	IY,(_player1Y)
	LEA	HL,IY+48
	LD	BC,(_player2Weapon2Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_450
; 1288			{
; 1289				if(player2Weapon2Flipped == 0 && player2Weapon2X + 8 >= player1X && player2Weapon2X <= player1X + 32)
	LD	HL,(_player2Weapon2Flipped)
	CALL	__icmpzero
	JR	NZ,L_433
	LD	IY,(_player2Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_433
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_433
; 1290				{
; 1291					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_426
; 1292					{
; 1293						player1XKnockback += player2WeaponKnockback;
	LD	BC,(_player2WeaponKnockback)
	LD	HL,(_player1XKnockback)
	ADD	HL,BC
	LD	(_player1XKnockback),HL
; 1294					}
L_426:
; 1295					player2Weapon2 = 0;
	LD	BC,0
	LD	(_player2Weapon2),BC
; 1296				}
; 1297				else if(player2Weapon2Flipped == 1 && player2Weapon2X <= player1X + 32 && player2Weapon2X + 8 >= player1X)
	JR	L_450
L_433:
	LD	BC,1
	LD	HL,(_player2Weapon2Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_450
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon2X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_450
	LD	IY,(_player2Weapon2X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_450
; 1298				{
; 1299					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_430
; 1300					{
; 1301						player1XKnockback -= player2WeaponKnockback;
	LD	HL,(_player1XKnockback)
	LD	BC,(_player2WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player1XKnockback),HL
; 1302					}
L_430:
; 1303					player2Weapon2 = 0;
	LD	BC,0
	LD	(_player2Weapon2),BC
; 1304				}
; 1305			}
L_450:
; 1306			if(player2Weapon3 == 1 && player2Weapon3Y + 8 >= player1Y && player2Weapon3Y <= player1Y + 48)
	LD	BC,1
	LD	HL,(_player2Weapon3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_451
	LD	IY,(_player2Weapon3Y)
	LEA	HL,IY+8
	LD	BC,(_player1Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_451
	LD	IY,(_player1Y)
	LEA	HL,IY+48
	LD	BC,(_player2Weapon3Y)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_451
; 1307			{
; 1308				if(player2Weapon3Flipped == 0 && player2Weapon3X + 8 >= player1X && player2Weapon3X <= player1X + 32)
	LD	HL,(_player2Weapon3Flipped)
	CALL	__icmpzero
	JR	NZ,L_448
	LD	IY,(_player2Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_448
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_448
; 1309				{
; 1310					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_441
; 1311					{
; 1312						player1XKnockback += player2WeaponKnockback;
	LD	BC,(_player2WeaponKnockback)
	LD	HL,(_player1XKnockback)
	ADD	HL,BC
	LD	(_player1XKnockback),HL
; 1313					}
L_441:
; 1314					player2Weapon3 = 0;
	LD	BC,0
	LD	(_player2Weapon3),BC
; 1315				}
; 1316				else if(player2Weapon3Flipped == 1 && player2Weapon3X <= player1X + 32 && player2Weapon3X + 8 >= player1X)
	JR	L_451
L_448:
	LD	BC,1
	LD	HL,(_player2Weapon3Flipped)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_451
	LD	IY,(_player1X)
	LEA	HL,IY+32
	LD	BC,(_player2Weapon3X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_451
	LD	IY,(_player2Weapon3X)
	LEA	HL,IY+8
	LD	BC,(_player1X)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_451
; 1317				{
; 1318					if(player1ShieldActive == 0)
	LD	HL,(_player1ShieldActive)
	CALL	__icmpzero
	JR	NZ,L_445
; 1319					{
; 1320						player1XKnockback -= player2WeaponKnockback;
	LD	HL,(_player1XKnockback)
	LD	BC,(_player2WeaponKnockback)
	OR	A,A
	SBC	HL,BC
	LD	(_player1XKnockback),HL
; 1321					}
L_445:
; 1322					player2Weapon3 = 0;
	LD	BC,0
	LD	(_player2Weapon3),BC
; 1323				}
; 1324			}
L_451:
; 1325			
; 1326			//fight - draw UI
; 1327			gfx_TransparentSprite(statusUi, 128, 208);
	LD	BC,208
	PUSH	BC
	LD	BC,128
	PUSH	BC
	LD	BC,_statusUi_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
; 1328			gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1329			gfx_SetTextXY(134, 216);
	LD	BC,216
	PUSH	BC
	LD	BC,134
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
; 1330			gfx_PrintInt(player1Lifes, 1);
	LD	BC,1
	PUSH	BC
	LD	BC,(_player1Lifes)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1331			gfx_SetTextXY(171, 216);
	LD	BC,216
	PUSH	BC
	LD	BC,171
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
; 1332			gfx_PrintInt(player2Lifes, 1);
	LD	BC,1
	PUSH	BC
	LD	BC,(_player2Lifes)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1333			
; 1334			//fight - draw player 1 position
; 1335			if(testMode == 1)
	LD	BC,1
	LD	HL,(_testMode)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_453
; 1336			{
; 1337				gfx_SetTextXY(10, 10);
	LD	BC,10
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
; 1338				gfx_PrintInt(player1X, 3);
	LD	BC,3
	PUSH	BC
	LD	BC,(_player1X)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1339				gfx_PrintString(" ");
	LD	BC,L__271
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
; 1340				gfx_PrintInt(player1Y, 3);
	LD	BC,3
	PUSH	BC
	LD	BC,(_player1Y)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
; 1341			}
L_453:
; 1342			
; 1343			//fight - swap draw
; 1344			gfx_SwapDraw();
	CALL	_gfx_SwapDraw
	JR	L_455
L_127:
; 1345		}
; 1346		
; 1347		//---------------------------------------------------------------
; 1348		
; 1349		//pause
; 1350		pause:
; 1351		
; 1352		gfx_Tilemap(&tilemap, getXBlock(mapXBlock1), getYBlock(mapYBlock1));
	LD	BC,(_mapYBlock1)
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,(_mapXBlock1)
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
; 1353		gfx_SetColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
; 1354		gfx_FillRectangle(0, 70, 320, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
; 1355		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
; 1356		gfx_SetTextBGColor(GRAY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
; 1357		gfx_SetTextScale(2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1358		gfx_PrintStringXY("Pause menu", 80, 90);
	LD	BC,90
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,L__272
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1359		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1360		gfx_PrintStringXY("Press [clear] to continue...", 55, 125);
	LD	BC,125
	PUSH	BC
	LD	BC,55
	PUSH	BC
	LD	BC,L__273
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1361		gfx_PrintStringXY("Press [del] to give up...", 62, 145);
	LD	BC,145
	PUSH	BC
	LD	BC,62
	PUSH	BC
	LD	BC,L__274
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1362		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
; 1363		
; 1364		while(1)
L_461:
; 1365		{
; 1366			key = os_GetCSC();
	CALL	_os_GetCSC
; 1367			if(key == sk_Clear)
	CP	A,15
	LD	(_key),A
	JR	Z,L_94
; 1368			{
; 1369				goto fight;
; 1370			}
; 1371			else if(key == sk_Del)
	LD	A,(_key)
	CP	A,56
	JR	NZ,L_461
; 1372			{
; 1373				player1Lifes = 0;
	LD	BC,0
	LD	(_player1Lifes),BC
L_206:
; 1374				goto gameOver;
; 1375			}
; 1376		}
; 1377		
; 1378		//---------------------------------------------------------------
; 1379		
; 1380		//gameOver
; 1381		gameOver:
; 1382		
; 1383		if(player1Lifes > 0)
	LD	BC,(_player1Lifes)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_463
; 1384		{
; 1385			gfx_Tilemap(&tilemap, getXBlock(7), getYBlock(0));
	LD	BC,0
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,7
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
; 1386		}
; 1387		else
	JR	L_465
L_463:
; 1388		{
; 1389			gfx_Tilemap(&tilemap, getXBlock(0), getYBlock(1));
	LD	BC,1
	PUSH	BC
	CALL	_getYBlock
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_getXBlock
	POP	BC
	PUSH	HL
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
; 1390		}
L_465:
; 1391		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
; 1392		gfx_SetTextBGColor(gfx_GetPixel(0, 0));
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
; 1393		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1394		gfx_PrintStringXY("Press [2nd] to go to the main menu...", 15, 218);
	LD	BC,218
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,L__278
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1395		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
; 1396		while(os_GetCSC() != sk_2nd);
L_467:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_467
; 1397		goto mainMenu;
	JR	L_5
L_32:
; 1398		
; 1399		
; 1400		//---------------------------------------------------------------
; 1401		
; 1402		//error
; 1403		error:
; 1404		
; 1405		gfx_FillScreen(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
; 1406		gfx_SetTextFGColor(WHITE);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
; 1407		gfx_SetTextBGColor(RED);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
; 1408		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
; 1409		gfx_PrintStringXY("An error has occurred!", 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,L__280
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1410		gfx_PrintStringXY("Press [2nd] to go to the main menu...", 0, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,L__281
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
; 1411		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
; 1412		while(os_GetCSC() != sk_2nd);
L_470:
	CALL	_os_GetCSC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,54
	SBC	HL,BC
	JR	NZ,L_470
; 1413		goto mainMenu;
	JR	L_5
L_30:
; 1414		
; 1415		//---------------------------------------------------------------
; 1416		
; 1417		//quit game
; 1418		quitGame:
; 1419		
; 1420		gfx_End();
	CALL	_gfx_End
	OR	A,A
; 1421		return 0;
	SBC	HL,HL
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_gfx_PrintString                    IMPORT  -----   function
;_gfx_PrintInt                       IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_player2Weapon3Y                    STATIC      3   variable
;_player2Weapon2Y                    STATIC      3   variable
;_player2Weapon1Y                    STATIC      3   variable
;_shield_data                        IMPORT   3138   variable
;_player2Weapon3X                    STATIC      3   variable
;_player2Weapon3Flipped              STATIC      3   variable
;_player2Weapon3                     STATIC      3   variable
;_player2Weapon2X                    STATIC      3   variable
;_player2Weapon2Flipped              STATIC      3   variable
;_player2Weapon2                     STATIC      3   variable
;_player2Weapon1X                    STATIC      3   variable
;_player2Weapon1Flipped              STATIC      3   variable
;_player2Weapon1                     STATIC      3   variable
;_player2XKnockback                  STATIC      3   variable
;_player1XKnockback                  STATIC      3   variable
;_player2MoveAnimationCount          STATIC      3   variable
;_playerDeath                        STATIC      3   variable
;_playerGrounded                     STATIC      3   variable
;_playerY                            STATIC      3   variable
;_playerX                            STATIC      3   variable
;_player                             STATIC      3   variable
;_player1MoveAnimationCount          STATIC      3   variable
;_testMode                           STATIC      3   variable
;_kb_Scan                            IMPORT  -----   function
;_player1Weapon3Y                    STATIC      3   variable
;_player1Weapon3X                    STATIC      3   variable
;_player1Weapon3Flipped              STATIC      3   variable
;_player1Weapon3                     STATIC      3   variable
;_player1Weapon2Y                    STATIC      3   variable
;_player1Weapon2X                    STATIC      3   variable
;_player1Weapon2Flipped              STATIC      3   variable
;_player1Weapon2                     STATIC      3   variable
;_player1Weapon1Y                    STATIC      3   variable
;_player1Weapon1X                    STATIC      3   variable
;_player1Weapon1Flipped              STATIC      3   variable
;_player1Weapon1                     STATIC      3   variable
;_gfx_GetPixel                       IMPORT  -----   function
;_statusUi_data                      IMPORT   2050   variable
;_counterFight_data                  IMPORT   1538   variable
;_counter1_data                      IMPORT   1538   variable
;_counter2_data                      IMPORT   1538   variable
;_counter3_data                      IMPORT   1538   variable
;_player2WeaponKnockbackStrength      STATIC      3   variable
;_player2WeaponKnockback             STATIC      3   variable
;_player2WeaponSpeed                 STATIC      3   variable
;_player2JumpHeight                  STATIC      3   variable
;_player2JumpSpeed                   STATIC      3   variable
;_player2FallSpeed                   STATIC      3   variable
;_player2MoveSpeed                   STATIC      3   variable
;_player2CharacterSelection          STATIC      3   variable
;_character1Weapon_data              IMPORT     66   variable
;_character1NotGrounded_data         IMPORT   1538   variable
;_character1Moving2_data             IMPORT   1538   variable
;_character1Moving1_data             IMPORT   1538   variable
;_player1WeaponKnockbackStrength      STATIC      3   variable
;_player1WeaponKnockback             STATIC      3   variable
;_player1WeaponSpeed                 STATIC      3   variable
;_player1JumpHeight                  STATIC      3   variable
;_player1JumpSpeed                   STATIC      3   variable
;_player1FallSpeed                   STATIC      3   variable
;_player1MoveSpeed                   STATIC      3   variable
;_character0Weapon_data              IMPORT     66   variable
;_gfx_FlipSpriteY                    IMPORT  -----   function
;_character0NotGrounded_data         IMPORT   1538   variable
;_character0Moving2_data             IMPORT   1538   variable
;_character0Moving1_data             IMPORT   1538   variable
;_player2Y                           STATIC      3   variable
;_player2X                           STATIC      3   variable
;_player1Y                           STATIC      3   variable
;_player1X                           STATIC      3   variable
;_player2SpawnY                      STATIC      3   variable
;_player2SpawnX                      STATIC      3   variable
;_player1SpawnY                      STATIC      3   variable
;_player1SpawnX                      STATIC      3   variable
;_player2IsAi                        STATIC      3   variable
;_player2Lifes                       STATIC      3   variable
;_player2ShieldActive                STATIC      3   variable
;_player2Grounded                    STATIC      3   variable
;_player2Jumping                     STATIC      3   variable
;_player2MoveAnimation               STATIC      3   variable
;_player2Flipped                     STATIC      3   variable
;_player1Lifes                       STATIC      3   variable
;_player1ShieldActive                STATIC      3   variable
;_player1Grounded                    STATIC      3   variable
;_player1Jumping                     STATIC      3   variable
;_player1MoveAnimation               STATIC      3   variable
;_player1Flipped                     STATIC      3   variable
;_mapAnimationState                  STATIC      3   variable
;_mapAnimationCount                  STATIC      3   variable
;_player1CharacterSelection          STATIC      3   variable
;_character0_data                    IMPORT   1538   variable
;_character1_data                    IMPORT   1538   variable
;_characterHighlighter_data          IMPORT   3074   variable
;_gfx_FillRectangle                  IMPORT  -----   function
;_mapYBlock3                         STATIC      3   variable
;_mapXBlock3                         STATIC      3   variable
;_mapYBlock2                         STATIC      3   variable
;_mapXBlock2                         STATIC      3   variable
;_mapAnimationSpeed                  STATIC      3   variable
;_mapYBlock1                         STATIC      3   variable
;_mapXBlock1                         STATIC      3   variable
;_mapAnimation                       STATIC      3   variable
;_map                                STATIC      3   variable
;_mapHighlighter_data                IMPORT   1026   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_players                            STATIC      3   variable
;_key                                STATIC      1   variable
;_selecting                          STATIC      3   variable
;_selection                          STATIC      3   variable
;_os_GetCSC                          IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_delay                              IMPORT  -----   function
;_character1WeaponKnockbackStrength      STATIC      3   variable
;_character1WeaponKnockback          STATIC      3   variable
;_character1WeaponSpeed              STATIC      3   variable
;_character1JumpHeight               STATIC      3   variable
;_character1JumpSpeed                STATIC      3   variable
;_character1FallSpeed                STATIC      3   variable
;_character1MoveSpeed                STATIC      3   variable
;_character0WeaponKnockbackStrength      STATIC      3   variable
;_character0WeaponKnockback          STATIC      3   variable
;_character0WeaponSpeed              STATIC      3   variable
;_character0JumpHeight               STATIC      3   variable
;_character0JumpSpeed                STATIC      3   variable
;_character0FallSpeed                STATIC      3   variable
;_character0MoveSpeed                STATIC      3   variable
;_gfx_SwapDraw                       IMPORT  -----   function
;_version                            STATIC      4   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_Tilemap                        IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetMonospaceFont               IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_global_palette                     IMPORT    272   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_tileset_tiles_data                 IMPORT    240   variable
;_tilemap                            STATIC     18   variable
;_tilemap_map                        IMPORT  unknown variable
;_player2WeaponFlipped               STATIC      3   variable
;_player2Weapon                      STATIC      3   variable
;_player2CharacterNotGroundedFlipped      STATIC      3   variable
;_player2CharacterMoving2Flipped      STATIC      3   variable
;_player2CharacterMoving1Flipped      STATIC      3   variable
;_player2CharacterFlipped            STATIC      3   variable
;_player2CharacterNotGrounded        STATIC      3   variable
;_player2CharacterMoving2            STATIC      3   variable
;_player2CharacterMoving1            STATIC      3   variable
;_player2Character                   STATIC      3   variable
;_player1WeaponFlipped               STATIC      3   variable
;_player1Weapon                      STATIC      3   variable
;_player1CharacterNotGroundedFlipped      STATIC      3   variable
;_player1CharacterMoving2Flipped      STATIC      3   variable
;_player1CharacterMoving1Flipped      STATIC      3   variable
;_player1CharacterFlipped            STATIC      3   variable
;_player1CharacterNotGrounded        STATIC      3   variable
;_player1CharacterMoving2            STATIC      3   variable
;_player1CharacterMoving1            STATIC      3   variable
;_player1Character                   STATIC      3   variable
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;G_9                                   IX-4      1   variable
;G_8                                   IX-3      1   variable
;G_1                                   IX-2      1   variable
;G_0                                   IX-1      1   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__2:
	DB	"Press [2nd] to start..."
	DB	0
L__11:
	DB	"Singleplayer"
	DB	0
L__13:
	DB	"Quit game"
	DB	0
L__14:
	DB	"Star it on GitHub!"
	DB	0
L__17:
	DB	"Select a map:"
	DB	0
L__27:
	DB	"Select a character:"
	DB	0
L__271:
	DB	" "
	DB	0
L__272:
	DB	"Pause menu"
	DB	0
L__273:
	DB	"Press [clear] to continue..."
	DB	0
L__274:
	DB	"Press [del] to give up..."
	DB	0
L__278:
	DB	"Press [2nd] to go to the main menu..."
	DB	0
L__280:
	DB	"An error has occurred!"
	DB	0
L__281:
	DB	"Press [2nd] to go to the main menu..."
	DB	0
	XREF _tilemap_map:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_SetMonospaceFont:ROM
	XREF _gfx_FlipSpriteY:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintString:ROM
	XREF _gfx_PrintInt:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_GetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _statusUi_data:ROM
	XREF _shield_data:ROM
	XREF _mapHighlighter_data:ROM
	XREF _counterFight_data:ROM
	XREF _counter3_data:ROM
	XREF _counter2_data:ROM
	XREF _counter1_data:ROM
	XREF _characterHighlighter_data:ROM
	XREF _character1Weapon_data:ROM
	XREF _character1NotGrounded_data:ROM
	XREF _character1Moving2_data:ROM
	XREF _character1Moving1_data:ROM
	XREF _character1_data:ROM
	XREF _character0Weapon_data:ROM
	XREF _character0NotGrounded_data:ROM
	XREF _character0Moving2_data:ROM
	XREF _character0Moving1_data:ROM
	XREF _character0_data:ROM
	XREF _tileset_tiles_data:ROM
	XREF _global_palette:ROM
	XREF _os_GetCSC:ROM
	XREF _delay:ROM
	XREF _malloc:ROM
	XREF __imuls:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __imul_b:ROM
	XDEF _main
	XDEF _getYBlock
	XDEF _getXBlock
	XDEF _tilemap
	XDEF _player2WeaponFlipped
	XDEF _player2Weapon
	XDEF _player2CharacterNotGroundedFlipped
	XDEF _player2CharacterMoving2Flipped
	XDEF _player2CharacterMoving1Flipped
	XDEF _player2CharacterFlipped
	XDEF _player2CharacterNotGrounded
	XDEF _player2CharacterMoving2
	XDEF _player2CharacterMoving1
	XDEF _player2Character
	XDEF _player1WeaponFlipped
	XDEF _player1Weapon
	XDEF _player1CharacterNotGroundedFlipped
	XDEF _player1CharacterMoving2Flipped
	XDEF _player1CharacterMoving1Flipped
	XDEF _player1CharacterFlipped
	XDEF _player1CharacterNotGrounded
	XDEF _player1CharacterMoving2
	XDEF _player1CharacterMoving1
	XDEF _player1Character
	XDEF _key
	XDEF _player2Weapon3Flipped
	XDEF _player2Weapon3Y
	XDEF _player2Weapon3X
	XDEF _player2Weapon3
	XDEF _player2Weapon2Flipped
	XDEF _player2Weapon2Y
	XDEF _player2Weapon2X
	XDEF _player2Weapon2
	XDEF _player2Weapon1Flipped
	XDEF _player2Weapon1Y
	XDEF _player2Weapon1X
	XDEF _player2Weapon1
	XDEF _player2WeaponKnockbackStrength
	XDEF _player2WeaponKnockback
	XDEF _player2WeaponSpeed
	XDEF _player2Lifes
	XDEF _player2XKnockback
	XDEF _player2ShieldActive
	XDEF _player2Grounded
	XDEF _player2Jumping
	XDEF _player2MoveAnimationCount
	XDEF _player2MoveAnimation
	XDEF _player2JumpHeight
	XDEF _player2JumpSpeed
	XDEF _player2FallSpeed
	XDEF _player2MoveSpeed
	XDEF _player2Flipped
	XDEF _player2Y
	XDEF _player2X
	XDEF _player2CharacterSelection
	XDEF _player2IsAi
	XDEF _player1Weapon3Flipped
	XDEF _player1Weapon3Y
	XDEF _player1Weapon3X
	XDEF _player1Weapon3
	XDEF _player1Weapon2Flipped
	XDEF _player1Weapon2Y
	XDEF _player1Weapon2X
	XDEF _player1Weapon2
	XDEF _player1Weapon1Flipped
	XDEF _player1Weapon1Y
	XDEF _player1Weapon1X
	XDEF _player1Weapon1
	XDEF _player1WeaponKnockbackStrength
	XDEF _player1WeaponKnockback
	XDEF _player1WeaponSpeed
	XDEF _player1Lifes
	XDEF _player1XKnockback
	XDEF _player1ShieldActive
	XDEF _player1Grounded
	XDEF _player1Jumping
	XDEF _player1MoveAnimationCount
	XDEF _player1MoveAnimation
	XDEF _player1JumpHeight
	XDEF _player1JumpSpeed
	XDEF _player1FallSpeed
	XDEF _player1MoveSpeed
	XDEF _player1Flipped
	XDEF _player1Y
	XDEF _player1X
	XDEF _player1CharacterSelection
	XDEF _player2SpawnY
	XDEF _player2SpawnX
	XDEF _player1SpawnY
	XDEF _player1SpawnX
	XDEF _playerDeath
	XDEF _playerGrounded
	XDEF _playerY
	XDEF _playerX
	XDEF _player
	XDEF _character1WeaponKnockbackStrength
	XDEF _character1WeaponKnockback
	XDEF _character1WeaponSpeed
	XDEF _character1JumpHeight
	XDEF _character1JumpSpeed
	XDEF _character1FallSpeed
	XDEF _character1MoveSpeed
	XDEF _character0WeaponKnockbackStrength
	XDEF _character0WeaponKnockback
	XDEF _character0WeaponSpeed
	XDEF _character0JumpHeight
	XDEF _character0JumpSpeed
	XDEF _character0FallSpeed
	XDEF _character0MoveSpeed
	XDEF _mapYBlock3
	XDEF _mapXBlock3
	XDEF _mapYBlock2
	XDEF _mapXBlock2
	XDEF _mapYBlock1
	XDEF _mapXBlock1
	XDEF _mapAnimationState
	XDEF _mapAnimationSpeed
	XDEF _mapAnimationCount
	XDEF _mapAnimation
	XDEF _map
	XDEF _players
	XDEF _selecting
	XDEF _selection
	XDEF _testMode
	XDEF _version
	END
